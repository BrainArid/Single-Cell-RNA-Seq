%!PS-Adobe-2.0
%%Creator: dvips(k) 5.994 Copyright 2014 Radical Eye Software
%%Title: plos_latex_template.dvi
%%CreationDate: Thu Jun  4 23:56:23 2015
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR12 CMR10 CMR7 CMBX10 MarVoSym SFBX1000 CMBX12 CMSS8
%%+ CMSS10 CMMI10 CMMI7 CMR5 CMMI5 CMTT10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/texbin/dvips -o plos_latex_template.ps
%+ plos_latex_template.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.04:2356
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: cm-super-ts1.enc 0 0
% This file is generated from `TS1uni.map' and `glyphlist.txt', `gl-other.txt'
/TS1Encoding [
% 0x00
/Grave
/Acute
/Circumflex % ?
/Tilde % ?
/Dieresis
/Hungarumlaut
/Ring % ?
/Caron
/Breve % ?
/Macron
/Dotaccent % ?
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
% 0x10
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash % ?
/threequartersemdash
/afii61664.cap % ?
/arrowleft
/arrowright
/tieaccentlowercase % ?
/tieaccentcapital % ?
/tieaccentlowercase.new % ?
/tieaccentcapital.new % ?
/.notdef
/afii61664.asc % ?
% 0x20
/uni2422
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl % ?
/period
/fraction
% 0x30
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
% 0x40
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/uni2127
/.notdef
/circle
% 0x50
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Omega
/.notdef
/.notdef
/.notdef
/uni301A
/.notdef
/uni301B
/arrowup
/arrowdown
% 0x60
/grave.ts1
/.notdef
/born % ?
/divorced % ?
/died % ?
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf % ?
/married % ?
/musicalnote
/.notdef
% 0x70
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow % ?
/hyphendbl.alt % ?
% 0x80
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/uni2016
/perthousand
/bullet
/uni2103
/dollaroldstyle
/centoldstyle
/florin
/colonmonetary
/uni20A9
/uni20A6
% 0x90
/guarani % ?
/peso % ?
/lira
/recipe % ?
/uni203D
/gnaborretni % ?
/dong
/trademark
/uni2031
/paragraph.alt % ?
/uni0E3F
/afii61352
/discount % ?
/estimated
/openbullet
/uni2120
% 0xA0
/uni2045
/uni2046
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft % ?
/logicalnot
/uni2117
/registered
/macron.ts1
% 0xB0
/degree
/plusminus
/twosuperior
/threesuperior
/acute.ts1
/mu
/paragraph
/periodcentered
/uni203B
/onesuperior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro % or /Euro.alt
% 0xC0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xD0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xE0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
% 0xF0
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMTT10
%!PS-AdobeFont-1.0: CMTT10 003.002
%%Title: CMTT10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT10 known{/CMTT10 findfont dup/UniqueID known{dup
/UniqueID get 5000832 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT10 def
/FontBBox {-4 -233 537 696 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT10.) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 57 /nine put
dup 58 /colon put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E5ECEBA191DB82B3
7A69521B0C4D40495B5D9CE7A3AF33D17EE69979B82B715BAD8A5904C5DE0260
6C15950CCF6E188A0CDF841EB68E5A2F88253E382140F87C87E55C9EA93B8C89
14A36CDF630D6BE7CD36DBDCE22B21778E8648B97B7EC6742EB5114BDF0454B0
0EA7B1FE236C84C0E5308C871F67B973892890557AA12E00B2C20C71F516C397
3F3BBD14A1D0149CA064391056E45E9470FC7F6F556ABC82653B3C8049AB5CF4
BA83C8F2158C236B2FFD4208846013BAF4165E8BB8D334C8FF2E8D74AF5DAB2F
D44788869B08399421AAA900ECC6A2D594641C121660D4B5F512938994C18DD0
FCD9B008F68F0351D21ED735B2740CB1E0C1CCD25EB548C35B844601D98828DB
556F71D07E081A593FF12DAF83676492A0FFE16E95717A07082B43A966C1EE8F
8A59E1255E1705C43A23CF29A5E4A6547C93F1680A870EE7BAD8CF74D838CD5E
F806911D8FE4262ED8E7F5BC58B92C9C6D74F8AD45FBB021EC7E97393018B9DB
B1B84E7B243ADB05ADD3F1DB3692ADC5D47FEC7DF93080669E63281F1576B673
125EDF08016664BE73364F65389F7C3B66623AD1754ECBEF9E5CE6948D933787
A5674279ACB2EBECD3B4E6361419AB32028A27670C9F3E18B746A10B00AF6D77
4EC00E3BE521C02A99AE5BAA98F793EB1228952BE67934B91472E01AF7B816BC
56D7F19F631A1927846D800C107B1E9CBFF9D2DD513B4A8CE2E0DFD77B1ED178
E43FA7052765E9FAF89989D490D8FEF6C536EC0D4AE27A74F474B98DA9E6B92F
15E063DB260571979A5DE2423920CE1F59F56EB11E00E3BB9D466A8263E1E385
2014BEFDA8D1EA3EDA04BE32AEE6CD15C5C010A1DF7F705A2C0C18E87C8DCCE9
05D9163181CBA56C0FAC8C06A2990554C8E759D076B01BBEADE3B5FB8B551390
6C8E4A2A1C6E7D9C708614626F3770C0AB7DD2027469C77975C27576065862AD
04E5E50CEBE907E3E991FA0C627302C0E207B4D5992BEBAB5853AD1C0D271728
C76F40A79392ACCA7358F948AC65DC823CFDA59E1FF69CEBB6B7EC3CF21669E4
70D999508F9C49E2D9F8818CA53C977D93E15FBBBAF75B1E84F0BA62BCC4BAFA
4EEC82D804C8A8C0210F3E5E258BB1F6921AF02BA9861BAD5C3D5FC8CEFABA8A
A607E547B802096F7AEB09FBA99C83C9A494B94408DD607CA6561A6E6660C473
62CF8D35F31D052F6C6C8138A8E1430CBA7EA6973D6D510C1A06B3FBD79D9364
240C1A00272DA44B89A9FE8D5BF36DC1B5EBB4A78ADBE9C5EDB485F093D9517D
69E1AC9A8E6C9D7C324E3797CFEAD9A18E82E03F69B2CED7D5DDCD1A218BF2E2
ED2293AE999FE2A4B5213A10083EE0407BCF8007670B8C737EAB30311C868D84
121149ACB4A27F3ED6C0C181C98AAAF51B105F264B5672D7F745131ABAB5BEA4
0C9B43C0DD9116D6DC61F90BE72018F290D26D5E9D341055CAF09C9F45333CDB
D45B7954271767F638EEC499F7B53C2CC5774EA7A7F024C4CABFB93D9CB1856A
0C671A4ECA7C62EA5242648A84E7F3AFB9547A0AFC29593CFCE6D8B873A78157
D337CABD291431C0A2CE1F37E0CD7340567AC206FF98E4B5A6410F70F750451C
550EFB54AA259A1B236CA9CB730D2CEF125EC65D959441F7CC9768F777B44844
CC9842A307C72B740680ACBBF6AA35FA7A94825069BF7696ED81A371A9E5475A
9D997F2DFAD339AADF797F7E03E654234455AC3D17702A420EE0A597BA31BDE4
FEB8DBA7C61D311CC90441A620164DC22DC2D373973EF84CC553453AB1B3337F
7B39983B8DFFB3A9425F119B45C1CD37A76F905777B3154CA6200792F1759D06
E017890F4041A385F2238E3C48B6C8EE6F5258463FDBFF7AC762F6C4363926D6
50F004D473B7B7F73CA686B559C2885F1AA761653C727A77D73431E9D110E76A
2E55C68CD50F43997C9B2FC4710F8C8540909829E215678E63BB8363C4B8AF05
9986102BB36580D9CA95CD216B7C321822CB41B2E0422CD077F3B55E0246FDB2
44D5976F67296B5B0BE4B06F6E43535C21164E6C5089C3E9BA2D6B30888C57DE
49DC8D9D46C0D5EDC47ACF2C03B72DE3B69512508539019B759280BABEA12BC9
385308A0395C4CD33182A10A5A229743379C2075D82D8BFCE4A66E1AA087A091
8F5372684FA5037D1B92D50CD9CB4F50AD4F8EE7D51F1C9E63C721CB5B9BD011
6F0A8DD4FDCD2B008F223A1036D90F0F3B252487DE7898F9AFBB3A9D9CD49E0C
EF4ADAD5155A98D2125ED5A3D3907F67301649519419F33CD942E8DDEAC1BDA0
E90C431B198F646766A8FA9F8D1561B57E126EF604838C0C1966655CF31FB7EB
C8CCC434FC1C96046D38203E1791EC824A3D7AED85C029288D4608CA7668A2BE
484C99639F121845B22EEFCE0A3B808261921AA042AE19E641769E91277BEC29
4594082CCB3058F90FAC4A700A8A827ACA00FCF574ABC8EB7DBCECD97F2B22C0
0AA19E8739B81AF8C6F621D69B8E6F29BAE233FBA655A0AF5BDFD7F5C6B9167C
6BC7AB693D45EF2AD999F5DA3CEFA39BA48A17EE6D9F2C4DAB91AE3F0044DC3F
5D5506CE4675AA928B0092D6F173644F91295216D8BBB14CDDE0AD524A4D545C
1B5E284A3BF0396664081CFB4F186A84A0D24D61E82F4767C1E55A0642720CF3
909FA1AB8EAB78030B59BEA067DEDBD2F1D0340E790AB2777DB18248521934A8
BB38A58B7F633DEA4291B0D5D13E9A882C974697CC6D3B49E030C94EA29B5506
CC29C44D01B4751B453A46A9F6BF3BF135AE87A4CE232AF57B66578310DE41E0
2A6AC422117F1963C4D7CC306BD25A6E724E51921779F22F029733122E23E2F0
CB340008813ABB104380C80A492B3FC6D0BB07CB8D8409E9576891EF6E5C9D08
EB8320DFA31BAFFBD336D0C2BBC3D3B2D30368B9860768FC080D30569C7F7811
0EBEDA2962476113625EEB555490B8CE4C5F99D74ED10F738C61854CFF8B41C6
9402E56BE8856144A1A05D0B05F4CB7EF728B2F4F5A439F18C3B68CEFA41E59A
D8308ADC92EC1289DC84CF48D2CDEFF509A145BF945E1E00D552D329EBD2A7C4
21D58082CC8FA790E981F4AC8EAB99950678FD3A7DA3DF13778681B208DD71A0
7C3CBD0664B37C9EDC6B601D79A2C51FB54DAEE849F93209793849104E722D3F
52DFAF7047EEEDDFE744787A5801E4AC2C3D58EC5DDC15FCEE03990C53B0C57A
FC54F125A04C8E4A0ADAA725808C587E7DAFB9F784FA2875689979D316DC22BD
AA36B306A1ABCF907B63C6476737B746099973CAEA8C1E2C5C41F27E0F7DE8D7
F0D942E34E92F43FE902653D4D2EBB6F3B9F7928B1550A82AF234D45D028F429
067652BD3D391BF423AE72B9CB1E8D91E898161BE3A7849D456A861A2046711E
E934DC59442AE7D81661CE8EF727D8D7DDC0270E937E40F896AEAE6171661431
C1025C53172F9D366834BA0054FBFD84503FBAE328B6FDEA180F8EA35B1DA937
5CC3B8F00C206908C2FFFFA6A7AC6915D15EA44BDCF29E2BFCFD4A849535F19B
0D307C696BE8205C7D84B9C77F02EF27D911056EDBB4080E4D3ED72788666CAD
CD91B0ECE27A177DB23320A7FA9C31408B4D02D2A4B1CC6DDE1A6CAC3D8EC1EC
2226EC98E51046D1EC26FA20EE62D24747D83CF4941DCE5CCEEC0DBE387149CD
E05B19FFCAFC0D117F9A3E60DCD4C815228D98EF95EB559AD0ACC0D50FFDF714
56C3C812EA5ADBB013BBD956A7C4CC0ED7D3E25D5C9AF5E626F18297F75D4957
F5B0B33379114B903FE98BCF35C3FF76FEE1D9AEB711F2962276531F7380EE3F
E368720E0292A170A15C5539B1FC7BB954EE2624B504CB8C805B8D31AC38307F
0513606F09211AE64DAC447693B2A0AD15E9A64C34F5A911ECD0ABCA90E9791D
67C6BD202B0858EF96E7722305B8AC02B01AB1706CC6AE875A8DDD15EE349046
EAA65005E7866B506EDFB7A5A2AFD5C9E9DCC821A79EE9C1EA2C7BBA32A40BC7
CEC26DB1AC473C8C3960ACEC581B37D6569E8C8C42950BAB7930B65E1570E3F8
9A7FA719F1DCFDA45A3BF2AAB32C9A93BA3552608A61C623DE59BCB346E87EF5
9CF025A87803161221C5C1C6F6B3403712C76E9D755C7BD68D7F2DC03C14CDF0
C1BBED1D648B905B4B17037B7263C1EA7A7F06FAAC4E09E08483A8D714C19861
327CD9C32DDF850302DD6DDE24912D00C22ECDF3CDFB18FA831A41A7488EC203
F564CFE30D506F0829A96D35A7E09C3DCD107D589B627A15B55C5D6649126BEC
60B88C55ECCBB4E680265D9EAB4CE22965D3B1AF759B01ACB0D0E6C92B6B4EFD
A81E6A648708979487FC591CF09631310D46891423F4EC159A73E30D8DD147A4
B0EACF6D45D18CD16CEB8176F03ABCB41F2234747B9733C8FAF34AE5D43D3BA5
0CE0FACFC9B087F84FB6C68678BC6E76022B1526D6E5B3A48EC1A110BD75F45F
1C4DC6D39F254976453F57DF873B7D635C80C42026DE020E5BAFE0DA0D54D1E1
DC634D2621BA184347E5252F645A6A1DB7657C48124186F0E4C644077457C24D
55753C651A9A7B6349867641464B515B821349C795A645420508673B93750D0C
7A3B33EB1F09782033742AE8F3A23FC02284E6C03818FADD1731361542E3FA3E
75B8D52B668C3E18A4AE967D0FC3157083D952AFB8144D549E69EAAC51C279C5
E5D88A0D9D53013DFFB4352A1598FF84DCDE6FA32FC377306B9B92C0F96EE149
8CD55E7B2445B86CCA7A547FA732D52D59025129FD8C6333AC0DF4F0CFF6287E
F2036D5DBBB3B91B92F12FEBE0B61A313A4DB5A9CF0BB3DDB781A56FEBFFACCB
8CB9D1D3DBDBC4CB6AAE6769E470582403CB920630221B68BCB625CD4605FA8F
D3D5B7A1A28D15E44B38E92E906C138E72C15B86F64C38E23BF0440052A8C914
54397F49DBED99D0AF7CEA3B0A05FF37C2D7EAE1412567E6776333237C31E3C0
49949EC8BFD6E0F6446CE2D4DCD2C1524A288818CC5D159BF8463A847AE4A2B9
CC8C58F822804B81B13BF4F2DEB6229C4F51F093075581791D02C36A13B855A0
34900AA7CD4F1A797652656FE3A8425A38F421C4CC0ACA1CDD44FA6B31219276
1CDE1CD63D6A58CE705CB56CCA1260F9B86E989019071563A9B4C274A87558CA
6EF1660D574EDA276801F0057740E2C3B80D253D697736484D892CE1AB128B8A
DECD69712F5E70E895FBAA927E8194D792A04AB6CE205E04E38A433BBB793FB4
E8BBC4279D58A223C6673D909D6AFECD246E66A52F4CB35E5931D24C828489BD
4ECAF621A220D8ECF702BEB01C4FC7510197D3F6D15321EC87175ADBA6434ECD
2B5A306E91375CAD22CD94301763E4A8B981472890422C5488FCD523C9CB17DC
ED22FBF12D5F7525D0D6BCFE8CE85B0DFB1D6F989C267FFBA0A996D309E4A934
3DB54A9D29C88B9D55D7300DA3D46419256C5A07A2A529A8DE8BD1727281F5FE
97033D861E0531B14E811378EC1AF1CC7EE9BA2B07D935843D3053F673979F8C
FAFD59D555B56CE338F606747238B22BD62C42BB7238FEA335678D474A643570
A9E7B4970E8C541CE9DBC7BF70ED7BA33639D6744A18379455029E934C95E2EF
639C4848CE9A0879B51649FAB023A71782444B451F92A34CB8A124270CCF86D4
D18EEF5C1D2B2A29012613851C49F50702D63BACF95EE2AB4D72B375E0A62615
E0991E130A67ECBA9E05329B740708F1CB148724C3A6E5E3AEC1F88EBCA398D2
1CA8827C977D72734310233176D1AE26C55CF2CEACA62223315C28FCF6305C7E
A22414D4739A059F552F1F9372CCCA5FED4F9AC987942848EB498900269511F3
F408CBEA0659B954F5F1B18AE4FB270213646F9B28AE4439D2BA2D3E0AAAA780
5E530E4EFC8A060EB979E12191044509DA0C14397AFF949E12DC970658D5EAF5
4EA963F5BC1407A32F3837CA6A24B7F3D60EB8E6222B702E25ED903F9D21AE50
664A095009BDEAF4B78DAF94E5A55D48366CABF07791A1684B2F54EA69070844
4F031AF8DF416C2D3679F8BA038B0DC9DD0400CA6B34667BCBBC07E62C1668A8
35A8C57C9048A7227E672E89681B54D662079A189A9E96A3CA96D8DD10189B04
1DA49BA2729F1CA585B1BD5C467295285D52E47CA904235A1A3E48EFAE9EB6F6
01374125CE89D53C276858668CF45D2F092DDCAA52418E0BB94C2B8266B4D88A
5D911507BB1DDA3D8F6E7C14A91CA11AE799EC42E993098E18CADA70BD2A1D82
2C39326C6E3F9E84CD9758B9AE43D79BF99E6A0CD713E95B3D9B7DB90D127DE0
DAFEBF850CAAACBD860B5DEF2082F1ADA64B44B193C4A1417BE221FDCA36456C
BE5934C8CE3ED55AE3A11697C2D682B7D0F72D48976451D205783BE25DBD2507
39C14FFB4BB828DFD187104F38A7F11D5F0698C11E8C1D4F107CACE573FDC4B1
C56FDAE47024D6FD16A2FEABB434CA320300FC4B6C1B6CA08F76C60B7C08A665
99F404DBA8A2A1EB18EF6750E4EC186E31561A3F080BA6562967546715859481
7BA782940F5C5D06626D6F6A412CA7C13820EC7C1DF23E15E5829F698CF617BE
D940523E4EE4ADECEC48C24297DBAD528BA1DCE7AC335A1D15D55415B108EFC8
6D45030D27B3EA63B2B4CD771DBE66AE0218ABB1153D4B7482289D1313CEF184
5C960B1E3C3C953912CC6F4521D1E15636C1545EEE457EFB87B88C9E43CC2F38
6BC4BC96969F4FF28ABB06F4454C01CEF1B6DC538F1E832FC1666D977E5A881B
F72F1B4C7DD4BE167A5535F1163A0706F9A0B26400178DF8A128FB5EBE6A7B81
E478AD183EC06622B591337B9F1872AAEA356F4FC67EE767B34CB5A4D90702D9
39FB846947F4096FB3DCF16EC81455164783BA0B5D723060DAFF411B68307E81
7BEA1D9A47A5AA3D648E618C83C60F060029E6EC4D46B045FA7415BAB2AD0AA5
ED9C729C24136F6AF61E6409C0B5CA760B16225641E268A68CFB8260BBEAFC77
6626EBD97195E77CAB425CFB0096D805D9EE699E41680D095AE9FA10122A7882
2F00F495C9EB2102DF0D3E61833BC0A2E468C5CF7AB430FDB7C0BE3DF2C0D230
1580BAA25D65F599378D873165482A1FBB224AEA89C6BCCFBDBA42AE1C5DCF41
06969F585CD3B737D1388D6359F5468D88FCD2279BDB270F6A858FB7D2ABDEFE
5EE8FB79FA437F8F50237B92C307B73B0DCB808D07A9C3255CB9B3B17039CE5A
288103D05D132863FB522A02CEE3839EF9AF7F07D99732F0B8B384745369FB3E
7901166478F4A16076A1504C5E98D17408494E270BBF4470ED12B4332422679F
759F1D93984D7E506D16950DB6C2682FE1379EFFA6F6C95DD71F6E55BE3EF6AF
E0CB25388EEB436E6527806FC75484133F6E561DEB979D5C1FFEFDAF2A6D964E
03BAE0BD593C2992AD84569C81050F7A793C5263E50C2F50B98C4CC703EAE17A
6AEDAACE312DAFAF5278D125B6EFC5587484F61DAFF46B87B7C9B1EEDECA4859
314A9A9E2248467DE1E54D90DD671660B9040B3E0DD982260822177EFD757266
74A16C83A7FB168016A320D3DF3BD7726F1F4EC90EE5DFE810C96B099FD4368D
906AE4699049EFD37E8EF058D4B97BF71106445AADD4FC6E90615A0066823A36
673B8DE32322BBE861AE251226B4385AB28702831270DBD25D666FBB0AD7B96E
A44E891EA1EAF0F87013AFC982E33D67A28E96E0C9CB99B9E4192536830D9901
931A8CAFA41289633B20BA3BD7AA3414B6DA8D57CCF2FBE39920CC06361F075B
CC40335DB9A0071CFF77F6B7BB47F3100DBDC9C4A58C2B81EC99E8E966AF3390
E3FBCC28BA1D79961C8A1584266454DF772FBA99664D74D4A89FC82FFEDFCFE1
4C9E4A04291E803D142E37E7ACA66AB279378F2F192FFB2B5BBAD18B95F03136
2CB594A3D6D3F8576B90A6C4DAD6D6C8EE07AF682F925F01D0B26CBA347C03BE
F3B0585CF4539FDC66915E22117078CC94D621F31DCB3E021998A5D6EE94CA4B
E214D07517283D56973D8E4367392BF6C1150DEBF459D141AE0941C1C8C5CFBE
E735D796E365A1B0F60BB4CF2801EAFE4889EE5F338D3C4885368281B3C95CCE
251C28A90D318A8A0384439B38D63B94757252062EA44E88509FDD2E75FAAB71
7329622828B2785C1A8B26351BC7448C1719C88FE99BCB73F7DEA427FBFCDF4F
00EE079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D54BC1DF3171135278BED55
DA1CF0E696B12935EB59B606AA3C0CC50C7A259AF32F4C81D9B39470D9993CBC
8644403D2833B34AF40511654F96BCE0064860F39849DC62E4A0693F75308FF5
FF450EC05F142D5E300D3850C66D432BA581D5D8DFA97D901589C53181CB5057
7FA8B2C95DF751A861DD1A614B2F32ABD284607F40B3462FB05C79DCBB586B43
B853D7F77AF5ED7AF2A913FB2CE66241C5102CAEC3992BEEF19A4F760E98EAF5
063E373A084CD6829DC18D063618B4AE443CD05A58BB3CF494BC1722483215BF
3E54CEA1F38ED2B6EDB946A8C59DADD2E4AA3D5831D8B5A32244B14890B2029F
4CDAF832DCD27B57AE5890143A24D65B57894B5FC5A76BDB71AA4324F87F4A84
C94A82A0F73BA0CF85D443B7CEB513FCE083D3D5CAC6C229A606FAD9B8CD1DF6
F9D3B75C76F5F25E648EE6D5AE4EEE10ED317BB7A72F6606CF6B601184D3D296
3799BE9F6C7FA8772D11CCC1BC769ADAA4393B4951CC05714F170AC2B41B7227
AB3E8DE463B0DD0FE15A6EE3BC4BD5BBE1136A43B9372388E20CFF0B753618A3
74051DF4097191C6BBC815C3DB97C3BD070A91E0E3FDF6589A34F8599566F61D
53D787242876F04BF1B180B36040D8AF94F0747C51AF4683EA42C2A0A38A5987
ACF479E0B9667825CFE64B843E6673B03A67E7C577911EC5D845FC0352DC31C1
9D88E8D246FC0CAC7850013FB3F1B075D4754A82A584DEA5AA4A5EF425A6A412
DBD0F20CDB4D1DA9E54AAA38EDAE636315CE9D47B1A020296D23FD0A59D6AD28
E29407AFE277481B78B1DAFE794126057DBD2C462F6603AD9EA1A7CE89BCBA74
6C4D9789658488E28072CFE5CF46FEC77739437A52505EB645502B99547E91CE
1B98683763736148F1808FD56B15923CAB0A8F3DCB6E289E8BB4BE24DEFEE5CE
B9A8CCD78C0AA830E7BC4BB6CB59AB6A85994BA52B3E9489116E2428B20DCEDE
84E0F41C24FBC51517277318EB7238692EB5039AC00F21CBE040A2AEFCBEC413
893B6DDFF7D58976F0ED8484E639BC3466899795F71DE1CD9747D88C5FB35069
644487B786A62AA18CC7EB2295EC089EB8A1D3EF0CC84ABD1BED223A031BB54A
C9678DE905438600B1A87AE31E65396D59D2879A2888147ED44F7B99F00B985D
E55EA66770E90C646C5A95C9448A5FAEE701E743853A9B901AADC9BA60732E4F
24C3B0C1E808A67F8C1272B480A6159DAF45EC3502B48A1EA75E5E31C34A63AF
CF27CEA7AF351C940AD269FCA904E443E144AD3333B77F77D89BBCB142B59477
C368E35D2DC97D9875D22373802023DDB657BD92451DFF9EAC4E4938C73545CE
26EC6CB201623987539A8CD229A3A43A98760A54722A1A6E271326A2E7B313EB
B801C76D1E70BF04C98B90C33CCB7EAF645DC8FDB735525710D4D30E0293B4EC
86011CB010EEE0955A376ACFA72C985EB412FD1777B6590A8D1CC447CD24C429
925BE5E43D9E9731AAD07B020D3CCBFC275E774AE9FD460B957D4B1952198B7F
6F1309B1DA0F707386E37BB9EC97AB3161CEF7425920EAE2D74FDC7D7CF2A9E1
7C801985926A3F74BBA9A961D5669A57A44EE669FC53F95B10FBDA7D84DC16D2
4D186FD915D27A00C2EAE28EA566990A10275D0131A230AFE3A4730276B538AB
F47884D2A30F83BB39721699A8DE689F960158933F88571D558C2DD9BEB7EDC3
59E616B07847A9D6F802BC57C2B34E7EAF62414D6C19F29D65C2C163CD681CF9
C7FFC661672919A4E35255077AA0F01855B92BE3520F6ABE54CEAC8ACDBEBF37
3488BA0ECC26A49D3173A0598ECB1CBC2F7041A6C51D0C5736A030841AF80DBE
99569B38C6B7283413A413A9FFE6D93DC42990D9FC0115D85BD7383F4ABA23D6
7A222D70F1AB7F1603DF2CC2BDE47A570DB69F268CE0DAA54C7F37D97D22AF20
C0536D4F5D367B90930972B142CD0B015C9920D4CF563020727833494E098DC4
EE83D9EED4397A4EAEF951953C503A089FCE86F608A41F7B855EB541D0B7D2A4
8E8FC0194CE3B471429D6BF8595E59C58B592DB66095370FBDB6BB104712253E
9065A6EEF8A12E6263CE2C7A75806C41BD8CCC4FB8D386F859C51A3605626B70
FCD6DAA30568C75286BF4D3AE384BE3D9ABA647142B2B8815F321407ED2E3CA6
DDE4BECA5D5ADBA455ED9DA3119948D4B63E570F9BDF61D863246401C56A3FBC
BDD0F8C9E817AC28742DAFF589DEDDC26EB29F2B61113683BD51D67648F0596D
264114060A0D29AC436AF36C3CED6DE3ABE996F758F59141E1D35842C1110B57
F318BEF54ADD812B4EA08BEE7CB44056ACC054B688487B865CCF4403C6D6219B
9B66C3960BCB0E709B7AA09E1426E53799824AD73C5E8BA4181160906A798E9E
C2F70EE15F98A4010CA45DE85F7416979CD2644D810FF4AD60D7D76F9EA312D1
914C5ED565899911805054C2155F1DFA12AE5B99CA327DFAE9B0D2AAB1DF0C70
FE48680C1858977E3A3C708EDDA7C1029FA5433E8C865E0B3FEBDD05E6FBA9DB
F61763E8114A1696D4DD5855EF3302328703A8F0F205355A4C141A9B7CF5ABF3
F9282F8C83DBB5E47AC0EAEDD740C45C386841D57C3B6E8A8B5D88503AB3752F
54C04DBD85A774FE69288183CFA029247AFCDD39E3480A5AA53AC50545F7C5D8
07C2A34DF8EFF46E8A78841C25F3AA5A8A7FABE31C274AC5B3B37234B557FE19
3B992FA237D93BE88EBE84B756C39EB2B0C2646E26A82262149A10C61F8CEA5B
74259D1627A72E127B6988001A0685BD46AAA23F7CB849D99D877FE4F45597EE
0694AF84F3984D59BFCF7FBFC5E3FD500FF03789FFE2A8CA2C0245FECCA9674A
8F46010615A37B9B7E118FBA1BF84AACEF39FF8659918B91C6585FF27CEF0263
84545C7982E35784AA9F00A15F5521FBA619E01DB4C08B47B95DCCF315C9289A
9CFB2F252719C8B1691BB3406829CBC9C8E63EDF06B2B714106720DF8975DB9C
DE1BBEEB9BD85269C15746ADA7D86F711BDB36661D6D1B503379F972CC8B9339
67D98756E57534172351B39DFCE1D1E0782A6D61B5D0BFD2993BA82CFD836E1D
718B5A5B664362ADEA3C601C18CA7DF1DE807FC97C62689A113E8BC46255E4C4
8B23738C8494600AEFF86BDF699470D56423CFAF9C48B8972ACB92AED596C05A
CD9A99E8B36638C276055C7339773CF63EFE4F50183125756B9179A6E9872E9E
BE0E1FEC78D3F42F5767F64F74DC19D39B8C93238541B92D5E50C42F75F6ED88
833D33524D0A9E59FC87DB9BA953B8B94894FF47806F593A53212E257B2DA91A
C9EFECBD6A6C14BFAF5EA166ECC6A1BA7F8F36520BB194B163C5473A2EE9B7FA
DDB4194B845C1E7FE952C244D78B684F191DA279F7869B4CAD550E39392EC457
833781E60A820A938BF377E146624B78640329B8E5E72F2B90CBD030CFB9FF20
9D035B1CD403B0CB89FA51189959249FCF47C1D15176AA30D079984558665E8D
B30CA0DF21A8242023CA26BC8EC1337452432754B31FC3E17399AE89092EF7DD
2DE87080F87456185C961ACF056961A4530D4B3EC16BCB3C2C573DDB387E5ABD
88F163BF2340863B7090ABBBD08A00647AE9207D8021E38E88431F780A0ED3FE
603330CF1E38E5446F4D8FC536F4C5EDDC9E1D080F7C7966BE9B173F7B798841
65F050F5DFCA83D04AA9DFD87895C49208A619405B9E7B9C12D7F93291F7CCFE
A9E4F709D7471DCA47136B5AA8CFEEA0540FB620AC1110290A8667E437EE7831
2269B7090A5CB32CB2E43DDF02D3AE884AE950AE1DB935BE25EF932FE6ADF0FD
8251D5A9958C38DFC6A10E4CDC333DABDF52FDE9BB0FB85D9E6F422DD96FD53B
69AE8B2583DD442DD28C764F2DBDEB2B2C760D345E454056A661C877C4290898
F9A7AC8EC66BB6AF837B7296321AB71BCCB7CCB138177B0DD2DB3B12E7563A60
7ACB649FEF4CDC2014AB21271052DEA19FE97850DB976A836ACD8DB3BAB71774
4328C9BA0E777D8852DCFCFB6E57016BF89F5C775ACCD1946C4A7986F8634F5F
FA2278AF4783FD8B7C97B05996A401B8F9A8FF71A54E583833847803F2875620
B04790905077BB3B4A2EFDAF008E5E325648000767E91D2AA71CB3AC6D8F3DD1
E2F4B6C154552D7E4770511ABCDAF0294FE22AE09DF3F360C6F384CA1CFF762C
DA085A9271DBC61B6658B0BF6E2BC6D1EBB810CEB83C7D8F6EB32E030948BB93
32EF78FC868F02C251CDF73C3C87492FF2A7DE519CA87F5AB2AC54209E543024
78AB0E7A13AAB3BDE11522979474289A6F9C64C209338B4AABCE4D56D9BE7243
7DF992F3ECC51B332C174C8C5A0812730813DBD2CA8342427DF1803E66F7FE75
8B611B7C6ECCFC69D64625698F9B70CBC647849045F8F1022925E6A562DB645D
775EF058FE0809563AED485F220C77E8A4B31A4AA469AD06AA734B305C876750
0E4B6845CFD6B0A0F0175FA45B539FF3F8A780D82C7729B0CF60B21D42F07B87
C1C9C797D298831F73A2F603938A2EEE2141212EA395AB329FD24890090F6F67
FAD26D767CF4150CE668628F28F7386801A8D444C47FB6471DF177B10B41AC2B
0B56F8BD883811EE09597FB799AA0BE8715E5E440F9AB8841D9AE1D952E4864C
773D483412007B481A5E725B34B2370E835AA6655EDD1D4172788FA3F34B5FB0
3F9D29D3D95366D35D4E11A13388B5A7AE383F5A8DFEBFAE94F33563669BD765
0F51DA7166D19A73AE894C43969ED11BC2B1B615A62C0D4988DEF47067148C1E
24CDBA3E7892BFE8A4345A1E960CC91016EC086314805594895CC5B5CEBDFE98
06757E55A5B4061A2FABD92206A5CA36DF5E98B5F493CE9521F9E4E9A22C00D9
B1189D5C48087A0353F6212927E4B7C287DCC9FF699F81E8413B482205EE50FD
DCD73F2E287F45A1077D107D0034CBA728150A0D13802E0A46CA07955F67E082
6110664A1BA53512D4A5BBCF8812AEAE12AF129F93C7C55284B882C841E1F55D
464477FCAE9BFFF55901CD214E5C5CC6DB6066F30419610CE9E42368FAC9601F
0AF42967159926143B5E41EFDA0A1ADB342F6C354FE32BC17FCA169B588CF357
81E504D83DB17E8A85D0BA79F0EAA07283FAEF1F18D5CE40B605F8FA01583F74
3EAB949CACB2497AC3661FBF5D5C2FAAC9CBF3F1FB125D2C89AA05783BF45AFD
33DA1155F7CE34F295D15B024AF4C433010CB5D3585497FFC81E15AB23E56DDB
18E8F551B8962A95B661DC44F8B842C94107DA1B4A6EE1E403231FF09FD273FF
A8105DE24E134076732854F34B4BFC3A249E32C5F615577B6E4D4497CA931ECF
412A40D1CF69A1E9A9B6CB2C6CE976F2792B3789BF669225D15C0031168B1D53
BF87F35ACB7F34B2C9261E9F0900E7B2D6EC2B57B1948AD9068D8B073A98323F
59E615539B7B8F7EC4D0FB999B5667C7CB6F0F705C2096D45B8DB5B5301589FF
CA8D16CB94FE9BF0BB7ECD1FEB1ADBA47D8336015F44CD528083C1E6200135EB
633B2ED40DD79D617A958C3EB037DC4A73CB2E4EBCF7018449CAA2F852B33DFF
28E474ED9670CC843AD9F0B53FE5D5B771DBAD45ED6A4ED459A09FA3139FF3EC
74F9CF7F382FE9877D62B1CD397BD91569A86244C614BA85EC5329DB63A3CF70
B6D85AA101800086A35C125E20111F9A9B696FC86E12D0F4A1D651FA929C67DB
A1C64F93C2FA7D1B7BFC7C33B8AD5F6112A394EEF7F462033A09E7FDF08B3EAC
15B486EFA4C9CAA09A8CC7D677C8245B1F422BE614600A6C6028C2F09DB16B89
DB3524F36C6FA30C8367B4DCD1E6F076EA41F645A5CD574155CC134EA2C7325E
EF672FE0EB0A8B73E7655B06D9BA2F88D410603D3020B69B973F1938A0C15C88
B6DAF6D683DA35E31EFF829EB3E679BFC1A7D4964B5D20C1F1DE99DBDD53346B
AFA11E33B80D9B2E62CC4CFD013A7DF295872D06D77206D92D6029C0A3BFAAF8
F53110E9893462411C7E791033EE7C9C43AF706BCC88224B850E5CA80685C7C2
4E70ACB899BBA6FF3E3A9F330379AE1A4B9DE8E14A2D9570AE8B06FEFBB586F7
6FA162FB3ADEF398E6816A096DB4B1090D241EB2C0FDA0A0245D6AFA9CE12AF3
B5ED2DB65E8800BEE93BFE7D6375C4CEDCF36963D4DA660232338D9BBFDA711E
73F6CF45F38A4BD70B72B52E74B7D049FC0C0D164699399A654404B01F597CB2
420BB38A3EA59D34DB510BA9F226231273146A7500913BB748535B7313E75953
C56A3327CBF6F876CE9917579FFFFC3BF91AF9050B1AB598D5E235A15DEADBA4
61068F7E91D4971DDAD704A98D65CA84B0F6ECA18E0EBD37A15079E2D01D6997
FD75DC0DA00FD02267EAF6888392AFC05A3629C1E6BCC772C731EBC148226614
4C3745D25B979CFD1DC2CB27D4D70D685532A3E471A12572874F5566AC49B062
07183FEE26C2B9BD425570A6FC6AA49CB062B6C880A77D7E1F993848E815FA50
43DEC469F872814D1F2FB63825ABA734B78D737E945071DE5ECD32B5718352E4
CE455E193D1C321FCD14E31EA1BA8184EADA982A60B5B3D9ED9D320E2316DB07
0DE9736F1B969A3FBD8FBF8B995492312544BFE46107B3F0FB8BFDEC8AA68CFE
C8D88C8B9DDF1F1C5106CF14797F1DE4D5860822C30F1EB223177768C26355CA
60FF927A4B334BC1AE83284EC5E1A5A36523FE02D48669D999A477A4F03532CD
A4A3C94934A878801E03C6BAB371A3815E62E13DACD4E67E42050A71E6ACE02D
ED63DFB5DC6DF4432FFF6A9DC950870C1B214D1C81FDCCEE998970F771C390EC
1630268E1A4B5EC57CEAF317F3E4719E2FA3B405954CE30B63DFE64E077CF633
92BDA19C612282E884959FBF2D08A2836BBC8A8FACCBDC8024CD35AB615BF273
3B4B50CD85331333C6BA8598703E65F9904B985E0FC55BAC6DF49C4951217EFF
AD6BB9F67B631CE1232609EFE26FAC8DD9E5B539CA1446EC011ACD111FE8BDB8
A9E3B8002E66E92A72925046D54AA511659B0339FA11845A6A14B13142D1222D
8CB0250A7AD9356C75ED56411C9A37CA56EC790B6C5BCC992AC7B45C73A0642E
908D667198A431881D3BF0B78F411AC3EC7620B6818507FE9096165AEFB90F8A
7AE7F9EDA2DCFFBA5B702597F147D1EF2BEAA20D43583751C587BD7DF3D66691
5FE5CFB1A4315871F5D4DF67D764C5DA857BD7E44447FE0DC0A9C6277C9AC17A
7CF35D14EF71FBBF672D7326DD144515C65B18774C0C8479599ECA11A64E2357
C4A9A8DC9779D4BF845338C90C340E23EB68644460313EF622979FE19257176F
E5C9F1616384FBF087A5DDFC7283F6ED4909FB4D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD1A68A0C3496BCA768F4AF8016D7A65BBA3AAFD7F5FE
E75FE714FFF3D54D09C9747ACA01CEFD260985C6E87477C9C7843343C7E9E3F4
0537D461EF019E046DB8B5BA258462B2FAEA1826B3410BA3333480CFE0DECE61
CE2731FDDF7FCF2AEF7CC2B1EE7095F480B3B27D78FA90FBE923D372C680C87B
7F0E702B8FECBE0CBCB087ADD6D28549FE707FCB616448B0D94CBDC404915943
66539B177D5940370C2035D0FEBB3A3C666ADCEB45F5B15DEA729BF86BBCC309
0294FF267657EEA805DD28DF5DAA8042F7BE24A037CE1B89A245531DC987E60C
A32AC4CA944121A1EC4AEDF9B4CE2928CFBCA1DFDC5141618F02A9C322DE9C14
CC6115FC2AE20A0FB0174DCA6A484868495DD80CE8E9BBDF97BBBA2686827BBE
BC2DA372554425DE3AD92619C3B2337BD48BF04D0244084ABBE2B413A1F93C3F
2E1418F57C5FA6A492E7C91D007B4366FCA7EAD4BE2133004BB7CCB2A3B7074B
4E45E3CE34DA208194BB220D56E316A8666A56A940F2F96938C8964E0D5AA732
AA21490649145D108904666B6F9ED94A97949723F46734B78C9F531F9A6FBAFF
1B1F8312F12E42AE736955DC7E3FEEDA1C7AF96B19B6D61B1AF6FA84B35045B8
0FF1CE70D9B6AABC21EE49EF3FADD8459802462923FB5C51E32D9E7581D407EB
2BFFEE4B1298E7784E7ABDAAFEB1FD2792DCB5998530712170FDE3D0A06F202C
47903BE8EEF3DB82521736D29815BBCE460A16156FF39F696031E1F0691AFF01
3FDF9D0F44C9F7925B304957BB02CFABF7AD74EBF9D028877DF9394439C5E89B
321BC02657EF1514851713B5DB371150B00B0B7ED2A2F3CF104E15F4D40A2B21
872D6CE89EFC5A18B15229E6E3F228F26ED3CD245001434C11F8EB3B24B5EAC0
7A3CAAE149F7C9132E9823AA4743201E0DD19E456098F16D7D2E704EBF1D6089
E6FC334798CDBC5A62A9E9BA1AE9B4F7F2A8BB1888067832BA085CA657CB116B
05EBF852F6D55F43AB92CFDBBFF2CC624E85C5A044A4A5214842B9DA4582860F
CD2237F5FEEDCFAA02453A5F9EACFB289431AE64070ED9753E6DF805AA76D6F6
1A36C6EB38FCFF3381B5A84412914ACB5ACC095D6A20C9BA3CD0C71C36FAAF77
7F2F2905D92879D7D73CBE2532FC58553E576403D93784C36EC1E3AE452D6CF8
1EA391D92C8E7CCB8E4EDFC64B5338CEB0BE0E5F0B43F4C36964AB57D050D9A6
4CF4D7000B72514CD42605B72688A12F32D3230A3239C024882A238E8932793E
AE3D3B50DBEB3EC284B69D8B89E94320DE78ED433810D9252D017800ABC8EED8
FD7BBEB88ABF5B1CD9DB19539F983E25987F2409AA3B2736E3277D214BBD606F
134BB02D4EE34F175373A307444EB79BBCA23FD38D060F283CC4FD7747216672
348BA7225F24EFDAEA25DE7F1908F94927BFD0DA10189EE1ECF150295DC649C4
C90807DB789CD9D10FC52038E228C02CA52562C3896C7636051B86FE8CD08964
5AA819734AC274CC040BE94ED3228770C941CE232444EF9234086FF6C59CB896
3AFA967321FDF58B960EA7199E7F0BB327305A3AEF56808212A7B272613A6C54
1A27D667AE834A9628A01BA26DA5A486A6EC2E3F5C9A5C26FBA7B8336ADB87ED
EE3A46FAB98153C14758BA63AADF59FD2BD17ABB641FFFEC746C982FE1BE2D48
C5023CEBAF6E77DFF34F76B489F8A1755224BC888E1EB2A7E94936031F9307D2
D5EE17DEFD0F1F76C02645195DF77E7D63176A1F70AF7741AACAEDD4607BB4E0
A1A7A2440BE5D094BA040E72F8772EC7D4A2E9B08A06AB3484052C82F6E296E3
EBB14E743C2F314575CA6A92EF4402D7DA26114A0A575DE60E22E5E38305B139
3F88393BD693ACDDE5357710D4D824F105A9A8923234DA620651F36F716B770C
20F3E4750BE896E0637F5270CFF3737E48584E8EC1AA96377BC2220B951029F9
B86C58A96DD02A68D7B5AF74659B19630DA3D4677A3C84A9B36906B7EE0AD26A
FD1AB5FC5B64C69D5B6976AB17C92786D63AF87B54D99EC1AFD4EC9C99C1FDA2
605CF2A61BB6F7A9BD9273EDE43F9446E07534A24820D31E7B8337386951BF4C
A7CFF7B47A22247DADEA3ACDB2B61A70F2CAFE6B5A1DDCB71609AE7F09C3A9E0
0A0AD1B6133DFCB5909CF943AE6F14C49891B5A005B894CEDE1C2B69282B5F82
C9E1329379B0C7890320F7F6DC8AD7EC855732DD7DC86ADD9B3EC4D2A28EBBE0
00B8CFCF2BFF51A1E39AA526E45FCACBE3BB02D5C6CB360BFE932583A7346CAA
F3AFB6D6EC347E9DD6BC6D40B94C591F2524E4177B83A077053604165C5197B3
913E68278222E25870FACA46D4E2761B0B46778CDABFC139153C1B910DA3470B
3F4A803610B129441371BCF4EB1F200B6A94CB1F4B66C3108D00D9DCCA1DDEB5
F2AC994A043FABB6655E8B33DAFCB403F997B7053423350E499620DF5C8CF2C7
4A47137CCFC9CB1D72E8288CBC032963782D810EF9D94C86C9E14E93400242D9
4F4AEB9026E72B4ACAF1EAE355C3FF2A5FB9EF58A7C828280E182ECE7FDDD82F
4E20583E6189DC9E58807457E94A3652FE5194C8E98FAE6F808C8982735FD385
C05038AE5935E97CFB564BEF03C66A53403301932E07B1D297024315B23B2DCD
45995768E713CE40468CDB0033E5997FF3B9ABC3938B3B8F35C0C4BDD9127E2F
1F1F3343E45343A74D4BA48B7B1854F8B62D0024E2FBE7F692C57944DC856B76
F7EDC70F8DECD8B6327AE60E4B6659256ADB9AE67CC8A9B24DBA197011F31001
E4BCAE25F396B8064F1CAF061E812541D2BCF225E28EBDCC4C4D49250CD41AF8
DDF3E21F029B9A1FD9CFDDD47B4E4D99029BFFFC10E9893EE881BAC8F4A799EE
CEDF1BA1AEAD6237C07412A30F433BC86F3588FE41239B0D54352C48BE2657A2
DC83D8E525EA4D29B802974895BEC2CEBC60421C9207294415F53CF6D045C373
0626E024AF981026CA37D64FDE1BAEE34B7A780389FA1EA93B76C61B7C2541B5
1E75F2AD274F4484D01BC403CC6F92EEA2D92D3941E3515E18D3A34E169C6C78
6A8F5198E9DEE3A58285FC58456A617D9A5949F1F912E3E36CCBD54C426D3E52
0704675AB8C04A0ACEFE7AB8A61253D8CC2006465B818AC2A4AD698E2F5457BB
C7CB9C87378B18F2E2B1487926973E2EA1ACB383C05B07936A26DD6CA7CD97DA
08534D7243BBAD1272436C10A88B0C821D126B735C57A1C836D61D4C61ECD6E1
9FE474F4D402B8662E0F615F780FBBBBD90911A4076E9ECD5B146A5A864F0BD5
B3F2FE0BE96CCBAC2A71C6D0E14A141A52631C7A14C142C85851012526B6CA56
B6D7F301EEB486CB5A8E95489C8B4D92C5A713D850D8671B41A01F84DE7E15A6
98543E91A8BD8D9DE99298EC8EADDE8D3BD92B10F89BDDA2F0818A8D5247B9D9
68CFC42D6DAB4F65E03504910F660B998BF3B32A189000EE8A61A8D259B4183F
9D48DD8BECCEC97C1735EEDF5386D1EA8E3FFEB0A322561ACDC9525AE4F6BA07
91848C43DC9560E46B59397323BA120DBCF02BE239B8D395CCFB94FF2FC0E7D7
AB6723FE700DDA61C304F48643DA647A699534B33D9E1CAF4A4748E521B7507A
374C091F7523B67AADE0FE749D7A7BB0494A189E9CA915B90BB5F7B722373CB8
4A115F6E58F69DC115677996282E0314C84D967FC861BC5219C0A37A7D2B7ACE
72E6FB33080D9CCB3D4779224E3913BF7BA2318710CA98DA481825AE0C0032FC
3F71D38C17AF04FB8A5448AD6DE784DB718496CDC8ECD25BBF64B53794309F7C
8F4EF3C1EC505AB9FBD316FE93F8AB3AB7DFCD942D8AAB2C70DDAF438047D918
0461502B9E9284324369334E10524D482D095EFF05C64D63006F402FD2310898
6054289FF2C65EA93DCA9A0E323038F4163367FFEE07CEDC675DBEB9CD149527
4056270C98F30C9DA063EAE17B8B9BFEB5725D709368C604562B33004322768C
3011A9CEDB3753322CA35A6EE8DBB61FC70AE6CA3448E5F41C408B55A71B643E
BF41F5C04C7E1153B7703CCC1D4521C8738DD9CEB1F4E9052A8FBF736F2F2379
E0ED80CA7D9DD9B4251311D0D2C52902656E1B6E5CAC4C5D1EC542FF3700733B
6BF7FF1008B69C1EBC55A5AA4B35EA3C45EC8CF15CDBEDD3CC0ED406F60FA11F
0B475AFE9ADA0D7243535F5128A12E6D2257259201B7B2EFBB89C72806A5FB67
EE3AC0AE26A1DCDA7FF3CB5199A0F97BE0F1480CD1AD3C80F86DBD489E91365A
B928D073AF4E1257EB23BAAE7A857831BA456A6A8B0ECF6585EC929B742D47D9
245A8C52C3290A690601D9FB3D85E655DD3EBE5CD44344973DBEFD90E3DBCE1F
CFEF2F04E1AB7477F596B873F2FD8AC5815F0EF8F09ABAD38FBAD02D6E0615D8
A5C79A3D9472060639DAE40A3B6784099056AB48E3E784AE29708455EABC1593
7D20D75B166B78E823358E5EAD8EFF9330C7079F3D56461BDD36697975B5864B
B1E525054028959C9A9ADE13D7F33A75A9FE790421551882EE25F4E0B4CCF2A6
BF3AEC3CCD937577B77112365539A636E6078A58641710989D76818BE070A3BF
18D430A68CE1BE5FAAEB4F7683CAD719154DFB8C82F5DC60CE39AD8BCC6AF8AA
02BA014E9E45D95AB16320C0C37263962B7701E9CC3CCEEF0ED65A4848311865
3CEB00560F93F6FB711D627A6443908DE018D0CC4AB6F820D22EA83B5F9A7246
091A04FEA5852B8E824BD14A541D6DDA5A841F80476770D58449711EF97C8795
84A016CF89005CBDD8864D26C1853FA0E64D652A2D44756E8E4D90C11A5C02BC
EE4BF6083694A6C34C6594F3CCA8351497B6EBB5CA2BE7235EDCC67DF0B0DD2A
0BB2DE738063FEA9AA67835C86E84928F894BC6A9E27A6C99E3F8725EB5B2854
830860E099941813988487503CAEDAFAB4176F1C3840F5127A074BA4A1AF2588
4FC4115FB7DD6ABEE0CA8F7B9FBD6385758383F885C4704C8805784A520999EF
3DE8BA610CF563628761D237E349D2D3E5A2EB9B23B9655DBAEA7114177A9342
F1B3E9DC531724981DFF29AE5F30C8D638681ADA2C160B16BBA4A3EB6DF96BA1
770A7EA68DAEB817CEA4FF38CBE5D6FEEA0F71125868319C2B303BBFF7A9DE68
CCAE80B0FFF8DB58F9B5CBFAFF7C70280C265EAD71CAEF1CEFC7A127836F8F30
D47165FE34706DC248511B21A4159730BA626C74412F1282683A614D29D5F066
F3B30906001F210FCD98E6B955945A1C4626A16CED6EE968CE99C59C4147EF1A
662A5C05E16ACB67A8F820855B211C24D75AC2899BB2A4E8E1D7137EE71F7D8D
3DAE891C00EF375669B08B19376CE9DD42EE73B0D671C32C8907906B436830A3
A4463E508CE43B859320C8875AFFA80AD2650350480B5934723A3AD1A1C60CA1
97259A932950666106D2EA3D067AFE41FDFD97FE6BF43A4C8454D8D0E7FBFE0C
041259D75D2F63DE8D660B293B60AFD6E4457470288B8C7D8C9005BCF48C3E93
05050027203CB0B9304F2DA445BDAD0BFF75CBCD814C6BE6F533DFB656BF16AB
E3ED8F74FD000C47754152D26C87FBA2C4A9FA6352B94DAB365F443655592C8F
D46AFB023E11DCD89834D3806BC12EF0520EBA726821AD7BA8709BE08ED8C9A0
5A79E58E15913C6A99D111431C64761257AF97591EA63832CDC2E9DC31CED81D
13F88B3B46FE0FDDB8994752DA0AFC0090D574CA1EAB9F743CB4A57974A62F6C
382CF8541FF7E2E2ACB0620811452A1F9A4C7121BCD822A2D06DF2DB124F480F
5973EB7C8A6288DCC2D40860FBBBFCD0D558D72892D55A0A31912F18676826F4
2960A4387CD73E09DF597409BEEEEB37A47E13A9A829DA64A29926B44AF42EF9
B57FAD467A129172C6417C3ED898835D17E93D54E27C822B371D37F9E343D384
2648ACF9FE347CC436641A68A0EF3B9E26885FBD253811EA9A2B99C32AC27E34
E67AA1625FB3E4DC6A8236D9330E504780399E58A87A45632A0BECDEAABC6B02
CEB92478B7D7ABF95338D5E7A5F45F8BDFCCCABAA1BC19DCB17112CB9531EBE9
09179EF8AF42C59BD24D56887B7C360C841139BF37AF8EA4672E07507729F5F8
4DCB3492808955657EDCF790C5E679E8A13A7855980F2EAADD0AC4CC18B7CCE2
AF14652B5969C69B1B82DFAA1172A04E445A28BBC83A417E09DA81AEE61FFDDD
3C1362A5809DF6B0E0A0F850AD4586DCAF0886252972504838490D093A1BD98D
5A6E870AB27BB0C31C60AEB412B37106396C216B506EB753FC1FD0F9BF3D3A9A
6CF29BC5D7385E0E71CE292E95A155D8E1036F71AC494238531BBE7B8FFCDF86
FA9B5FC613A62B7CAF5B68BC752806D53646B905C799E4A772B42E29CD8DE2E5
2111755551A96951A4A9BE0C1EDBF39FA475F94A9C1BE4A97E0F637C053EDE7C
05E210942DB2E655B4628C06B6C3EE9A5B3CEDC1FCE85E673F174F82332C2164
D332CB0395A5DFBA5871F9FE53D943F1A6E8B9459474B70B5961CCD31ADA0EB1
452B0BDF4EF8F25827C65646C18BD509815205AFC82308AC7F5B08A2FF5B4F22
CC46F0A72C94DB300DA38A4DA52AF9D45118E8EBFE107756E2D36DDDFC98E5EB
49800C42BD32BCB9CCB49FB1BFBE47DD1B3D18A195A3D3A4782817CA87FCAB42
E2070D3C75FD51F1630EDBFA80DFC5156CA56D81A6D483781A622371305794BC
D009F384F5BDA80E618774EB602CFD68252D939B8073B341F5AB4DB84A55B887
A0F3710CFA1A7F33EF5F8EFCEFD6952B17DDE0CFEC3FE89BA18DD7BE404BCC3B
0337DF28DC7966F8439B946B78C116ED925C55E4B0DF0EE70707C7C2AC2AC69B
305644649873F3F41EDAF253EA754E942AFA18D5744E1629F78A2808D0169115
CACACACCC84864E724D8B839E14586698956D49F8B2A4BE48A9A10C5289ACAFA
AA03B2E985F52E6ABC188B2A62FEABAABAF2C2FD6C37589090FD1EF314A36B14
D1E926E0F349EDA92FFC6F1BE4958ED3F2D1F6B44E626E30ABD086CF9C090317
8A4FAC43D8F8AE6D23E1E663CCB403E4BA5D57E35A4767EE7E50B188813C2888
67482086DBA95E3A855C8543D8ED2AC8B948A1A56797C0B01901714799B59BD9
AB44E62F97C13320BF955BBFDE88EC1AF593B6E9B4342F963F785ACB5597187C
F300487B451A9247789F997D7CF3E187A3F247C25767C01AFE4EDC07F399D8A9
7E123C69BF9D7A4E84049B0909697DE5F973B47B8D5A5E42B34ED5B7CA730DE3
1139CDA281F4FA26B2CEBA74DD552266C2763B4FD6D357C009A3451828B0A927
5B9696F6D78B02293939037842CB953355F65FBE9026E14A8F015E64EE339F73
C0FC45F78FF428D8272E2E43FDECEE6CA5904AC81999E25611DCBD064445BAFD
693ECD9095FB8187AF576B4B9BC7B808FC7D951E5C02554E51E3D74C12DD0A1C
12DD92A624952FDCBD8FB3B103900F03F198F6141E573CB1E0605CF778D8C351
DCC3E2B77FEEB7B1595C8DAC7EC1DCC291C52979DEBAE8F09F82702C02B010FA
D559A30C58E85A3B85A9D6F8CD950610F0A8284B17B5B519213DF8B1B0822D6D
5F9C93A973C1738979B0B0AAA0F54628B7EA3050B5853D8DE2A2AD9028FD0C0B
637D5A85106F64D723A198B7368A999508D412D07800BF01573E25967732C820
B0BEF88E1F36734F32150C7FCFEDB2EB50CE65D61A1CAF82F3D82DE9E1398BB1
07706C1B9ABDA7CF6C460676487D0A21063DDB9A8CB2E6F846F1CC5F1853E339
0DD045BCCED43643D27E39751DD69D045594A58A1DD16713F452F8A6EA105AED
D8EE9D4165E07A503E992B8093D17F70612EDE9B6C04C8FCF73B1C2EB374D850
BA25BFDDEFE36FAF033462AF3996B96A532FAFC8479EA0C2B58DA5D64BD77405
194A8D4C5F5481EACAB851AFB67D7B063195D6EBF4AB4A6A42C15418BB277B3B
48CFD545D1E14D4AAA6920F3E30FB12709A279E8E3D4698F2C188EFCEAD2DCCD
06E7CF23AB2252B2992B437452799F34595FD6FF948EADEBE8EE7C6E76C16CA4
D019FCDDCA90A8E5BEE74A4F2564A2C0362D91430982CFB3B1CFCA8E761506B9
9753E2050700A1C6873827A10C359A1CD683C7A00E4A0CE613747589A33F593F
75A8DFE69DB90B103E9D78D6B7508E13D0BAFC7C5F31C82D9FD3E3DE139D0240
B76B10301CE30466B16E35357AF084E8D93B35AD4DC4065E4EDC5D78CADAB889
A909261539E964F33C302A9114E30F0FDB6D345A501F0A45287BA786324888FD
B605796F7B5124839668115C4682E7A9A33426987555459EB4B24E71620B52E9
4AF7355463817528856F427ED4B1A9F4DEE0908899E653C04A9D3826E76F1F9D
090523270D8E6E7AF76BF0E90D87D55ABC52FAB9064D9522AA75C8F3751F08FB
34B357135D88CEB7DD469AED34975EF099E2D5173413B33C4A0CED80E53D1493
0EF3949FD70E264B89F53D5718F8D61466FF37613AAF28AF93377AC67C0BCC4F
159196EC7B43D3E10BC39659D8C5CEE389FB43C0F9CFCB5C113C798A224AD1AC
69A4083B259BDB6C6A659C579EF6806CA7A76CF6D3BCC73FA8D815CBFCE655A6
EFEFF42CA7359178C55A0C3CBAD0BC77FAF8660DAB57AA4E382B4275320C9ACA
144964002A622B7E552F3F2BC2C7C0E490266F1C3971732EEB10CEACB54CD849
AD4C64DDC84B930895A70823291B9B5C6BFB7F2A4FA1D6000DF81E112F037355
71CEBA7953DAE9D61AD12CF6BCA89B8022642FDC7F6B471CE0CD29050D6161DA
804008BF4BE26AB8E2184B8E16E2724331A6B70AD23F0E44D94E4F170CBF24FE
E0C5BCB00966F4C57BA11EFAD3FD382BB72B4B0023FD2F63DB6EB998D1DC37E5
13291AC34E897FA58AA5F4DF4A9CC76BDEA3F50CB7F5AD129CA6EE12AEDF055E
6AF3A1ADB92C4B228E041A8BC089735AFCC5E79DB5C88E308561BF9E5AA601A4
89D350ACC38BF903B8168254428AD101B31919A9B7864A19B6C024F871D3FA7D
1BE052CA36B29C78FE8F52BB9D9B912F110D6ECB78A3D7B72667A8C104D684F7
75C18B3125CB8CF3EC290A951F89082ACBD8FE7EF549EDD7A8EC1517B5BC7D9D
D1A156DF715E2EC4D108A06B9A8132FF5D14A1DA6C3D47CF17CFA08B7B249475
D63476CDB2ABF15E295E5B86BE262449A56991505292F86B1E1A0FBAC7663558
12349AC71CE3FFEEAA213B26373D627F55917DEE0051ABD531DA1FE35F603E80
D761136FBC2999FD1D7BBD1B6DB040A04CDB22944F4A46FBAEB893C8FCC2E562
50649D30FF607226CB7B9DF843AA26E2B9A93C9C0F796F2FF59CDDC76DAF60CF
F4F8C4D07BCAB072F1DF7F70F06A5724F70CB31FF739C0639E0C52CF11569A9E
41FF045B20D978798926C40851709A0ADF2CC12D8F8D98EABAEFCC59FD1AD07E
DFA86D2631F361DDEC1020214029FFD42DD1283DD65C945C5B6F77499618C367
BEB11884DB6BEFEDBEB4630242208048A0761ABA27F666B62EAD1C94290859FC
733D50FFE224EF2D152452C3C152C342851C30F0C693B41CD98D8ED88DD1939C
0D3AF5A3E76F9B27FAA2068A9D8FA5C5C34B8F17020EFA829EE3340B8968179C
6BF996EAC9A0B142FBFCD4C9FE90E85AFE4900982CC48272814348077B348A87
57B75C89C62270BB8D133CAF9967F8106EC8E796A729AEEA5B79388D105AA514
6B0E0EB4DB7B11BF4051C3F0AC1713CEA6A30D30568D94BD945FCBC9D32FD482
C74AFA88A6BF6E07CB66A75ABC1A7491DEE5FF0BC368F45F27D725DF25E8A24C
54C6C60B579366E714D5C6D26D1D3AF39C12A588A634569F89D62049EE1EF807
AE3E37A570C6121792DC770085A75BD85B51AAF68CBEF1012E30EBB107EC0C0E
0858006C45F9F2CA7BD967380A18D9AD69330FF5F96B5D74FBB6F52D819D4502
61E1413BDDD846759F9848C054614B59B668A527B4C8D56C5EB051C970AA9825
F7F30C1C0603F8FD7E4C62D7FD042788A9A9DB1FFAFDA2329CB9982F79940938
1A89BA6213C676E27C5EC011A7308B9C05CB954CF773729399DAB306D407213B
0B32CA94DC1420A6A601D754F0AE112E7349AE30DBEB833DC701A096F1A7ACDD
AE7309F2F93E936B380CF70FD4A0162BD64E686C44118D80877B56725A45128E
E8EDB1F6A87C43662CDE9699946CC28C8A3C6FFD7A866ABF0FC0C4132932A954
7DD6C486286285756FE999857F350D5BC4EA838B773513935FF4519ACBA6196B
E24D4DC01283D89FACAE4593C1E3407CB187CEEC0FFABBC5E63D53670F1CC389
0EC112FE503E7A74FD44341F3126CF38CBDC1606319070D262D1D71877B8ECDC
AF4EA33A0A6630E18BFEBE73B8EB86A963D0D6BBDAF8BA1B90E608B6FA4A34D7
A0DECE8C4C144C630B4858C705A3BE1297816C96EBAB89174241C884905D5CAF
72EAAD650556255191B97E35799FCD8F0BC5505310CE637B1312F80796EA6D8C
1A57BA4103D89A4B893C9C8A7A876894671E2AD0EA7FCEC5B425A5DD93B647B6
833F71BD1AA946F53E253B978C68A309459E583BCB9AF42F66898DF745340E24
C37DFDC2126371661E790A1BA9675765AF529B22588F1BC913446B0729A103DA
10DA30BEBA394F3F2C7A80F72B494C159E9B4BBB1E20B26BC11AF398B16A51D4
8993EC7408909905E66DBF9E12EBDE9511789B31BCE876DBAB023C9AE3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI5
%!PS-AdobeFont-1.0: CMMI5 003.002
%%Title: CMMI5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI5 known{/CMMI5 findfont dup/UniqueID known{dup
/UniqueID get 5087380 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI5 def
/FontBBox {37 -250 1349 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI5.) readonly def
/FullName (CMMI5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 84 /T put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB9CDB3B91E19AA95
B6070999687CD39CE05B0501BC0F19F4FCE5E19BCAB1989C541A47F00C4947E1
FD7D566D95445A20A22834570ECFD7F17970BBB274C172956BD6458D36A306AA
51AA40FA84AB99AB3D1C47256A2DC605467A7F2C77963B2D31C2CD1971FF9627
23D5B9CE163D84AD3071314F555A564CC82CFB80B05E31708542DAC587837E6A
8708B83AA4527ED523623419123FB743F544A691FF62C172E6FC42F1EA9D96F2
023DE87858FDA38BF3FD9E2AAC5F05FEBD28A5DE1E97FB1B03F6D7BCF64ACBD5
20083E062A50A1B86CD28E5DA789361A19511275636562527DA0CB8A62C0CF8D
8A46EA3505E7C597428C86B3B05FFFCDA0492897AC6C6F689ECDF468F49463DC
F193DE83E34D73E48D23ED37CC1BAC6D1CF6BFF1C6A0165B21B844326B418575
18E1D044C1864B27AF65AB4A031C767FB91D2CFAA1729386A7C1621D859572FC
B604B35455D870D5A757DB7BF44D9D079F4F70FC669A96A0A1080F3297B6353C
6161E0E815C054EB6709752A8C104D177FDB4962B988270E9538E944E2FF6717
6389DBFE95B71E95EC57335EEF4F3E8E7B041690F54039D546937028BD0E8740
A9F8719E08AD387878420EBF7D8D1807B6A594E98E27BE8C6314BACE9CEC94C7
D57CB34AA7DFD06477D62C981D9D686255817A22E3F49DDD47B28FE7CEBCDA0B
30515EE8EC56542A3E3E68B990E5BE8FD65B953A0EEE2B066FEA586C75E4978F
0A0357C0C37397AA22B9EC8D9081B44C71CDE7991903DD5E071B87D081A57064
A143042086EEBF8640F36E61D8A0052C726C25F1B3CCCC6A58868E00C30D5CD2
034835FBF999CCCCE1CA0ADCE3A4EE4A36475FF6D00E1D7A8ED65CB0213FCC76
AB7DA81B9A97FEF3A51754A48C76E80198A2475DB6047623FCBF2CDC827229A5
C1DD7E79197C29CFF591EAE9547A1B21D381FA04D80E87F41C9A00A71B5424CC
D7550DFE38CC7BF2B11B810FF09DDC48046BEAF8EDE7CBF8847DA0BD5FAC93DE
09EA6AE97B193E9A31F1174C337C72F4CE28CD59ACDE969712C57701EF3C48E1
38C650DA766470DBA252DD9FA657F7738D31A864E26A89C0618EB611B36B321D
C48CD0F10C4157E210657C6CEA4BE0DA047F414C16F18B8A49E4E783164A83F5
E59040752152EC549ABC2F840ED955F90188E8F91E4F4533CB5F42478029B90D
76A996EB3D99BDF9E1B3019AFC030536449C04275DD78343702CC302461DDAE0
9CE2AAB36414A34066ED793CA7313767AA897AFFF6676E1AD5D4E3CB3C3A66B8
C5E91C170C41B7233D544D8EC3FB6E7E6EBF4E1CFBE49E3F00732256EB2495AA
9D206A20E902CFC57ECA3CD1DF324C834C75DE927C473650E4FFB299509557C5
9313ED07F343B6B4FD9F3DBDA9B3242756575AF54DEAA7C6DB9F1B9E1128989B
312A505411EE636BEBE0823610CFCC7D347185E09CC8A1A78CAF7F20C9668C91
0DAC60D889D17BFF3B7AD694F587ADCBD4E48F36DFA34FE98CB2E8A17929A683
0B66E005FAC311AAFA9814DC9CB2DE3059E0966106CFDDB18035EB255906F843
C8473B5E66E8FB4582FB72BDA4F4EE7A8F3A178F02EF1264C0692D7CBA2B1906
DC27331F86B6D88D3233FD74CA88D7041B4A2025A7024F467B64222ACAA24DBE
112C83886821994044EE5800F1F81F7F58ACEB07D15E22D38EBEA6F5C4F7896C
BA2EC301F8FD150832966A0C46EB35ED3EFD0192351AFD1FB9C394454BB1FB79
2BB86FFF5B846F412C1D28C560C00B1FE876684EC864EA6F88E7B095CBAB2B26
29EB6928961BC58633B7D5A5746996C3DAA6FCBBD2D42D59C1273B786511AF00
B60B0E04C7365E4AAC4AC20288ABDBF0A704B6F7CA2D9FC65CE4AF36A5CC463F
F97844B79F772F1E0C6F4A6DCD7AAEEF16A4ED9CAB55E692586C5C9DE8701A3B
111D15F99AD44A3F375E7C4A531020E9AD5CD77212BAF0F9516B7E865F5F5042
50524EE6502209FA562C94AEA4555F868C9FF68368EC6C2E52253E0C882132CD
DDBB83AF15DF29B2DCF516A004DB97AA9487EC2CB1B772E8C84DB1B82841CE64
D4D10FDAB7E162E079FCBB9D4670AB4D2F9128E48183A3884EB8C74DEF7F0E70
A587A300CE834A739244A237936A78D31617E4F8D298EEF7A783BC573BF464E2
9FD1F0592DBA4400AC25327DEC2F28F8EE0CBD17F012E9E15FFA98CF1F1F9265
C2E4B8F3ACEC102196B4F9F973D747979E38DA36558D6CEFF3538CA7E1427352
CFCFA0DDE3C02A42FA39CEA5DEEEC5F3F7FE7C1B1AD98D51446772195F08FBBC
D8CF46DFAF7D78A43B70F9B660406BC43FBD32374C022C3A58CB24CC43ADBD80
4E7AD6C418FE43DE31176B9128496C331085DBF6FA883042168C0FAFAA9DC403
7ABBACC2B18922C4458B49FCF241C0399E969937A2779184DEC8AD5AC3266E40
3E81D9B9AC5A06F9DE81785668B2CCB9BAA20F89120C9EB9A5F4CDADE6F67C61
C5E89C6014F4772FC208723146587687F8E14F4E63F2FC952D2F9143275F168D
B51AE0A66333D957C9D5D7253A2362C30A0219219BCBC770D9FCBAF0F7F45FBF
E85CAFD899BBC1EDDC416ACD9A7F83711BDEE28A683900E672453F4527F44816
1F284A4C488DE221333EC9249D1C70C3FA41F37924B813A3C54BE3206349D955
8FBC6AA9115F9061C9674958D40EA2426CBCA704E0AB35190F473C72086A2B2E
DCD7E6C1CA9BD9D7C0C2879E414EA6C61923A60FDDB53957680DD30951CD3B0A
6B743B1E7952601F61D4413C3A7BDA4CC1C65DA9D453704A1333512560B2EF09
C2D6D34B5AD4AFECB4A07A7DE5122ECEAF0CACFCF48E78F440071570E3F171D9
96E2C6169DDC77A3B9A61D5188428B035F8128BA909C26B448B6C95FEB52707F
AE0687C3987F75F1BF90A7F61D0C492C49457B59271BCE48F3FEE78E12D3271A
F5A91389DF2ED566990BEA84AB699B3651B2E81975620CEB607E2882F7D29ED3
A4279439107AF9AEBEE47CE85DE5CE9595A96A118ACF1EB1E935E2251E0E7F1E
D675E5D89D501C9CC98EB274B6B00B718D3EC50EFA7E170F2DEA2A2D2C8B5760
E85A1AD504660A93140BBAC19A48B456B3FA48E05776CE9DC05426520692922C
4AE3FBFBBBA2C4EA2B92663E8D316B9D5E733E0F2FA092F24AFC98B5D69063E9
8AC28D6EF97D3674C04176197050E49709D7558F7A32843A2278160DFAF9CEA3
9A0A8907B19379083365EF866E2272A9ED2B662614C57F81DDB145E9D460A572
C573296761CF028B0CC562B5C73B1933F0F78935DB0771D1780C698A874290CF
4F3D2D0C000B9A4077156A0B15F6FA23CF70586D3E341796ED8BD13BE5CE69DA
D169579BE16C6BB5D74224F380490855229FA64A762AC6BBD0D06ECC13E57E56
FCE574D51744431CBC8A369698B3F9BE35B7C1BFC59FCF08C04E3554703230F1
2ED2DC4459A256FCA63A759407CFC0B4D8950852BD11D9D631DD0B1EA09178EC
B5C85FE885F3E048355859AE345B73EA0C9FF89DDC31A7839C86CE36FB7C9C65
33257339FE7DE8F9826AAD599B41B8AF40F47BEA4399B65B7E114FAF14B9347E
4627B501AE9905A4EF4483551D8D5B5F291CCC25506E38A5DA92E127FECFAFBB
F6BE02A63DC1B5090A11CE8700402A53B9DB788ABD4910DCB8F1D0C9FAD68668
0045C5EF2F0F5205F4A4CC2DCF43479DF053E2DCBAD3AD3EE779129E7CF4DE95
34D03F05FBC72CC02C5E1BF394AC39530D93C70739799B7E2FC84D99EF7E636B
900185158DA3427B30E7EBA29CE9657D3103060934EB58A514F6CC06CA0EF378
2447416AD37A066B63F2BBD53B06BAC2C915AD28CAD86AB1725BDCBC12D0368B
0F0DB1885ADA0B4214F59DFD86F15210763091E3E5E7925A39F7C58DEA801563
198D8146DCEEB18EDE7EFEBC5610208CDF7D42B23E15AA911BDE63C0EBB78D9A
DA13B882064E1861DA9B4688A242559ABB1BA404A516A4C7357D18E4C7AC7D41
878E2D8682B032DCAC20FC72BC0D18F9783E9094F59D3A35A977CAE583B5E517
4E8A8C991E5311533BFD4FD0B9B7DC8F129705509D194DA9F18135E7B87DDADD
D06929F6D65C8AB18895447C4E542CAC2FA8DA064681418E49807CE61DB77720
4D7538917F5D113CFABEB51A0E633DA5ADE4D3A09462D2E4C11125A31C3ABCB8
D2905C09E4E91D11B92F405696A4F1996282F44F34A19748121C0E86C3DB2CF9
30073205E35702C191BCC6005822AFAE9EB440CC7739C51D391807AA5FC768E3
928AE0860D52535397395FC31BAD93D8887146E6BAC26891DF852FC5E277C3CC
45A9784386BE5A1926AF84E7F3BF380A5ADF32D73CA695FF1B78215F2D2349D2
B1C3AEB04DB8B11A611682E7F4FEDF08716A801D84D47FCBB5FD4E9AF027635A
74E8C12F7AC159840DD60728DF43615BBCDF8EF80B1D761D34ACCD561F5AA2B3
15BC21A4856032E4F9005F93F7FB3CA7613C32E67D74796C5C819457378FD94B
89E45341CC2B774F16C035079A741B0D2D54B43FDCF69DBC30DE45BB3695AEB9
CDA1C7EDEDBDEAE0079C5FF03BC855E5F5235CDD99A915CFC78373A4604E8E66
3426FE7AD92B8FA0FB0CFCD773434B5C624CF3DA9F77315F0C58D42CE9180BB5
2D2B7DA554300CD38C592CE35966B1EA45638CF064AAB4CCDB2CF3ACE7A816B8
360F2F5D7EF9A36DFF363B87541744CF36ACA31F9B17872C96B8214740C7C0F0
0E251B4B3306C443487F71ED324B4896231B91F909CF28AEB3409DE1094E6483
E851326B4CE4E56DF03A929913926A8D4C52C7DF7A6F7EA62BD9343AAABE9BA5
403678ADBD2C125B5DAA08EC695F6448373355FF5B91A4FF16596A5D172BB3FF
7CF9AF0B6A744A2451C7399E969E6E5A9784B9195A497B43304111165973EE28
3EDA3949E5D891E1EA363F8A8EF4ACDC82CD14BB931480409A5EBEED54CF8284
55FD70C98822BD9A31523A3C6A6F26B0216C07B6D63D3CFFAD15A1B83BE55D9B
4008654433D80F11754E4B4B09FB22569164A8DE5669629E07ED1ECBFE365287
690C6F21274ED9DE2156D06AEA66A323450B29E4AA42CCC9C9261DD499FD33E4
A974570C690D2C0A1367A7487D57427C01203D2939E89A1F18A4ADE84313A2DA
B12EE671E3B42F44F6B32E12F4F2E51479FA3420A3A13087D9BA76BB1756AFBE
C4654792600D79BF52A32EC8E02587753351AE7F192D08B7EA9314FE4CEA31BD
8646E59F96765073ED1E3788C8DC7C0AA2892CA25E5641B338F5F207D37B2757
C7FE8E52649C38062566E420F8F0A6B83043F758DE906CF91413718028C9675F
5E0F7D09633361EE152116C675BC3A90D807D3A19B848DD34BE3BEF950287C7F
021E231262ED6A134208AE2FCB90B7436614D8BD33226D8D519F8F3F494ACBCE
32527307BA114CF02BC765387DF54BC1E231CE3F51D09F7A9178FE80A62D8371
533508ACF5C454CC72400B444D177A36B9A096489CA2761F1CF1F7C788A9F7BD
334A5C24AE6A648EDC740E36B28D6752EEDB64ACAD640CDD66CB98448C7CE7B9
8EA7CEF9E2A80EB270A22ECE1EAD0FA85EF5E0C83AF23F0B4E4669AB41A6B427
3928CA4421E216A4346FDCAE5D1349809C97D059A2CB6BEBED01CE0BA1754863
100D49634FB84A06CEE283104046A90396245601756BC39A63460C2660F54589
5A690DDE53BFEEEB398355E0FCBCFE9CFC664195CFE5BC9C4905700FB9FECB7C
6E644861E81E0C0581130D253D861801958F04A543EF20C99B52E246139B8D7F
B7C78E1E658701FFDAE6ACD2A7E79FD434B1CE834DC7F98D16048A2964EBCEF4
BDACEA4E6FB6EAB3A270FDA758BE633995D1A39EE148ADF8A169173F877089E9
1A560D068ED72051FE7FE1D6C3BAC81EF265950598475B84AF1486CFC55D5903
3BE1479996B48A6E9ED904C66700DF63029ECD9BF1794BA67A7C0A005B00DF52
8A6A0374F4E65CEBC1CFDDFCE3EE53B57D78203D72A0FD5F9699277126B4A5E0
70B9CF50FB9A46D0685B563CDAA61EE9903F0079B22ECC56F0BDA3F1930FC6E4
637DF29BA68C83DE60EC2AAADF31CB46F337126706EEFFA0E8DDC29E5488C2C3
E89CE98157CF908EB04C55ADC7FE853E152E0D963915F5104834A9F73E0EFFF0
BA20972EDA0F691CBFFF3B0D379B0FC55B77E4891B7B8372F5F79662E610AC3A
7A02E99A18D5E87E519C45CB8CA3AFB38A74AC99214C1A182437C15F57963CA1
60709AE4D7A9527518FC6EB1ACB5220932C53F8C1A0DEA53B1716A105922A90F
10E116FDEBCB7491DA52872EA22B8280595120AF86B49759E5D61FF3B39D310A
68685F464915FD4B9A19F7F797BE424748C94F4636B2AA06C07C4A4CBC634CF3
04E5B400E7E4F0419B112DDFAA0C4758560F83D80A525C09B67B5906D65FAF7F
6E5D42E5D0AA0EAB4C189E34CD1AF532F27AFF45FB1B954B3DCBCF75EE60A9F5
018F023784C394FFB581FBCFF4DAD820EC8C64F08360B26A89657FD7F50AFDEE
FE8179573A3CF350FB4D216AD4BBF496AD7A9191941040560854A5A22F2DD997
0B6DD21DD3EA8EB09C49CBEC6CDCEEB0BBB1B88271093BDE64DDA024D67F098D
6C1998506DDFF7907AF00E4A13A0E7C93046411CF6B38DB4AC2A8A0B67A027E7
96725D60A0A50B983A1541C18EC1999A99D7AEE5688407D62BAD5B13725AD3CD
0243D3EF4FDD9E409795D8022D4063BA844909C67ACF82AA9CED304D5F84A9BD
1EA3C7F5D2A7BF70766158BFA2BF63B3078593F3EEEDD0B6083B6858AB0E3925
8588CCB7BBA9438DBD430AD29F127063AF4B9F05EE48507ED3CA9D232187D3F3
ECF6B44F723CA243C91BFA6CBAC2D055A7DE56C0038114145FAA7D6D35070A07
5B65B916EBDF3A8A76849653DFAE3CAF9561D85CCEC1974DCDECC6592040CC64
5745DFBA8D9BADBD4EE85AE9662F32185133FF9A7E44D66410BDE8B1BB1873F5
DEC1D8341D039537358F7EC07365A462A58013C7072979A427CDC52AFFFCE7E5
4D922702976973206C0EE5806C33706C59C7361AD626D6CE7D73B3F566F01F27
AA275388FCE7FD284B031E6E262C2511B3FB2D6B93E53332C2ECF4BF165C03C3
1E16D2FD363B562B17AF600E4EFFAE42CACA979C6CBD4B624732090878288562
D28DA255FF658D7B2BF12E71C704E590188B62B57234540987FAAA373A4E6266
1D72C99948D78EE0BA5F56079E2B75EF5612495DB6ECBE036E13DCC1B79D14C9
5F085D1CBCF29D52C7CCB0AAE0CBC720E909CF719DE6804AB3A2164CC5D2621F
DED2AD5EDC14F9CCECA26EFB9D9803197435588CB476680F7FAE7B8634DB18F3
061C5289F14D2E2136783C42F2AB2ED12973BC60AFBA29150C76C118E72CB788
E61E561574114577F8D14ABC37C23445297753EB71A3C330F984885006154BA3
E1A07EAA256B8E5F5EB5139762EB0F4A641B648B0D781DB48A55B5D15489BAE4
7835562F4B0158AA1C2FD39A76A40238DAC16668DEC357DA709888966E72E933
1F68EA16A3221BE420EBD5CD48F491BEAEFC0E9A77A1670363452518416CB3FF
BAD590D0A3E461EAD5BEBE6EE7B2A42697CFFEB22C6BF46BBD3EA9155A30AA89
7FD1F319335E45B9E6977E4D6AE67993F7BD617356C8476B612AC5F8103603CE
A940D6978F7FB59FF1123D8C3C49A4D94B1EBA88568B2C121ED8F4CC942F4B9E
936D17BD16A11DFD7D48F47BBFDEEA442457879D75A4E3FDB00E6D5249BFE38B
720814F1D21FEE501D562BEE9974FC70987A57EC73E5A77DA7FEA5BD633181D6
9478F6CAC557592D63E3F8BE1DDE1A6DD71F93F498F4E720FC9819E6C6AE1027
A9CBE8E1233D0D068737D46F3A0960F377E519911E0F641B57B196ECDAE689B2
B2354DF290E57505AAFA2B53A1116A4F6F19AE8FD72E288AB81FFB584B0D200B
314418A2DB851CE0E6F286D27D731EE3F1ED37E5FFB953FD7FCB6C44FA2801D0
BA1C9274120237C00B11C6EB24B4EE308DB88C5CAFAE99473C68C5131AFE5005
DC564EF1BC1533533A8A267D4B46862E3D0FC545A803FD255A017EFF94B36388
48A601EBBB9FC4BC9E77F6728E6AF33A0AD18E2595394E7D52296EA55F9328AF
741CEC3D4F046C099B29D129B8A0591A5EF52227B1D643686EDDBE930A5072ED
48261619632EAAA13E89769E5EB5675E54C76D753112764374F25C29CB2A664B
0F4252378AB8321B9A24C7EB84C42C8FEF8E8131B84C56C2F190EBB1E7E8B291
767FB97C7888F335BD12382041DCEEDA1B60268E08A659BEF8F3C87E9998C8F6
4D28DBC9DBB791782CD4EB1F2C09E93E89FB0BDFA52A80B4C150C48B354F451C
A05AD9228BFC48A0C4A5B89D62CC01EFA119BE231011E6ECD087999F7828D009
660CAF87F49A778A9135450A340917E6FC15B0FC923C1EB11BF63716E048E086
6893517B5BC259A44C9E9772BE1987D2FA9FE0E53205A8BA0C2A6A062832DFDB
8653211887004C5501B4D1E77D1C183EA4A861DE1939BF63CDD1BDA026F2952A
EE8BE8382EF0180EA313B132EDD4D5D057785FE21A1B4E7577ED41CBD1A1AFA6
9583924C37647291E95A3036800568C75289B3F300A380007957F935A4CB3652
E77738226AE938F24D873D5CF8BCCC06166BADF79604E2751FA96C0C00EFCBCF
4506058FE93E5588E96372BD8619
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6ACA180B8A4832B68D11C794B5DE97F8E087E31A187756642E71C9A742
D5779CD52C76A7DA3F652FD48729981B74EB75AC251B2428391BA228211C06AA
FD97FA1F42F4C00B111746407B1A52E19808115A322A50BEBF25775E22D1AEB6
5DC66FB8C242EA622197F6D2FDAB2A081C4F4B157C9E7A87D965656A1468EA16
765FB4F0AB53C47332BFB5DE2D6BBCD90B866DDB6069340E2C30369488ECE485
1263908BD7FD50AAFCB538BCCFB86D30CBFAC437723801E34E3B1E27CA19C15F
F1924C22FE70C2C7C1238256465894A4CBAAC32CDA77680C34EC29992B92BCBE
39F5EBCA841ECC35E2EAD013B5B8173BB2E8CBAD9E8C7ED9C6F2E05F1CBF3876
58FA27B3CC20CBB1FCF0BDE8A17C98973A98DA08D02E70B16197B4872EFD69AF

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 75 /K put
dup 83 /S put
dup 99 /c put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC629A0B38FB765033D3
395911466C69D0A5401057AB25BF1130A85D6A780E5053AF0610A09AFC933311
46D44150C32C90677EF17DE250CA1AC04FFDB5710BD91BDA9D7172C5BD59660E
E05780C842E21BEBE5A1DE7AFB28B0903CCF2321A5F6C9549DDDA66E5491AC38
0AE56AEFBDD1F65AED74A9CE6D5F72BF767BFF1F08BFECD02AEFE875D6D3C6BA
90A84F78419159AEAB0CF13AE9A883C21C2A57647725958DC6F3494E765CE233
BC5F46B12B07E17AB60E46BD1993BB8B32EB88C05156FCAC5CDFC8096F1DC2C7
3071EABE3DFB1A6C0C24B7DD9D348048585EF2C7C1F384F28E7384A4F5C99032
B5E5B244D9742BC57E76C4246757DEFBC32AF58960B756E3B6D7CB04B82346E6
8E4E4DAAA3A15A4A62CE2CC7699188D436AA2A894BB07D78F70B85107B4F8E3C
68D7A06D408E573E6DCE43BE3A843A800EF967EB56A47D3C68209AE63418F46E
ABE0D6391AEDBE0F1037A76C5DA9E650E07B3DC2A69E75AB65464B5E2B9D2860
42925D34A0446CB999FB25844F85DE4C5CB5DA24F76589F10B061E91E53D0B2F
E4DD76C85C7C7165A86A9CB331F4BEC75AE2302E8F26BAFA9C5626B4AAB16381
BA76D22BB37BDFF5217FFC31C60D6605692CFD05001E3818857A4F3B9416812D
EE3A3AAE357898232FA02ABC0E4EC25A51B4BBC034EDE52F5B9DD11B8081DA06
E86EA0E9BAC909CAC051E49CB54A44840291EBA6EFFD2A40452FFBF92D9A6F65
E3D0FD6F533F9EFE771C2E38962F3CC2102C0988E4CF7468D697532A8CF78557
A1FFBD8358F544A532F9080702ED2CCF3CA948B941A8B1B922363D648A2676CE
E7F88540D614EF383668281E005E3F0CA8D489EB2C0EF1E7867B9BB547401E57
80C5F3E473E3AB9BAA50274CED6A1DD966E8BDAB7289CD37D323344C6E9AE240
41350CDA2EE054BCC0AAB8BBFE5C885C08D6F773B405250C2D40C6FD56CDE94D
8C019278995F96E8FF3C7CD15DB5F2ADF220A882D00937F4C7C2603BB0E3450A
92EEF1B7DB40291583F528CEBFA3999A35792A8FBED4CB14D094343F1E8BC253
CEC357CC51806B4E98F85BDA169A8BF3E513B181FD33FA4DBCE19641D18F39F2
97B09A76B57992862C4312492BDAA9E504591317688C32F997F37CBB60A6FAA8
21F0D1B38BF59FCC2214230BEDA2476A7EF2CA1A1169110116369E471A21CAC1
9C99EF28C5E860105869DACEF3C9E1091B2A6A85A7842800F0192EECE797421E
4687DC8E176F316B94F0E702D87F71BDBB3CB3097F052F0FEE5B7C2E6532EC4D
FA06AF9A544C9EEEA7C00F9E47613DB9CFC12922DB100985DB6D908FBEB2C44B
3340DC29F47FC34DD3B938BEB22E9BDF1EC1F77C54EE3EDD517B195F1CD57F17
878F9FB80F1DAFB4E9E1923F3F3B8C7BCA60C752E6C6C4CBB2F0ECD4DEEB154F
AD7018831139F42D458B2AE1A6E47BCA951DF62DE20D585EE693ED64621F91E7
CCC4534C747CF02BD513C623946AA705D19C3CAF85934DD9218935F298761761
490802C430D1B3246F5B795BD324D1B911AAD81252ACE7FAE126A5B4A27661E0
23CDEEC1C4144301B193B29903BD9495ED68AFED1FEBF78C99E329CF7F7409C8
3CE49FD98B8CCE855734BB056519FF432CEAE1AA2FCCDEB7E53BA85B0E2C75A2
0051C36004ED6F8A934191DAB958138EAF4C60F5803C46AF1468A6055E67D73E
12BB9E9D4A09266AED239384A3726A3CD445F9419BA2344A9CCA3E36886498A8
C429AE6985D204E422BAF624FBBB39D4510F28F6CE8ECE3092FC8FD34289FAF5
C06E7A48799D7A16397330FDF037B07BFD93832F64742293411EC754E4BA6CA6
F8EED4D9EDB23BD9D212F689FEC3570507143813A8C1B6CC87B8C09AE56B65B8
825D5D5EF27EC8F08DF1DBB9FDB9C34AB768A83BC87697A4E58BBC1A5EBCC57C
A1993E255DA29BCC18489598C7ADAC8EBD5D92F764AF2795FEB73B4257798625
4F5108D95D2D568D563E2323BDD1C365F447293D766B8B57FE2D3D309D492E0D
287F7C4B4523A9A8AE76C7E08FB0E18A0F6061E7A80997B43868E9A3E85712F8
9367D887744521DC9ECAE6105CABB914EF8C3B661CCCF53F7D92200773CAF68A
A219B2EB43852BCE8408C588A5B2D8B6CACF53FF4849D1298E02F7F98668EFDC
1FED152BA4DB52D9E8500AC062746D03C1D3DF040C33771A08220FACB8CD7475
2A8E45C82483BA31F111CFAD42B10D9B66BA2DA8F65750FEF5B0F985458D0CE2
B2CFB5B70F407FF75A6A523D336C8523AA158C00816BABFED7ED4FCBDA2460CC
B3471DC654174B17C49C8E45636A43752AF78A5D8EED5CAB9EA7B99F9101D481
DA81EA96BC1D4115082AC4EF16CF6625B79B96F0C807688B629EE723F675F6FB
17A2E906D5151D7E8F0BA32421338B4251F570E5EA404D12D35870AA32AAC5C0
F6A9CB6A991C1EB11D40E6878875DD515E5E34E37D7BCCF7E9CB43779B1DA3E6
09A32CC8E9D149152A4D991C320F6043368003490A70F78196E5288101BA267B
CA3684CD5C763ADDCBA66588284D0E4E6B61827589B2C4B8E66BE0717F0CE7E6
5199D0E60993A9EE2021E52A87715F03CF01CE7FEDC1E8313AFDDCECFC61A300
DAD0F3B1E405731FA2EB76560189FB2B38C52F409FF0C82BE9FF6469
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 68 /D put
dup 99 /c put
dup 101 /e put
dup 108 /l put
dup 111 /o put
dup 114 /r put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91DCC8E9FE203AD7E
CD01B3C9B971B931A4024EBEA175B2A9EC56E36CE2FDD0986C76334F8FA22F3F
23BB94D96919ADDF0E935D3EB77B920AAB6FEC1B5D24DBBA47109AF10B6474A1
BDBDEF01866EBC62BDB1B1522D0D3564043CA66C1B684D0C3089F46379CF095A
5AB896315C488D7E2C9544EF48A630A530BEF12A669DF725BD5A74A3B91604E7
798D97536654FB35E56594C548FF192B0A503A8D8AD865C5F19977A3622B41E7
5F072F348214C521772E10CE2C0ACC4FA362986486E242A843F12A78D7BC080F
F827CBF2550824B0AD6C35BF441A1A54B888E450D06D7B2D4F67760DC62599D1
48AB1CC411AC9D14C9CBDE564A5FCD78E6DEFA3206BDFBF363B3ABF8F9C3BC16
622E89D94300BC45EDCA9829CB2DEC9EEA638B475A0EF50B9F331DD0DE2EA4D6
D4129D0CD802A7732EAB0679687F59CD03CA45CFBCCAD7964A0988E4AAE44996
FCC73A70CC86BE323DF244E9AD7928438D836A2826F1246F8C958B2B157D624E
7639F505201B06B70435AEB6FE049B3C3D64EF544EB6606D15374CDE20D57CC7
4F89B3BF466DE50F5E1157E2533B0FDD9B3F4914CA9721DF104F4D7AE6CF9CFD
CA4BC2CC1E9DDC280A51126BF29FD2598056F883EA038EAE36B23A76EE7BBDBB
E183FE6E087489C0DC1F4A6B57C9A2E7C238EBFE45D4744A39C91AFAAE6CA2A3
2EFA28C3446FB7AF5277E0428FA075CB360F5BE41438E4A9CDAB31BB0B618703
D146D57910D4A1391D6B8F7859A047039EC8E583171C880761C5CAB3F6180B2A
F9E4FE9ABBA9FDA5ADC8EF2FAA71D4BF0F952F883A09ED28C77343A67C181C90
7B8E4307799C5027C2F7982EC6B2E7576D32D13919BA719C14D8B6D9EBBC72C4
0B2432336D7EEECAD27F6D4F082CA5213063A8B1948EE7126B30E522707E8E99
169267CF873201B2A0C491F41B09E779AECF5DE34A1D674ADE4C1DFB2B63E8BB
74182F36FDCAD65035AAB4B12961021B359ABADAE0671B38989777802C876176
172A80711563981FB85E43712F410248AA32DFCFF157C81B92A145530344BD93
56B65FC5F92CB1BA07EBCC14E37368BB0FC99C738D66C99C4C7B987DC3073D27
5D571D105FAB147D87F664D544E3045A31EB4E94B65427757E546F4E98A986BD
B3DBBB6C6A6ECB2B363CC5766E7BCAD99EB4CAE3C9B65E97B6F83DD3A329A522
C335287BCDF02FF29446A47E59508CC2064BFF44BAEE2665997DF0A84D88DCE4
4F635DF9070E8204D61627C86312FD8E62026FFE4945E5C9653C0372DE638820
9858DD7BB6136F04C7DF2132B0DE1E59567CEC65618E270C23E6CB48A79DC0EF
66F74F5785BDC4320D67A90785501B6AA4207FD399DF794D30830D579BDA5E14
0250FB64DDAF0213477FE1A0EF80EB1A097B40868151E6CDDD04F0186B143FD1
45B3C3DAEFEE13C89AAACB1C671D37DD11A7D6DD0343C2A1B9D0D375BDBE9C72
249ADB19214673B904557BED81862E8A507031746813B2DF8B0426689D655CCF
EC927ACD94BD675E57D93FEFA0B4F79901FFE79851BD3080364DAE4BC6F0EFD9
593B9EAF040CB3D2E512EF005F280198AC82F5933DE440EC60129B14EAE5AF8F
EF8C6BBD1644442ACFFC77D821A75FF988048E4D7699A4AF935A5CB8AA43C995
7F801E38D8EC1BBC353EF24EC65A7A26526DD46FC21ADF38FDCE848EF189FFB1
C95C20DA740E8282C5037F637B77428A317396DFD0FF08131807EF6C76F68401
A2B0A6729B0C603A3756400444F7A5A4DAE7D6589640FECB362531EAD66A08D3
7F24FA54B936BCDFD92D5CFA426FF49455ACB34B8434C161BD914ADA232606E6
A61F72ADC17A4F7E3C462F158D4164EE290C61DCB6FD80F09D47B4C557CF5855
B3B741BC826F62B19EB0EF81BDEA8B170248575C0D5CEC63CDC5FCB1889662AA
0B069403B1493A275D0864D818
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS10
%!PS-AdobeFont-1.0: CMSS10 003.002
%%Title: CMSS10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS10 known{/CMSS10 findfont dup/UniqueID known{dup
/UniqueID get 5000803 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS10 def
/FontBBox {-61 -250 999 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS10.) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 83 /S put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C4488BB4EB864B48
63941B9739638D2E6F3CC778582B46AEB4E466D89D1C211225274356A4BC90F3
274C6AA56E200249B7D0949A3FD4185DCB3E5286910EFD7CA72D5D8E8052C96F
388D12094B87D3705CE64459558CF024667C0FE96CBB32B0BC9E51037D7BD62B
E4B05FF99384E71D78441A79B0B1DBA1CAE02434A9FAE46596FB86B873B1670D
AE0BAF516445A0DDC127F8FF3ADA0B10EC30A9CC1F7E9248828B5E8AB46C3FE4
154B80A54128A08777F5F9B8C519C7E3B632B3476F007FA156E9F39FBE57638B
4214CD2BA79BA9DDA0F4C073AED814ABCCC2F7906C57A872C00E67FF03AC1200
29DAB92376422FA21C67CA98BCEB8C431CA2D3EDDC16972F84BF6DB2F705BAB5
CAB39C82D139FB1304B9E7BF1F6FF447596081D5690B1519E468D6BE49C329C5
C9C809023EDEB9DCE4A6D52A8049E0CC134E8B41BFC6558CFCAD3D9D2773EA16
131567AE6231B3235869767A1E7C1FA6C8D6FC1B276CBB1CAD14D376188C9682
302836A9290E587D4225EB8BB1DBA2C4580A81FACFDA197174FE948CE757C575
F23070FD84DE121955D7D9307BF986C5E739FFFB6CB76822C341FBD9FC2E3378
AC9332B40C07D5B8745D74E30F1D719EAFAEDBF5FBC40D0546F69A66072D8A49
28D2CC2E76B9B1EFD191E0BC7510C2C8761BD92EFCFDAC263342A01398A56D18
121A591FF5CD4AD8B25699A7897E60BA940336BC17B9EC9F97C2464D031F958A
A3548D0C97C50C580B6EEFD0FE8330EE2BB0D2E7FD1DAE33448953544A4B1C5D
8EB57798D0ED4B22909FEA78ECDBC4D8A124DA05B9999242D68681017285A0C7
69041C1F79442279FBE328733EA0A6694D68BA89739FDB9297BE0CF1808C07F7
BBF6F1538DFE084EC8C0EC24D883F6CC08A51DFEA23EE920F44BA55FFF58E960
C7BEE551FCD2D5814DE7E3F835608073C2CB80EC57100CFD484C837881674E92
B217F4D11165427DACCC29C129005874C05CDE5FBB2D912368EA2B98C45AEDD8
8A0D2493F60EF36809C8C6EBBC7856F6656E8D398BCB29DAACD4F7D4300A0B01
161CEF51195D2C58DDFBCAFC1C03F49304ADF02789889826F1E20BCC14827565
F2A45CA57DCC61B52E33638A0C6C5A59B145E82B82571DF1806EC40FC0E8634E
A34A791B1325571E19F3AC2EF6FE68A14B0ABEF7EBE0EDA3942E85E5AE967A14
0C5AEBFF2A36DCA8866700CB7082D2ABE470864C44AEE1F6D180D511304C8674
D02FAB12A7079ABF96E1CA3CDF9D75532123E87663B1D524265AEF63EB5C2169
B67A651A101E1C7EDB008D3DB06DB1FC1A81B41B291D6C4A58FB57989FFCA434
DA84B3914D1D80B17AA3A55A70BBC06C49DD5F7DDD03FEB0055088558FA192A5
261477899857CF598DB740E82D035E84CF17B33048CFED2DCBEBC2B75CCAEBEA
B6C5AA1C6978FBB36ED98D9047028360ED430A0AA69AC85A8F83825EA649E1B2
64B260197B06A24A1DD969CEEEE136FB046D713D0630B246BD41CA285F076038
F7F8431913BB9A3E70311844D4C22AA446E3CA217A9DFD75A898997130269B29
AD4AB7D9662856E677FB2DAED7078639CF31C6E6637C74DE2B5D0ACB88BD61F3
CE3C5D56D3D4B3EC1ACB33EACBE05E53A133EBFE93CE6A0CBC8F24BDC5B31BBF
5B3E55D6B40B1CED389076014667E28BBBD60145A06BDECEE8011A2C6F06D091
73767A8045CEF2A110B614149FEE783A2351FB2938A9F73CA406538EAD82ACC5
A3DFD3DE00221E1B4EA977AF8C89661357FF7D2F1FCEAD6CFC9D6AD81F95100D
EA1F328249AD84AE849220E6593D45015B4D7C9527F3063E9F6DB6E572092A1F
1F460696227D5F0FA5A5484B1F0D8B4A35066451663BE448D924DBBFD388B6D6
D7CFC87C9E75B7CF79A4C9207E29E0BAAAD7FDF529B860F7731EA978E335334C
13CB2F0A4250F5957B44CAA0674AE8356F586A24FD137103973B9A1FC31090C7
C84DC5D380404BCDF3FE20C6F74FFDD8BD1DE845E99DC6FE09931F003834ECC8
08C5D962070B6C44F901A787CCEF048A2C584A2285506B4D4E82B1BF130E2220
B6C8B3240A4CBBCE16AD3676B23A50B75F82CD88D1B8F21D30A12716426112B3
23DFDE5A348DC9DCCCE5BB5DB5433A5AC125DE1229FFAAE0D8319B2929986EEA
56A93BA1FBDBE617F30852A3DC8C712DF674169C6D656F75E252187A085B2788
2467CC4DB08D48EE6A98C61BC55E6EFB1938FAA718802B7587B94C8F1477E9BB
DCF6E02B5E67FE3AD9D87C321CD9BC0CCD36B9C4BC601E6BD552EAB8E1C940CE
3A22F3C2501C3C939CB4F17CE97566F0A04602D2A22A05CECDF4A49CAFD6332D
5870E1F31AAA5F86867F71610CDB83E473B9D20BA00D8986D7148E0EED03865D
9622864B52B09D12E0C5FCDD023D29D5AB1CACFA92B6FC14FC84E95F407861D5
2BEE3301AF399FD7ED04DFDE6679A345A282E7FC08D47E3FC8969D3B00ACD7B7
F8769647D6D4F4106340EF739583374D023C2702C48FAC1B643B5897D2D7DBCB
73257712A0FDEEEB98A021D218CDDEBBA34687E23C4828D7F96D1ADDFAED7EA5
B279322E6D55FB486AD8F3A8E7B2C67915564FE56F0C9277A06B29C47FB7D007
11AFDDB3FC1B173B4E449CC6B198041CCA0624D81B4840FE5B63BE72157AC6E7
03E5E95D2E2CE2E40BCE8044A8F2AA45F855484A891B9F0F8F70188AC66A8DEE
F4D656CBE216E6D9AC33BA8DD0685D480833E1226784469A221D9FA3CA600AC7
5574B5226649A9C48CCB43339942FC9010F86BAA2D181AEB487A92A96BF2EDF1
60F3B93FDFF4137A25A8AEC5ADF8613019CDB103DC4367EF3D8AEB4FED0E6BF7
622AE0CD3CAA0321D26CA4280CFB60D08D9560AB8AA5698231171B881BE9A27F
BDCF3162134126212C523738D221AA05E31CEE73D9D40F73C450B6AE2C1E70D5
C37162BDF55943069923A290A6C720042566E55A21CD81C460818883AB016C16
8FCCD1255A66977DC1C110261D7642199D466DD3D2493A2D47694F842241C474
1752B00DA03E69CD16A8A14BEB8A431A315D19A39BA978E46EB1189089FEF647
F9DBB58AAE6B3FBD475E4DCAD241A051DD100ABE81D40ADF18A4C50F53BF749F
D6F7C8E02A5665B4AD18DDAE79096DD447F8BD32C68F9F97F05E0071D9E9AFEE
257B96D48ABD9920418E17C8F027E9E975E4A08DFB1988E7104CBBC1CAF356EA
7750AA7110BE116AF1BA69A94776E4356573B38472A8A1292C63701543B0F315
611A0E0595B30424A1137478BA6F990AC7C3AB4DB69E75C222B617F373C521D4
246E954E9857AF59D1E6C36412B643733CF5E1C90389EF0E5E0DA55D3AD12E97
E7630C315F72A03CAF22E0ACE3AAAFC1D496CF4E5ABC49C2DD5E264BE7EB2698
AFF36089B5DD2C53DB1C1FCFBE1E89D41A95DDD278CEB29DC85FD1DB8B83CAB1
EB37C531E9BB8466ED6B8B60258D3C355626CDA43A32834DC89DFB11E5FC6D68
0F78CFA871113DB81A1690250A6F842ADA15734CB6DF7C6ACED6D8D586BC4E1A
94EF3052FB0F8B9454390B882CBB6E135AF1F9C777AC362C2A758C3A98117120
73C6E2FAFB580716D4B2889A4331CC658AAE996245685B973D9C184541385680
AEC2956107DAB00230FB39BE98D3CA898D917E5F2088F26CBA4F8B5B115B6443
8753331233B10852702FC26D9DD4C990C13CE4D0DCEA23D62A826A4B4FD16070
5F3638C0A50A3373A33FCAA6F3644975AFD0560EE5F2D1CDF08820373468E4FE
6679A229D6955CFDF7ACAA92A87E6D8571AD18CF59F84F88A674B2946FF20A28
B9798EAA22442415EB46B9498DDC0F4BA6ADD347AB43E9293CAABEAE80127378
129D5DC69F6DFFBDAFA5D65580239E8EDF6833D0DE6DF75F0FD090A83CE0974B
AC947BABBD1B1C7194DDAEA37B0CAB477ABF9433FCE0243C8D308409427D1DCB
8EE4FC36C7E5CEE104904B520B3F6E677A5B92F694BDBC2C799991667E0EC14C
B95EAE7DE1854BF4542F05B4AF401CF67FC3E46EA5A0DC362F3CF177B1796DA6
753AA803E724D1721DDD1BCB0C12CE0859E172D2A370C3697286F80D9E138AFD
A0EE016805F847BD30D11D8B891E54C77AB51A7CABF76BB14B06153C7F811FE4
93FC4B7CF161051A458EDF767DF94F487DB939A2740B4242BFEE234F75084DDE
207E84533004B933D43C712F0C71DA4A00FFD6D721EBC93AFDC4200E3B8DE433
3ED3E1DB799BAA27548ADC853AFF5D9D6BD92D644E3CF394789C99D9DC054A26
7770AF5DC5BD6563929AE11BE341F036584DD573D3F43D9D975201EF77BEEF80
D1EEDD1D4AD5D4D4DAF6D5B9D4C1736CB111D6FC74C236779C0ADA430323A825
09EA8D0CB1772220AF28B93098BDB36913159208D1B2D7ED45808BF7B686419C
5C0E3DAB5BC9830FDF3B494D624EE8068BF6F5212BD69EF466B9A213047BD105
B848F056DC544A8CE66C546B1A4DCB4BA29CF0EB4DCD9C2452F22172AFF33B29
E97E12D8F0D312B03BD9E5377BF0C81D884F1E79DB66E8144F106DFD2579AD26
C693C5B68F3AC46BF0D6281032D4D4BAEB2243151AB1AC0BDA2ACDDD4D590C90
F29B335DF8F57DC593DCC081FB56924028E3161AC4865B49D1B0F63F5EE866D9
7A71171C09B09A44B0E32F03494D9EA63F3C89F5E772BE25A6557F119299E989
99BA041694ED805AA4F3BBDF00D88171C9D43A9085A287A36A1F0F9386F2A98A
96815CA51F06E1CDF20B757983C5FDF4003F5438232159F325C6335B734FD982
1423BA77D0EFD044381AFBD0704E3DE95D23A70E2428E9AA355A9A8A25C6C74B
48488C14DEC93A766E112D74C83576ED355F17A809E8D3F9C65C4E3E14EF484F
4658DFB57597E2A4461D8044E95844391C1275D63F282B37888C842A5151937A
45007547263D70195ACC018A373D498B88C5A028BC66ED96A343EEE74D61EEB3
D9472B6A549CEB8699F4B35154A0E2ED22867E4F9E4A76311EB2C9F9078FBA81
838EA49C2966BA64C165434DA3093206B70186BE80600B891D9979F730FDC794
5DD6D8B2090CC67A634B719F441092A10C447A86ADB78DAE45823ECED5FCEADA
ECA52E363D913D9EFC0ED98A5A1F823DDA3350EE27F09C14E4C7298CC0FB6200
DEBC640C68C82D70AFB7A7BA668F1D7948686206884736CD03D9F6E6CF9702BF
E3C932CEF3CE07FBBFCEC0476EA6E8D5D4C5C6450C8FB236B89BB82D51886240
5BA7462F50A88F69228DCBDF26B7250E90B3DF8E94ACA1CADD9EFB5C73EF9DD5
46052314D445CC92512BA231F79A09A2F0D91976B160B8C9BA055DA4AAC1300D
491193EC66A6DE12BE01EEEDBC3A2291DA1F27AB76596A236B75E19FC5F1FB6A
DA1AD835CA08B6CD03B97B4CA1BFCBDD2500BB09F1A1B0438E4A759370EFA318
F062BA9F3D352572CE232E6FBADDAA5363807D0DC5320B807FE5485C8CB09B6B
0BED9F5B1300FF370252DEBAC9DB25CE2EC494E8EEA45FC6604B3C104E81B287
EDD49F3D7430EC9176A16B4FCEC5DF68DCC11ADF90BD5337E2E4B59BEFAC8298
E5ED2C7FC5928635420FB1955251932713236DCE28012C86F63D12AF1DB634D0
0B8CB8992B8723548177BD6822A808FF221A9E38B0DCCBC1F3430A9BAEDA89CD
ACEBBDD8CCA5E17F1CC37E35A01E058BAAAB6BE7124314DA19962BADB74EE73D
8FB13FF6AFB6FFF97926CA045B62B98BAA753AB0FC78B881D3FAFF9EE2FE918C
8EDBEF87637F1530E3E13AC090FF81F4136E08D5F3734327E643CDF621278741
A17AEBC56E21217888A6C8B5ED4269731910E7E25693CFBDD4EB4A32698F2447
4C45D73E810B627D8719E4E34D8FF378F9B68BFB149AC67B3B1E55F20D097FC1
AF74D46F5A3923C63DFEBFCA210F6B257F5FF3F2AC34CE41C15C9977634E473C
2235295C05C3DF6B3009C7854BF11CC87471CBE085793AF9C5D05C5479B9E780
14A5A6F3F6DDE5A18243DA15732CCF26ADE40C566DBC3C62B71D46DE87A12C6A
647CAC923254E2E74AF882DBD5C9E108A9160393C5CD12566AF7C824EFEAC56E
6F05B92C73A76824C5ED1735BCBAC61B98D509250C854CF1500C212F574D18D6
4426B8510FE9785B814A70E75C9234D42483E736D0689D3561E8EE5650F33A36
D50127589401D267BA6442E8616E2CDB1F6691D3FC4A2A377E5E154972E890DD
60CB463E9EA9A6EA61087DF452FA5646F69BE879337EAA0F5DA4438FF0365627
4E3B16851C2F08E976FDA27AF451CCEFED00376FC3D6E0C160F0BC19544DE289
BECEEF9A067FD71D54DA3A4F73F06E2F522BA07551296214DDA47B1BBB1212E0
1100ACB5F65FD30C655A3402C83058F8ECFE48FA60B6A3DC86C4996414130194
6676EC7F37454023AB53E9D9EE60249ABF6953E76DCE3123DD268BBD492412BE
65D7C3E5A5E483C381182A8F19B506F0AF6DCD55532B89852D1D96021B22E9DF
D9D072BD7DD4450577E658B433A84F92752B260AFA2EC4A118747CBFE36AB7D7
6D5DD96A119AA1BDD0FDCBC3AFDAE5FF72713EB46759A06CD09B5CFABCDAB0E9
85599506AC07AA525978AB157496163AAB387F079EC9FA1F9E91B9C2FBCDC9EC
7027D77016760539AC03F1C1DB242D28D6EE946C42DD2262D82ED48C3A839853
BA977046F0EF373AFF884AC3112D2FB319421C3165DFA5710BFB9AB9595A10F4
9D05704B9E22137CF27F4B2DA9CEF6D8801D5F792969B2E58FB539B8038DF440
6DE20C0313A7BCD16F279290AD6859B0E657CC3041C7928CAE35B9D3A681F2A3
2D40F8EDAF1127E754276556C95E1282514B6EB6E43FF4F0FAFF28C715E3F39A
374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F77336
39CAC45329A372205FD551B9E9EA5082411207473D9D90E76136AA70180172E6
AF6EF3EF6B38B1906B904BE9BD5251EF067738840C28877659B649C6C4CA328F
1BEF8A9CEC2CB062702F58CC0B8D2D097FBC278F9FD894E10ACE1DEC4530CBF8
E4E467B6DB9C596DF0C3D43E6AD70F30B733EEE692C2EBD68756D0C16E1F00B6
AD011B5DA073A769B53C2DA2E7C9B7ADC6F551BF4DF4C39C66443692C3DC62CD
B1E094013F364D04BE2FBFCD1C7B2836180E9022E0434421FFA4317A50096684
CF0B8740EF680F27F4A84AAF2AA92C64883BAF57BDC60C6467A8D4E09E6316FF
9BE73053045E5F3586DA3BD1298DC15D751913FB1E72EF80047F6B33591B97D3
DFAD34EB224D64EF60F5B4ACC6EB42E1BE0CB2812FF2F3C264AD2E44F5EBA441
670CA0A60E73176ACDC4E42E74F8F489C73481EB5D46A61FDA1C0FF9F8844DBD
99CECAFE2A72833E4522981FA13713AAFAF8F121E60FAA6F379B2C8874CFF23B
8FECE70654E5855E525A403700A96CF7F8111BF2B58386E29640D82F1DD86900
E0E203F3ED554209CBDA2A61A5641D4B39D98C5C43D4575648D06BB82B6C4D4A
F043EC61B17C208CE8B4F43A7BCBBE588A3D13A183D79A47404223037FCFA4F1
DD237344E589F161BB9BBF3FAD2E28749350DB9A74C09E894BBCA85B82E704E2
99788B24642A7D0F0FD96601CF1AE4819EBECAB89824A0DC1C03BA4B546ED36E
DABC8D49CFAA53D2A9A5DD6B3431E364C99ED0323513476CDCEE49BC413E50BF
51EB93563DC03B62F84C5F96ED713F288D109C79179AEC41424822772032035A
40E84014F5BF40948F05E8562C9CA9DDD71F89021BE238E74781A92D64E5F9E5
AD6C0D954C6686C714BF189E78EE47F1530CDB8376E52631A1A26E3021FAB977
DBF01167266AD68A779C0180E034A90CB77B86747395BE885E484BE4028B4093
8BE191D58D0BF85308C72E6384292A2E1CD06130A091F8AF9DC6C3E12B1E4BA2
BB2C37AB4AAFC0CCC7964C06B9EC1C7E3DB9AAEA0D3E1068121F421495BE3A79
B7FD89426FA257DD0666AA271DD6C27CEA2D32C03C9B3E77762B8D9BF1538180
9EA08ADEB2B51FD97C76B2B2C715418096846008C85C4C7554665AFD4ECD5871
B6A8CAADF8FAB15AE3B6735A7B7BE1FABACA9A9086D3A920AD36B291302D9CF7
4B61C985670B1AC8164460D81EDD3F43694C8D21108B79B4620286D7B675A663
FDAF9F6D11C3D08E877A5E0B1DC37C40C146B9DE0DC5312C6F2FAB21A38DA89D
AA0987D126900205BA85FC6B03F3BEE63F020809284F6FAB8BEC986C40043BE7
10F4FF5A4F00E62D9BDA23432AFD100BCD5D16F0657F61E98576BB387DA0C670
0CB6DF720F2755752E7DA693712C4993B578542C7636D85E76F7E9ACDF55635D
04AB4D7C4671253272BAA25174CC7CA57BCB125D79E69B07BB4A8CF59BC021EA
90D4BD028A2A8703D676C0F01F222A494329E7F9345B2BC651FB39CA39843E22
4497578F7EA86CCB98161E378FE5352C02BD1247B88CBF255969F86C2E9B1FB7
7C94AD728C5365609A09EE3FE4175A8492E3F9F3159EA284231310D9DC2F60B3
5A437001BC9E1097A138FAB9CAA9FC3E8A18C37664C33EA21CACA32032A24363
CCA501700B3DA787B9C50C6EEDDABEF3101B2AA5B9D7B8D88A33E1230EB5E62B
03037D163889FF722BEDB9189FD32E7C93F0526EEC8378FF0568D620171825C0
5A98D3C2AC447EC4A2B2DEBBF66CA5C96D3EE60A91C43F1038B5BF891682872E
9CD6707A87297517978783D4222A9B6CDB0BD1FFA5B75B897B4ED4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.0: CMSS8 003.002
%%Title: CMSS8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS8 known{/CMSS8 findfont dup/UniqueID known{dup
/UniqueID get 5000801 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS8 def
/FontBBox {-65 -250 1062 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS8.) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C6258F0D99DCD775
734480114DD0CD2931DC18782C4CCB90B6906CE08BF4CAEC2D4283CD44730A2C
28919598227F98FC5524B0CC92540E349C5B190DF5F2317AE46FFB97221BDFA5
114C21D5E8FB0D1C298EDFF8836AD72A9B2AA132F52DD5D3F30427563C97CC46
D241B7024B4CD9F1E0037FFABCC88D8CCFDF3BC6EED778074F9590733CD147B2
5B68387E0F19E6A81961077BB7640A3C0E27ADD72556CF84ECD981ECCB64184C
EAB8BD9B96A873D80E3E0D5B4F5925983C80EBC3A8A12FBC452582A0B37D3C42
4DFD22E9BADDCD2E69644AA271EECF366D63FCC29522FD72D6C1EFDB3597E866
61443179872395E99024F152F6D6A4FD71BF1C7383BC1CC27AFD2DE3DAEFC06B
6BA837BBEBD0BE09F6AEA31A83B1B45255DFD6FF33362AF8BCABEBB0D944B3FA
B85FFBA0B370B9035460905432EE87395E518B4B670246FAFD535774467C059F
DC30EA01C95EFBA4ABB41711818E23D7E69D32BD63243A6D98666BD46E234155
BD6ABC76F551C31B6CE2E52323A9DAD5C003FB116AC8A82B46ACFC45EECCCAA9
E12C2C8E3CEEFD98D49ECFB824E8677BC9CE9B682BB5A7117174E4B2A0B925EE
553713780CDF3A3A4AF1560343A8A448C0B5DCC4E11EDF5ACBBA0BA8E5B899A3
7321AA7D4B283AC9234978C2DD81813653A96F2BD129FA5F355D56C4E50310D2
0FAA8F304D8BF333F97A6CD20CA4BA7BE6DC1446759683933BB1F1617AEAD131
1C9EF2212EE7EA9B64E5ABFF45E1727EE82C00FD371BE1387987236F9BDBA4ED
A966658ADF028B5DAD1F0878064221D0469BF17CB4E738258FB5D92E9D380C64
16E95BBA6A2BD9EEB1A187A7231C53BD8ABC9BAC46CA4AFA94A4920FA805F67A
A0C61940F6826CC4539A6CD1F9900EDC3F720AE4FA097F1D7510746BCE2E67B6
EA2F2046613785AAB89915655408AC9D03201838BBA44F421D5F25CFD88E56E8
1CA23CBEE9C2E323DF1866D31F309C92281E514A87A9631F33B238AC6520A20A
346DD6A206C3CAF2830FE244F2AC5D894686CAD5F4BD1CC51EC0B547603BFFC4
F008FDAEBC93542A43B7C907CC85046313348CC8A017C585CC370604E40AC820
8B9D8F57A01868FDC93551DE10FA83DDA3E49E44C32118ED90FA67AB1C66B3F9
F80CF71131977ACCF4DB44CF1EC26AB363C5F95FC2523B5DFBF4D60647EB23AC
89CB971DCDAB3BA26846BA9317C051011C37468B21B159412E69DCB84A9F5876
F418908678F38880B95A4BFD3566A6EDE93AE05BBDCB3C4E240A5C0A06301896
69FCCC0B65BB269F2E10609B6446A68E2DECA905FC26D4F502CAF0EE9AB15E60
CF42CEB376D92D80A6AEE55BCAB006999BF4415815D0F5BA3B1FF9D2E60201B5
833FABE8B883847ADACF9B032721DEEE7FEBB583B89066ED9608F1EFBCDD09D4
3F3C2B7B03154676151753DFF53815F2EC1517C094B0D2CC5EC483AA93772D24
AD3B0084537B91BE1913A31C70750C6DD707761DD733F9ECA552D3F26825B2B8
3EA263488892C929DEC07E2F988B7F7657D53CFA5542CE336D35B462E5E8649E
05973AA54C0A4E63552004E3C77E5FA77F821D820B1620CC8CB3EC5B1D7BA751
16CC155DEDD4DB0FFD3009729F365670DF9472435557201D8E82341B4056D2FC
5D2F7C57599249DA2A99A522868716B076320350FA7415C3B10D77A6E1DC77EE
2D929A038DE3EB4735A4D4F5C8C340D6D293D57E83C2F379ED0EEB16AA3A2A2C
ECD664E526D918A3D0A934170B6E1493843E6AAE87E850D70DE65D34AA2A36DE
8687D57A6B6B1447F9A4380CC3D4D11D54CBE762258426C46B8DE6059E6A2F31
E748549310FF4362129080CD98E70817A06422743780B86E11101BED14BB6569
D36903BA8BEBC24A478CD430801082CCF49382D6F04DE270D51CA5BAFEBD0F8D
901CDBCF10DB97E2B059C8CF7CDB45BF931203D5F8CA4622DF19682DE2BA7924
47F78908BDA23C4E21C0ACD2DA259B23648B6F233EEE830E7B82DF4371F55C30
71993EC2BCC7BD6411690B9B1621903F358450976D6B6EC6B505A593A9FB7D92
7223E2424DD5AABEFF254FBCEF934A4D51949BA0E8CD614AAA3AE6C3ED7B37BF
5324BD4998D8D5DA95E4741B753AEE580FB3913770C00277C9F609B4DF3D618F
148E0EC7A75218AD788F98D35989F3DB94413E70955EF586C0995A450BC75820
F5490EB55E5D0D21343565E1FA94FA64A74377F87E55EE0EDDC8F4286951A4EC
ED6FB3B444206D89BA71A9723E41E93A9F6C80240437019F3C23DFC2491A19D5
29762876AC60A14404493D04B5537C1E6FCA67B69DC1CD859F9C956FECF4461E
EC8B6CD5B5A89A8A838660A6C3F47B79ACE3B05C0AA2F17CF2DA947B893B42FF
749E2CD5E7B56823A119629931B1ECF65C51000A10412668877178F589B4DBCD
24D39F9219C46BDDD6F101C6AECFD3876056CBB858FE0C4BA2BD0B5FC26AD5BC
7FA9E295E72BEEEC721300567B6894FC48FFE5E3067C538CBB3B77E386F50D22
F8DCFDD0E335060CDFA49231D157981925F1CB36110809C12BA28D2D116116DE
01898E311FAACEE0E5402CA30B64D3D5A0CA33E417FC322F2F0BB7AD3FEE2039
56A15DD6D1E86971AD3A5A9A27F33AB62A5A3BF5660B59235398926D6BDA33BA
BC43B062EEF199E4ED991518A62AC374EE21E8F1E1C954BA6D1493388F708D0C
961612444BAE019E1DC18BDE900BD7A781835580A74DC696BC512F7BBDBA2D0C
ECE5D83A049F7A3286B94FC446DB5C3F33CA2CD3DDE2D0E774A579831CFDAC37
9612858EA613AE6939CED001EE662DB17642D0357B80BA0F82ED306218DA8505
A613CD622FA998EBCDFB7BC70F4E4C8F1F43241FC22FC5BB208F4B20311A98B2
73F30E4DFCEC93875CBD1ABD29ACF80585F59947F23A96D218C0CB8BDC1C49F5
70DF3D49704CBA9A23294A88A2AD61811450921B1E5C3C86435C55AF87AAF6A3
A13709082DA9C47D372A4226116342DECB14E4A4ADB7598321516DD637B64148
12AB17AC5B2EB25718856D50BFC8D64C78DA6E5C145187DB0325C30A42013A81
590E58E74094610207FC70BBF1A497395939B42A6EFCFABFD9D43221DE484753
DFE5311F1845592B4484B1CDFCC32B4E068B11A82BA189D2268D88FE63B9C6E9
20C9E40B543B5C401265D92A932476DAEADD4D3E2BD6E4DBEC0B30FA90A1924B
41D2EE9D8AF2D8CA79D15518141665B542C696C2507DD2F4D987EE5E22397FA8
FD80743186872DD67BE58103321467CF3F4B8898E66584DBB9688B9C78873CA2
9B72AD7406CDFE8B58FACA2904869FB0EF126DE299CAC08CB89F60561939D75C
2722CA57853372C14F5BCCA5C4FEBCEB0728BF9E30140E6B0D6C034195FCCC89
291CD818CF66757EAEB0AB5A9D5710988EBB052850DDE97BA0DC0B054BDF5172
2002AD6FFA44AA5D9D4EBDB6B2C04E8EF38660D9BC4C995BF37DE078C279328F
4C360B8EB337D798962CACBBDEA517A5EDFAADF0D445FBD1099837F9D689CD2C
E330CF587246387EDDED64A2F4C397C1B2BFC325B39114609EF57DDCD7B93C53
811ADEFA323C59441ABC447F683B5EC43870C057463DD502E9B9DA7084C3BBFB
2FB864D26DF1BA41ACC815F2A71E96D2C6F572E1F7E4A224FE57CD605682F98B
AC7BDE4B85A4C11D58981E981E9FC43B87A368BAEF78AD87B7DA0FE403AABFD1
CF414CBE75C0E9E257DADCBA035E1BF05C4E17FE92309F18633D93DF885956A9
6C27E77540F888B8336B61598CAB04F3B5A1767C1ACFE15D32A25E5B1BF51FFB
CF3CFB25CEE7DC95203CC44805A935D5A9154A89FBD4E465F0E599EED4033365
0A31612F37BDAE8CC85BBC67F7E375EA68C2982FFD89284B027501184C4D2232
CE0FE4E905C4B504EAD009F047FE627C79AF9EEDD65D00A3858F88E699E5EB45
4957086CB22776AD06C317DEA41880D88F0EDCF71B4ED76BEE665B7937D5D0F0
E568C7615025172086BDBD69670EA154CC52C85CBFFE88C1A4D1AFB6624EE667
1B5BE2A31FCE8B2A4B03BC5DC57280199CC0970EBB636DDF8DF54C4A8CC8805C
AD63CE866FB20C64725AE4BC9F0EB275BD83EC89F2F9CE23A084B45694D8C3E9
3F3D3C1A678690877E8B1B77ED85D4F6E03DBF1F3B1D177E330475F172E0E729
63EAD8034E6100B2A5773E2605180629972DE6BAC0A8C2F9580E9F1D2E77791F
E1D33C2DBED3FAC47DDF1B74FD02583C3CFDBB2D1CC2B735C02B14B7AD3733CA
1682944ECFAD673A9AD5E80B6248FBB6E5036EA7FE5CA8C34FBCA6DBD0E76EB6
C2CB89D9815DB3C45742170DA926E03493AD86BB19A1D3FC623BDF1C920684FB
7414EF69CF39713A9495D8CB678BD4592B53C36BC6CF93505B8E32311D42532B
5661051B855F01A9B3D77AE38879853AF0FFE2448368DDFA3EF1DEB88AA055B7
91459586DD2DFEDA192306DF7143F998CC5D67C1CED313430E5CC3F9CE265747
8582102111E7AF9FB94D95B82D8E1DF01F04F2A2C22A20207B59C8976D56833F
E3B79DCB727EE7537476A052E92F7C3D6A625AAED8F026F22AB59EC0F86E541F
BC082D8E35234A18192862EFD232C9950B1FE0BCB91209FB540DC5729B9E36B9
94D0913A8F01FB6CB16DE85E6B89F144111B1D911DC527C24917D909F1CF501C
1AF2923EF71530F21F9BF049A56C7AB3249A420C28954E981EC464F61FA167A5
C6084661808089EE7DBD80A2D92FF4040B37B2D81A2F5A568D461BE1C62B0FD1
BF6D1063D2B5DB9CD48BB2B2AC9CEFA543E0AC5C86C462399C1E82F25A157282
D32D538029ED22CC5935E63FA076BE22D3F53B7D7CCDD344D68B4E73F87A5F2C
691FE68C981FF7CCFB124506FEF93F36F7181075D7BC6FEEC0E35AF57855BAB2
44AF021C7AD8912D884424E8BAEC68A5562B881793A1B47FD338B1EE4C0B8583
2867C78DBC2EFC8BA1431DB1C8622C99BB2C2D4D5475BFCE87B11762427867B5
7253463C6F2E1CF5F1DC1F7851F2EF6A957CAB0C0A55076C59A6FF9237917C08
5F97C2CB4B5CC903B76BE8C057018CD962EF90E1C0CCEECD52F2AE35A94C6EF2
D99DF4DA88247C920623978A1DBB81D8F171B588D617AFA8285F6147E889523F
CF11EF4BE498842D3BF8E811B4B33131416658E03293AD911516D8AED556F7E8
0181391AF36D862F5F8B4588BC99585BFF0F1ADE4BF73320158DBACB2784768D
D9794E2B0F2C0696E5ECE5C7A7DE78EB5CAE85EEA244D43D0280D4C87B6B93F4
803718596FBCDB61A0BFC2DC666128E56F3133B9D4F16305940B50ECF66D80BA
06C0A73C02F689314F1B4FAC22D16BB1E414C6F0A1A548AAB1364D2CD9DDFE5E
C8887964D26BE84986A6B1246BC306E6343CA376F990B77BE8D68A4E54304C3F
250B2311586A1D1EAD2C0221FE1828CE8396DEDEF13E70E0AA75FFB6089DBA9E
9FC3FAB43B3633C8EE7598619A0C6FAE2F25274787348E3660D0EB7212F5CB38
032A41A54FDF14B32E721819AEEC54E8FDE3AB8F0ACEA267B01081F284B008C0
5861CEB5C236729AA17DC78E92FE1EF9F047B53A59F2D1D6A6734D0413D1A51F
75B03234F4775523A55978C73D5BF9031EE8BC6BF9E2637DAC07F5AAF2A6C41F
77620B272300A78E86F71F16EBCE2DBFEF4920BD3F16C282E0BA4C872E5F7E52
7ED2B663FE45D4A36A588D228D32E2861F26AA6FA8DDBC8110F4417D0DF29285
F06B57B1720D0D13828A4DD68D57BD530FEB9C3CF305594B70E4394BD60C82DE
A64EC17661977B18199BA661C48860919CBEB56AB6C32848D51733F1E959EA35
DFFD823D92F11065C643AA69776F71163A60D4941B753BBB4A4C0C47BB1D965D
06C9BA1FDAE47926F37C0C5B591058F68FC1DF3933B2BE014F99A53A617A19CD
8BE011234D48CB7E14D31B02B1FC47C8BFBF04C4409D32CB454E8FA0EF9AF16B
8AFE9FDDC41F6A23D700D4AA922A0316A895D240C5595F21FEBA98FE0E74B762
77FCC80F4950A8C55B4A008FD381E9C0EDF4427CB324BE4ABFC790CEB53E8BBE
AA90163A7BB19E2840FDA404E830F5478DD69B85C5E69573D8CDBBDFF41A8126
24A6AB66333C749C35BE314777CC222D54FF2C4C75717FB938724EEDDFC2EC1A
8DA77B5482E760B68F0A2D240332BD48803004BC157C6E8E192D512CE83D5572
D388BAE80AAF5E7240A73CDA7CFF7F8CDAA4ABE1D3BF6ECC3641B6BD1C2CC703
275D48D62A15E5A85F003E76D1EA7DB65E3476CCCF6B504514AEB1FF1263FDB9
81FBF1A1873FC287FC6B6DB11F0FB463637D4F3280EBD19976588F900B956FB4
36AAA8C1F040300CAB9C4F624B22C1D3D6414B7CAD36B5AEEC90105B5A5C2129
4CD540B9D0129813BE7E20870365F8C46FEC92DDB64D0A6C7C5B9867A4592B7C
124B1B47899CE2D1C03811AD1B8BA253B0D29DAF2B53E312827478DBA274010F
C919D122DF24C1E372F7F3CA77A2C0EDCDB2635F4136EA0C202D4011346902E5
1524609DC031656660302CA36D376245A64135890C13A11C0085861792384787
D0831FA01C11F1E7B4429DDAA0B3A7EC1DC3CFEA24C34DA4BC993300F12A953E
80C8BDA360789FCB0F1AEEA7AAC310D0C3C56F43F7914C3B037DA02C31EB740F
2B1A696E0E5553656942BA567DC9C4D3CA06E45EA615B7B5674016DCFA07C0B4
285BFD9D551117A357F4BEFD58BCE60661187A5FF20D27D685B24BEEF563F0C2
B2CFA2565112F7F49023CDD405AF3E54FF994630BE678B0D6E1CED514FC93F7F
63710D289026CEE4B074253E7E0AB1DCCAB57DA7A1E2050D2B8D3D75F2AD7423
0B0A7081DB1FA44055620B0A2CAA54666C5EEE3C01540D96ACAAE98644E1D210
E0E020214550D723431813C031DC7DF0D177E82AE49798F8E0E5AE0BB8FF664E
4793F857BA380297AFB977065B7500E4C0AA1735AF4E15703C860A016F19E593
319D14C497F24ED8E42F3FFEBE976DF33D697656DC11A8A7C6A60219BF63F186
E0FFE55594B31E5C312DBCCA08E84E94E8BF57CD5F5B70EBE59F0D41DD3F6B05
F7635EA92FA9E082C80075A5A5F684160AADAD501BBFA7746327E3E606D1FAC8
EF7AE7C612371BB52FFF41A97A349D111E861A83C9C48B0145ABC3582FCE43C5
D121F0EB6F5D219E52E2BB660AA1DA5551D6B66A732628D640BF9D8BDE2BB3BA
046FBFE2E28DB31AEA2ED8F9405A39C16C3800E9B5611B460BE0F6716F2BF79C
902AD4FA3B6656E13E9DD7A785C17F28BD4D646D66058721610CD756E0D18D32
F09C740B6023DFAD45A718BBFB2E65544D4754A5DB23CC7988A3EF45CD3786F9
E100D9684549A16BC2DB736D43C293097E082A968C27F0C120C41A53E3464381
F7DCFA8B36344EDA85F53FF65BCDACCDE7EAA41A6D38C1F420F8F2E287AB0F98
A0DF7D8A6CF2E4C78D606569BFB7C51495493FACED57CF2D507DDD366247D807
28D73CBBDE2F4F666099411B1FD2CF7B93D0E9AA161024C58892285BCAA65E55
9FB37468777706D2C57A0DF6D520844B56D62CD10F2D7B02D17F97E4F87C16F3
9BA09013FBD7ED8C2DBBB432288E598241369B9DA6E3EE324290D73BDBFB5448
E9D7142036C0FE538F18E866A50DD23152E2C096E1045E7777888AF5CEFB83B1
C6FCA18A26E83D75AB66291A5A5A285DBB1B9525919564600D71A767BB03A8BC
7BF24CC3B318BBC0F40C79835DE626E99BB76C15719BFD5C15D967B84A6DC1B2
450D42BD399C5316396CB294D008771E563E5640AAA9635A1EF11001D0E20298
066B78B7F918E41FC48A6A6BAC8CD12D58CC2447D1BAC318E2717E7B5A94A4E6
462FE9017FBACA70F73952C2FB4B57406E692684CD10FADF049EA8173068CFA5
95F8BEBD313E01B345EA52562AE3847FFCBC60297F23C69A2B1B043066BE29CF
0A3791C131FC4888A9EC4E532138625EE58E39BA27499771375737E7B850DD06
20FF197A79E3AF6B7A776C63DADDCD6AC2C4DFD736689DE8C4505C85FA57E76C
0F3BB279E2D23D4CAFAA75F1EF20F604C7A0CE1E83B9F49AC5967B67D3D27105
0276C43D61BE649DF035EB87A181698D93DFD067E7C1285B83392EF3A1562AD1
507DF763A9BBE617BE030B3BBC5E547439943C8471C6345A63AECDDB3E70401E
98E89170C5119600A80D7D58A964EB0AA0C8AC086C33CE37468AB61361A9FA8F
120B9B0ACCCFE111BD7492F0B40A2A4EFC6B5D2DEEB7E872EBFBBEDB8FCD20EC
94BF5C26F6D26A8FBF7454524CB85E33907841FA434D712156FAFB912A905EFC
B2A3DE387EF820CCFABE18717868931A0C4C0DDF29906DC66CEB4AF01A3955C3
FC1D31EE567D48250449EDB80FEFBDB615DB0C5D6DB1EA130A150836B01F412E
622681B47249BF49429A90DF2DDEFDFE447FC9E4E6F5204FFD8FE1DB9555130A
F5D2F760899E177DA9E93FF5E6615D5B4941C49EC3431D774DEB19880ABCB341
645BD215A609138ACBE55B34EAF9EF77F2783FBEE4A08FF3EE1F762474A3E37B
48F34539E43B911433B9CFA8682A6A7987434138B865CA30996706B0D77107D3
5B3C3418238A2812A221C4BFB7991AD34E128C08B023B959797D1DF3A7F5E199
20E5FA56C4601C659ED84C8593A1B6C625A6C201F44D5CD5A409FFA16EB647AD
5881D7B31DC7738D8EC7D8870756A75933B5E62890DB2960ED2C624C08E04859
833F1157FFC39BC536F4F2D9D35364C05E545395DCD2057B52239985029D63C3
5F2AA582A42549F0673873F1D88132C6759669486D96B80273EC34D668CC1160
C3E86FB5A47816FE816D757A1995856D34EF4DEC34F23AFAF0DB3F80D6DF9071
F9444617E4297680D805636F2CA06246B8244F5B3723EF3C5588BEEF6F69CE23
C2079FB0A5CD115124DD212054AD051A8FEF6860B5F12C120C764B3A0F153539
C36D2DCDB08862B0335E7F4F373752866661A306EAA46318FDD0F1CDF8B66D5B
BD0D5B9606882CD968BE1C5333D2DC5D61BCE7CEDAB1392603B91D4FB4D3CCC6
4C244C32815E908900B0DB8F9444AC8A3FCC6E8B081BE65309641F287540BE3A
24905CED5EEFFE6375D10218185A5E10FF0926C88E8794EA2AB86A00E5299637
DAE41CFDC9FD050BAB5CA055D1BA2394A97371286C2CA7443D1DEC74764B0301
D842986153ED577B67FB00F8B98950BBF15E9CD2BFF730A781A40EA3CE9957F1
A93E6DA0AA20E5BD03AE61262471F24B415EFE9717A71C1E3D98108F21603642
4CE710FEA22D2A7FB3BF57FA86533D86B5906F4D9B5C676DEDE8D5EAA8C389A7
D42263091EBD21AF930D312DD7FDE5822FCB47F9F6C46FDFD98E41713DE78437
1B9F72B298BD4BF42EF83ACBE759DC6E8EA7FE8533D0E5DEB2933463C8D90990
6EE79B944BD45E8C7266C5D2C6D6962BC8B0152C1C05498E5FF4CA7A2599FCB1
9C4E19711FAAB8AA2FFA28EC7DC23A28187F73F70504CB91EBA1121D135C4310
BF21725AAB03564E63411F9832F557CD46F9DBCA974370A97B33D3E80F0BA217
C823BED815B84E1EC950732D3A48CFDE2A3607E18301B62A655382981AE30A98
E09830B518A5B13A4289AFF0F63001435E1CF8DF272DFDDED81E7A45272B7F8C
11AF8F19FEF5E841B11286A8A346FEE090BA9D28A40E19C3C21F356177851E0D
1093FE982FD440A396C591B682B5B87F904791093C27B53861D3FAD9575B81D5
5B5CD81731F9F283CBD1739DFC461DB260B5BF4E3266D2F53E8B9F99E80E0BF7
C072087AE62934725BC70043EB8B07E9D4821082F169E3B722AAD6FE987D23BF
83053133B027FA166E85A8CC9930F8EE121E7E756B9271085C97264186A4FD58
E0A3EB9BB949874CAA32F04299FF3D326F7DC9FC4F9CAB35B76B2A8B94EA2A91
0764ED598135D0723E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFBX1000
%!FontType1-1.0: SFBX1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1000, tcbx1000, labx1000, lbbx1000, lcbx1000, rxbx1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-229 -316 1737 939}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435C02C357D527BF5BAE9F3163F8850F
4267F16F7320BDD6979C2F8C665632114CE1D7FCD000F5FBD3E05848929A6E47
97361D305E2B3EF0D3289006D6D4A92B4915A07861EFFD2EAD6D0E44D7F2BC50
0393AB5D4E20487C48DB19B78C49FB68EBB7ECED723428C77D753A22B7D69614
D9508C82BA58E2D874CC9F68A68F2A40B655CEC8A6308B67DD6ABE39F97FAD75
03DA383F4C166B7EAF7A3ED4BB7FC5E6B5D2832CD0A6587B17539297FED807CA
ED127D2F0B4D1835845D8E3FA03981EE7410C5EDBF3C000051861E7C98A1CD97
D8CFEF6B875885BFF5832E8FCD91B4780EBE0E908E59EF5D3FA8CC9D67787EB9
9FF5335E365F2B9EEE281ACC85039C952D301529C2A7B52B3A174115FDBB2268
D98A22B25EAAC4F57C64C0C1DBC34B0FE96C1D9DAC2B7FF6749250D8502C5C28
3B8CE334C9E727CD19A3AB4FF6D3339E7E9C3F43BAD7A78D4C7113CD45530995
E6A70147ED0D3BE8A22B346818368B4AA3AB2ECEBDF089D4134F08780B4CE5F1
D96EA7AF6FC84DD5FDF8C9EB273059C87A568B0E6B0D41B1745D6DB55C621F11
5E7797466B74ECA431199CB2C9D974DB020DE52EB9C39B2CE83FEEE98D229076
8C6B6237B150DFDDCB233858DB62479384302233B6472BCE3E34BAAE8F821E9C
4B6ACF55A88DCA7FB297973FA132DA117961DE38AC89FF6E9C2CF065EE27CBA3
70B917A517F53CF0A8111A61F0BB4C3437BC1AE23B20461FD6C29221315B6D3C
36986D140F9DA77BDA7ECAFCBA5135DEEEC0377C788DA169D9F8F28ACAA730CC
24F67EECC8E55495FB8BA2517127654AB53BBF98540B45A913A38EAC51CFB985
DE5BAE3BC88EBCD90CF3D97EC8E008295390AED32AAC9FD853767FE8A429B653
110BB70DE3CB1ABD4E08E641AEB075E3210DDE73C8F9B48568A1FAE43C4BCAE4
0A8FF65CDAC34AC084B6AF218B39F7342607F6D4FB4CD2BE21FC163B1C05C2BC
8BEA51A8AA741728166A70041ABAB38587EF918FAD8DCADBE1524399D03BEE39
3D736EC434D7135E30F2E0AE96ABDE89F53C9AEA0C8A3205F250732EA5AD3242
3C4AEE425EEF76A3EB471B372EF8F0624D629692F817DCE1BA41EBD885585978
95115C884A71235FF03FF7438567598FCB74E357AD910B4226202A3CC1B2444C
04CA2BBA3B85BB230DF9B2DBA25B73A8B3D716AB89F3A05B1B2D419390DEC7E8
FFA87B63BB57279B0CED20DB2402BE089AB6F6546AD0B68F19B58636E93785D5
DAC756DC37ACE47977E8A929021E0D92E2F195338332B6ABA850FD67FD308C95
A41879CC539C09DC52E17E24A6C4C3FB7CC27BF8830742BFBED50E7224B90689
B5A2A9B53230B0D07973A98101493A3B3ADC64514EEB85DCCE95E6C439C72171
B0F1851CFD7055E9ABA4FEAEC9A6C932A07C448363D45D80F3C0EF834F615E83
E4D27711DC1CB2A8C5462B54E9A9E01AFB83B53BFFA6428294A785D23E705710
4EB02036FA8CC986D792836D540C271AB7A0A57095840BAB3FE30220FF0C0B1C
F004B11C953D943A53FEBB07A7ED129259564B2FB2D3ADE23589E3B98F23D84E
FF89DFD6D26F89E617010D3A5F6C1D44D7A44409CE5DEB8FF37C24CCDFE96B17
4AEBA64A560A0EE4086B060278B08AF3A5B1F8D380CC13F3B383C19F9CAF7351
6C6C096D9A4E7CD45E6DED53CF9F7A50A22CE838BB8222997710D0A541F29C16
3DD4A6FCA9D574718B9EDF56CD19A515BED3064BA8187484FD94CA457B93119F
2BC86EFA695A95B4313BAAB983F0C84F80B8ED959DFF29348A99FB6574A960AB
AC3ABA8E3E8776392D1E09918175CCBD4A7DAE54F3BB8BC8902F3FC45CF331DF
498824CC9FF6BEB1469EE02361978A8883921365C7DBD28DDB3E1C372EF8F062
4D629692F817DCE1BA4524CB153CBA7135FF891196F9A563D3A8718B273377C7
A9DC308D99E9F45B0999929CC50B0EE4C75B3F8CD9989BEDC94141D931E81AD1
E41967416E1FE8C348E69219F7543FA3406BDDC249097FB80FFE0B3575D98C9C
AA8C556012EE5E31D9C55CFF9337B7A6EF3671320A7F252FCB0B8A6FDD93E745
D318F859EF0FA13C6DA0EA870CEA556EE285667D7FAD1909D38B92C1C8EA20A8
5F9D5784D0B66AA0C3A7A1B0F1D65A529DFFC640D25B5C822A2580FDD763E54A
3553E3BB3B49B04B94CA0F40D37FC0854F51A2923A12E486B6E2229B95BBC859
B0E895D32EED18FB9849F4CF2BCCDD68DEAF24CE13EC8671211F642A04E228EA
3E501A11DBBF70DD3490C89C6AE9391A64A65E6FD0BC2AC6BB08B915927B5BAC
7460D9D22EB3E9292F3EDCE976B79A51E1276AE7E1D39D16881DBEBFA7D861AA
9E9199E7BD065BD7A4D2197EDA762A83D71AAB148BA91519558B1CBB8629179F
79B7C8C829545A65BB98BC4F4E91EB8EB6CD303172FE49202C8AEB7CAC6C6F86
70398A8B4B855CF0A40432F78A1468FD7260DAB6DB280E5CC381F91DD5C2ACEF
48D4BE9B7EC2113DCBD3464B54C3EF7B3DB6D8290AAC56F4B054C54C99AEBE3D
E4FC7EFC356B116DF4480F305A907C2D0CE542D6F0FD8C3F73B033A2E55723BB
DD99B54127DD8B231EEED8B89C0AC1C6734DE8874AA71E488098F991A17F0B0C
8400E153FB99B7EA1593D47EE29EA1FB1A33C625E48873CF99914A159533F0A7
764577E39B18D3648CEACC63E22444D1F5A4DC175B2820F473AD8016FD964B29
A00D9AF51BF070E12C4D1B0CAF610487430D951891FE84A63151BFF7EE492FED
29CEE0D733DCF83C12CD299196D299E09079CEF395DC2A709407883C4A10FD40
EE2F36CE7926F7BC36D833891716667C294F9203A8F3F9BB87D8068DC0B1604A
CBC17CE38742A92AB8156FBD7EDA45FE0335B6EF780BD59AF90E6FDC7A42EF9D
884F625072F22E721B85ACA8C780CA25CEF919FDA2BFD79F8F3558B8B5D1C961
20DC1D4A49FD15D7B59B4A93911297AB79551320EF4FE96FEA4A5DF35E902FD0
BB89B5E469FDBC4831E9582F4D496084F71B59C28E917935F900BB89852BF0BF
8B10A3A41650C7A87BF1B8EC47E6BAEB532CF9118C2171EF7197954D8BD6F377
F1189DC1317B40E97CB8F2B0FF242C33F1494197951E4F5222DD5CFA2D4E334B
C21B21757CA1C2C93E7433B94133FD59DA83ECEBA3A6F9965049ACFDF6993996
A13F87BDF6336931A7DF68962001A2D092A6E0C08F88B9950C05422C157F83C2
461365B43F208C3C555A0B9BD83EB8AE31CE2CB8997790AFEAB7BF19D17106C4
A096EC4FE610E528E623D3526457B108B1B05ED7F3E8493CCE275D9792CF60F9
17E05939C2A6F9F0B22133DAB2E790791BA3C9D7497ADCB268E09EE801408055
20609156300DA794EAC829B60B4D1F0FCF49CB9DB4906AF58FC1F5153D85FE62
F9DA6DC4972C27A19844E91F88FDA01F80A9583171E1A19E0FEA3B99F686F4CE
405ECAC0F2CE1F6E84B4597EDCBF5C2BC80D89C422C502FA0840A71D8CA55988
C22EE97AA40DF560A9F2D4DF74A8F70EE0F2E2A650C0C690BC84861BE3814E05
241DFE481C7CA972E8679D38AE1E963098A922B4668A2B39A956E66BE4E541A0
1B9AB34DF34BB7EB44F9552C7775672B3C002AFBE86E0279EF48C1367EE10217
75651CD24A0DCCC3240D4C9EE4341045978D34A9ADD3B6D230B9FE7329ABD57C
9B8F99CE6966ED4C866165E2FDF8E5BCBD0AF297CDEE3DAB0DCBED51E46995A9
0D404B2E4338930C46BFA6225040B8EEA065E216B421FE7090EF7395F4C42DFF
4D83E81A21CFE03CFFA88611A8FA566BD9B0D7A6FED0C03EFB23D79AE75974B8
0C9C91F330DB0CF100E2D4D13FA41EA33AF2726A9360CA144744E50AD22E1B82
1AE28B5C9FA48583DFADA9448F18A85F8335E090951CD4AA406C1D10C8EE6D1A
4622F257990FE8AFD74901D8038DCB2D4023CA89AA1ED6BB8841BC22DC463B75
3E1757A57251B6B1FA80318529283621035A3DA1025EE6E12A9AED270D031F02
60B1358717B5FB82279C872225D80245D72882BF78A15433570C04A5F4147AC6
2ECEF68A297F420F64731BC8CD224EE79571B219B381A99240802C01CAE5D074
B05C3DB2A40A60DC54F71C9ABF588EA95FAD164918688A7AA85D80531CD78DA8
A17D79CDB0A26FA78089DFBA02516D556CDDF69F323FE1C8C0D91FDE9283F870
3CBBDF818E3A43F37D471A3191DD4CDD36BD08DB493723C2EC0E0BC71B0D4E7D
B8E23B9239EBF092F358DFDD1A0399EFE1A549C3114EB5A0EE8C67EB46740A94
AC213C12CA3F067D5A2F7A5A783A3D84FD5A83395723CDD988E12AA417331E4A
D0D680ED79D38E7557192C02CEB0144F286FC2A5F861A6667E8A7A33C2CD49DB
CADDA66FF4EE4BAA9B4B2E54A2B9A0A8C6E3775C444CE4BF9C26692C2A01EA6D
07BC9BBA511622695DF59F17E0F166CD48F80B0D4DA5B33160C0E49D7641BBB0
7B287EAE62CE1BAD29021E0D92E2F195338332B6ABA853052C7AB79B0FE64C22
69FE1406751D2DECC5770EBB43679E6B59ABA8AD56FF970FB0048BAF3B87B163
4AC319A9F6DE7DD73FF0CEA92E3BEF1290615BB3E6E309E0AFC3DC55080682F3
1A2596F0A95B5EE60502B5D3168AC91AFD4D90D7EFE545FC237F12812FE85769
D7E4EC36A3114C7928B8B7946ED07ACD4CC8BDCD211A0F749A4A0F3DBA016E93
1F8C1D07594157372F8AFD21F1AADFF54910E5AAC597C3D514037CAF2D9B1753
B7F4DBD7C44694519F71FA06AB61A3C1D0EA8293476CA989A18969417749E053
944FC3EBE35FB8046BA34E3CBCA440F97FA94CC522ECA49836009D57A2A48E20
77FDDCF0D8AB81ECEA22BF43938B806958D3CC6C0FA1B046F8C0D3C5187D9572
A5463EF6D0CDD0EAC36315C044869494B4028B4160979407822E3727C158E3B6
0B2B48F1EC9818FC830CB7288AB35BF3532DCD2316071FE6249CC078C02D345F
6328F4792B50027042AE282951A274647930E60C817A460AA7F620A75072F1B5
8F131681D7C08FB306589E39D88ECBF48D1C43C7B4C40032E5385748A6AF5F8D
A7A313EB6B1CF97065D93BC9534EA313F7B59850B3EB48D702507E6B04B22D93
13E621FACFEA5020383379A7B2263538A0C4C94FCB267FB1E0E6E7167E197F53
A51B0620A90B2F7F063ACDC7D2C157796BFA5509571043B26CD6643C19979784
0AD76C90D98AB4D1C9F2D3A6D13BC6B93AE8DD633BA979B1F2D9E561675FDEBA
8CB89756E1BCA19DB328E038F9A91CE40B6143369CBF8A4CBE3DB3B04895E709
39E1E6DA83FBAB0B371FB904D6DE0A4112CB06F622E8D4903EDCF454246EDFC6
6F812E26646B007A9AEC15F207677E6008BE68A14AA6A82D7D7562B83BC5B4A7
AED9DEF3077545E1D5849AE5D0E1FE8551354605820D48BA0B2EEE00A5DE22B6
B6D5B0C82BDAC2B0D3BF8AF70F6D03E0F7C83E4103197BE497653A46A7B86642
46174A163D900F65A3659FCB8CD67A6BEC42365E3B6ACD3BA96D14CCBE4B84B9
47E070CC911DFC194F0249BDFB1944279C1E60AD1BAFBD40ABB0C78747C942E9
1F031165F19BEC0C1836DF8B985223C59D2CE7BCA4AEF940357F5586F1905745
5E4A937B03DAC1CB114168E94F3184CEFC151AC9B701C2694AD9DE7E2D0BF854
B6433ABB0C95B1403D511CC98469DFD4ED362706DC46F7F98FF65B5C2303F2D0
6F1AAC926688173C86CADF520FE29FBBF7503E4F55B32C48661D0D12D7860F5D
93D2D58527B0078EB6BC87DEE5B17779E029BE748CEF76158231CA2F9A4842E2
9B1468389BBF90BB149C68A54DDC712EA7E5E5737DD19890B0F20CB1BF949F09
D5070100F1F63E4F222C687D1D9ACDBAB58D8AF2E78C2E05A10E96FDA1DBEC1C
98A763516555407975E434F6523CF7B635A97473B9B102F379FD31B851F83DAA
632F1270EDF909FAA502CDB49AA6D22A71F09C04AA9053B790FAC214EA649EF0
A956E5785992C6E333DD05B0A2AC1596FB208C3A9D59F3C0A4D945FF1E2FC234
0BE37B673D3AF008DD814CBDABD69A48BE50E57657B3778FC406AA2834958F46
6CA95FB3D8891C188B18431434326F490A56D3638C9DB5F9E0CFA1B32069332A
A1656997F26C1556CA2427ADDC391E906EFE68CE9547B5F5B9E5E5FBF908F085
D02D4753F758128E2C348C03CC06DFB4AEF2400A7411F1D9BF7699B1927862F5
7D96A0247EE552E51200176ED1F78CCBEEF87A23BD5E0AA169447091D9D01F48
DE10A85D696075B4940B1A7B34C917ABA41F3FA9834E4DB1A12A2834847BA949
61382F0CC099948E18DBE4729B2C0C883208183E787536209011AD3260FDCEC2
B61162D5E25A5172EBB278239FB4D7FE2935E62EE8422241DB17459FDCF17705
7130D3F2F37FC30C0BCBA7AB6733626404329268F441FB8C9EB2BEE2894F5760
3B77A67E7B99F012D8337690B37837A7BEF1AA91F6F0D714A7D451442175A1B1
EF865445EDBA2C9F4908D12FBEC65AAFD32B2D13FE6E9271771F7845BA8BDA1A
C294C8AA458C3DAD1EE47A5A91B875F035D6C142810D3D474C7D71AA01BAFDB3
F6EA584FB71FCFF8D12A72CCD57B9F7F1E334F029E0E8903FFE59642F960590D
F7FD65D5660CEAB743BAAAF8270E008D40430F38CEF6AFEC51FEDAAD95397882
9B822C1AB12678C5913EDCC20B11FDB0F11E806B0051A3DB0EE2F9EFD7EFA3F6
906A02BA7A6516861F668A71C7D6B094B14FB94BCDEE4943DC71A99594087A0A
F3051EEAA27CD756CC2A4C969C23948002637CA12A834FEB33CC19216DEADF67
49F67164F0356083BB0E84909F10F65243F7C075A884D9C40EDE2BB53290AB46
B939B110E435A6C938075C84EE7265C2594D51AD9144F3A403AED4F6A46CB967
54CD7BFACB9700745AF28DA610E7C83A5D7857C9D1A491585195227837A07C9D
C5DF7A40EA5394485C96847A8E36C6C2A77D5E12C4DFBD2BF4BFE16F057073CA
5ADD2266A3E33FF41FFA11EFC865962008B7D8DDC394C92CE89FBD64F7A934E7
8331825B386131CADF19889B0FE75B3CDBC1160932D9BEB212690C53E8DD69A2
EFEF4B0D4D62F3D99F8E1916F8F80D819704CDB8DBD31F593A04C0C7D6DA4920
BD3F14733A76212EF960A9F1D789D9C8BDB55140A475010D57CDD7D036990BB5
24171AAFC6AF29D1270FB918B8C3B913722B2F6C2CC8F09CA95AFBB8603C879D
CD9FF5DA64798FCB373E29E7097570D7EB69BE4329B97EFB7F129E91FDF7F610
3096A45B7DAA70ADDF6FCE959B0C5EDB08A29C32C4D432C913EFF49B9D3AA610
32D58929A9E03E615A60A1FEF5A947E293DC77112A1698F9048769240E8A25FE
88D70EE7FDB0441024A31EE583A1F0085FD69CAC31A111D98F2099F0E770CA11
7C39400DDEDEF105F87671678C8F586FB82DD2380FBC4E38C0CBC3F1CC174432
5D96D3E098B7CAB194C04B33596101264D2B84B988AF24B2E354A1ACB829E667
D37F9DE86ED7E10C3F5F1E3B0B24C159AA1C41D5746469BBE0BCD540D70F382F
DC5D311E2D43E00B3C8CE8E62A59C4AA33409D7E02F5D6DD0DE22C313CE16B37
2ED2FE4D0EEF2C7C71946A95DBB1FDF0DB462EE1DB7FD292C6F8176820D3BA3C
DDD85018920ED5961E490536BC0FEA04B877744EBFBA53E8DE941EFD21C3D30B
09DFF732DFBB3E8B7294DD402EC708E2077FD4D18046A5AA4DD332DED9E1E087
F071104B7BCD7EFC7D82740304E9B95DCF7A42FB2FE1965F4AE1D53FF1586B79
121158C9E35CD154105673588C196AA4614F00F3428FCE6C7D2E3451EF0E7EC0
44CDFC3B47C188BB9107507EDDEDED083713CC7BA802E945602657190A61F290
68BB4BEC41CDFDADC4442B36968C8DE9FABF41FDE0CCF0D3620347DD1AE62840
318517AE46B97C588E42D2FF879538A071A719E64A4BF5CFC13278D0B9E95289
3E368B8493436EF2693EBDBD75923DF93D1FFF71113D6558EABBD41E05DB2F57
4EB266C68434F2D93A3C0EEA04FD6D4CB80758EDB8556D010EB1585173CF074B
7C2C6F057494408376A7297BDFB527FFEC0C70548158CA027DD88A7801BD1D55
A00B7CBF4E119E30EB552B173BF37CA325D9F509E3C6FA02403821770C99EAC9
622B0972CA4B56C33A81947FACD4E1AF22F025C7E3ED94EE04AA8AAD5CA0866E
8113EDEE007C357491BFBA0CAB5052F32F8CFC8E1692E83145D0B1F65AF4CE70
C0F628FB3E77666EB91B371D84DEE57438280C32C2C9C6C79D73FE4B307B23AB
28E11AE54711AB32F15930EF89656E64E8E61C7681CF5E966FB53D24198F715A
9CCAFCF555E0CCE0296FEC2D89321402D72D75FDC907E8B65F559576BE4C7F14
151243D996CC3E48707B896D94D9351324E055FEC4576B757A5BC655138672BC
538EDAF11286148663EA83E1044CA865BD6A1646EAF7928AB9DD64EEDC7975DC
18E124B2CC9C3CBC78B4D9DFC21F4C467F7FB83486FAB7E75099FF18D8B3B7E6
F84F650C5C2D856A65B9674D00B7A8DFD6A7491E05C0C6FC7B4DADA776A34C67
842DDA6AC4D3AF190E84241DF40B724B8E4A43C20735AA3F111DF1A51672452A
6133F47679259B1445DA68BD3AE4E6020B82C0DDC72835A46F4CA8FA0A2A98C9
BE78764F25F37733E85613210BF6EC0333FE2EE51F24ADD54882C163617B77D6
5D4239C4694B8098C9D0B5849100081C5CC0BA4706D412179D1A7E1567C7F402
0D71C1703B93A661FA7B054A18304354921C79F575FF3A7169EC8F9F1245D214
DDE740B263D9A2A6B77B3E004D2B7693BE034322C0528513D16DEAB16503D08F
B97D8010B505F836441BC358EE23ED9A909ACF18FEDB94E91ED822075BA460A5
FF0DC8A54D62E182F58A1BCD455D2B31DB2688626769B5D961100BA056145425
86A13BEDDCD6246D6C0F868CD809323EFC745E0B042CE3E21B902BBA62DB0CF2
14D8A1A98938295041F9F4829FAE3A1D31954748BB2332A1343A456A274578FD
8DA7D1BC326E7922DEE65FC9730221C5D82BC9D012B7E53C4259E3013CE7504D
DE77D4D3F60B221A77461B21B7893208BA5924E2FF2BDF218F6B244BB638AD1C
E03BF4A7150B448DF7F8922D4DD65811FE6BD6317E9F2352C20B8BA2B2E36600
FA510ABCBDFD038CD6EA005659FB6248CE27B0526C21FF187D1CD4C76DAC0AB7
B75438975DFAA51BF2395A0613AA234D139E2A2F95CADB7E575F7745D870E960
290EBDF70F7AD8989963859B7E9DFBFD1F4732D6C20427057693E337397618BF
47D6F3E797A5B0FC8FF02D95B04576AEB09D6F03AA69F066B756D9F7A6E0C4F8
173F82550168783A6658FE750AF02E5653BF012BDB03CFF036A908E88DE8C88E
19195683FE94B21CD35B4D558AE60B77762375B68DE34CC10C73238EB59F81FD
1E2A6EA2471192F8A72A4EDE70B321B0815EE8EAB00FB5F948C26EA4A11E5A18
D61A43150F9DC3489522D3A8B74EC830612FCC81A77465CC251C23B188C97FF7
D327812EE0062B1A94E3ADB7146472B55FEC7221105C20E06F71C7196BD40584
B8EF7A7167F02FCADD8FCDB861530B82D0DD852C57F3E3AE0B1E8C3ECE73E503
F55D448BA985AA7F1F4E030D64C5CA9BFE08A07C9ABE8051F1D8340ED025AD5C
0A496AC57AB13889A3EDBE2AFCD7FC1F705BC64FC2CFA0F6F75AC8B50855466B
CB9B2222B45A6CC2183F8A2E940223B9CA1D03604B84EFA50930323F22F867D9
614C6F562EA3F401F42C66AD3FBC8F5E938AFE9A75C2B0BBE168900AA53AB17B
758DD96506599BD576407D125D966211AEF3DD7F7B73A0875BD80495B78008D8
E2893BB69CFF73A8D1D9BC573ED311058C3BEC64EADDF52119CCE2FEF41B14D9
7EE4403CFD015B2C9DFEE3D9CBE5508DBBC1DA6277C631D35C90EBB53C1E443B
ECCF4AD7836C87A504C59C5D7AABB0F479BC6C9A16A62EE3F164004A7370D5A1
42D7A55C23EEFE76FDA272AE58820427E949C54106E9B826575999F0333B7142
CA30C1FF860295ECD9A997AEDD3C89859EB00FD6E807DF0C33FC08654D6D90E8
27AE79434866F42EFAFCB79A2F0E64FBE5113CC3452463AD2C81BB71B8F2B2F2
5AE11641C40C242A17FC505CF004D65BBCAFE0D2542740A19072BEDF3D8B42A0
569A768D7EFC97EA2C8AF1E8170178BAF5244BBC5B4A2456ABB9A469B6C49291
88DEBCB7135BF4642F2E121B9A4DE97EC72D7EE5984C1160D2EE0AE7663F5F08
FA24BFFB470F9C920E028ABDDFDBC9565398F0655F5E81B7F9032B07773D3F29
7ADEA4959A2524D9A5F85D277815C1B21BDA136B70DEF59C403FF8E30E6DBF69
C4CAF5FAE4536877262EC3459CEA5499132223FD1C4C58797081F18B864B50A2
4C6D5B2FB9DF1AEC3EEB36259C0BE2198119AA88AED6E5F3C7B551195173DD29
29D17DE5EDE3C785EF1078AFE1D8DF3031
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MarVoSym
%!PS-AdobeFont-1.0: MarVoSym Martin Vogel's Symbols are released under the Open Font License - look for information and new versions at http://www.marvosym.com - Neue Versionen und Informationen finden Sie auf http://www.marvosym.de
%%CreationDate: Mon Aug 15 18:49:48 2011
% Converted by ttf2pt1 3.4.4/ft
% Args: -b marvosym.ttf
%%EndComments
12 dict begin
/FontInfo 9 dict dup begin
/version (TeX version of August 2011, based on original Version 3.10 November 04, 2007) readonly def
/Notice (Martin Vogel's Symbols, including this derivative with TeX support, are released under the Open Font License - see http://ctan.org/pkg/marvosym) readonly def
/FullName (MarVoSym with TeX support) readonly def
/FamilyName (MarVoSym with TeX support) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.000000 def
/isFixedPitch false def
/UnderlinePosition 0 def
/UnderlineThickness 0 def
end readonly def
/FontName /MarVoSym def
/PaintType 0 def
/StrokeWidth 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox {-572 -214 3014 925} readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 89 /YinYang put
readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC1325EB8F274DD24A5D21C056364
13EFC099729365596A8A52075A624087116520034680FDBD3E86220CBF46C2E8
2BA32413E26C0AE960BB760BE98B2E1348D6A21CDB5429260899F7FF77617B00
E876499AFB997425D58673778E90672CE2F26C816F6EF6C1F6F0724D575749C5
5AE9D8CD0337709436E75CF2354AFBA7974814727450620BF79E10457E31E899
430F90AC9865F70FE6B6777C3B647DBF5479B987AFBD6DBAEA380CEC42950CA1
9398EFFA54835435C20242F3FB6E2D4D0F33709F3F4688F2B1ABB86C1C7D0C40
CBADFF3859361F0E294F6421F96BE4A820EEC1188E59979880AE63401B5B2BF5
3AA062505CAEF95F51082F2F2C7DBCD0265CC4A4280B9E7BA9AA4A55AA351944
E9434319CA45CDF64BBCA106BF20E354841689809C65F0CCA6D58112721C9987
318B070A20DC356D4F494A78CCA77E8F9741854CA51B991EE73E30821344793F
AD6FAB5C17E613D37AB0A7C0CF510787AEB1646AD5123693726318B15218F38C
A647F26041ABF557285D5CD361A4AF64FBF5F499FE5B2731B7A16C2004F81AE1
B8EFDFF44C5DD939F581257797B71E3758B864AE320361B778A056F6E6B71830
1ADEF988E22EE2269B0C66D5F2A30DB1E6E334F4CE1176121A2C97B92B435EAC
31A4EAC7590CA503DCE486F22B06F2A4771CF854FE2486BA5C26DA5C95449862
B1D82D0A95CE800AC28011C1CEEDD003C61EF73400F19116F00A761CAAED96AF
DAD86C32B68D3D7EA4280488D18686B259C49ED9DEE46462D60DDB42A4D5DF14
51CB00F77716270BBDCD97679B90B35C3E65E04C561233C3E5119D7F2DE9149B
ABC0EC8B0E3E69D117E83B26AE30EDCB46ED7952DD4F10F3A2F4EA31540AF1B2
592E1FC306899AF4EE52EF7C1F4F8E7782F0CC1F697487C3F64E52F280D21ACE
AE6F4E4B0F7FD8B6C20CD382EB8EEC2982333428081F09F426B3AB0EE6EF7641
8EDA7CC6B8795043E5FB6F899C39B3F313312DE7DEF9F458994898AAFD267FC4
B53A93B97A61DDEA5F4798BFFA9FEB261508B0D522AABF50058094FEA7BFE9B3
64A389CF37828097BDCA20108A9AE07C887741C0A255A16DCC32BB7BB54CE2DC
59D09B2FF8B6226920324F65176B760B692E3896BCA6B355199C17D9C926280C
366E3242D2030B576F5B789A0F91684979154D98437D6BBE4C8EEC74B6D9BB7D
6E553F906E74846306E52E324E00D300A78B984ADD80D35806638D44322502D5
78F815327B4D933326D9CA612DE610C064F95504C55B0B33BA921D3E00537470
46F98992021217D666CAD26486FD8A4E1F4023DE10B7DC99B2AD1DA3A35E032B
8E1D2064BA0B2EEE00A684046CCA214F7DDCC1A0BE0EFC7B05BE85D1DF560D43
26B51CADA6D39CFFDBA38C11C7238C738370C48C575A049DB0DC27EFB27E0917
28626DDDAB2F3254098008565B1F8768FB56B3F2C98AEFBBC8914D0B4826C417
91F8E112853F74C475451EBD128D0BDE68372770F8BB006B180067B2F9E68C55
28E0DD9A56E20DB76269020CA5542A08A0F20CF0D414B21E921D342891126EC9
BBF5C648646ADDF9A390B8BB8CEB2E24EC8B5FE5567ABD3D9951F55183CA0B90
98477F133CEE715E5C26DE3A10290AE7E3E01879B5DC8375014D057998D284E6
B82BC7CDFE0189EDCA472BDD5A7B8E16D4A95E994A095D9EE5FB336746BBA506
603279BFA913E858ED5302AC8EE5561F6A8A354DC78A74DE836AB2BDFDE4C7AC
466E898A32F8B178FEFBECB1DC8F5EFF5AC0E53963712A6EAD0F218DAD278192
6594A4119E9E706EA336F89880CE4C5B805C3C54F112F7AA206FB1389BA3791C
E905ACDC05A47B154D50CC20D94E2AC1B83FAEE7B897F107662E8467FAC8D9E2
AA0F90690889D3DBE624E72E3AD8F47C1D8468D4237442FE1D337EBD094C8C2D
415C6D4470DD8901269120B0F07644CF367931F3C2300CCF5C434B6FF1BFA35B
B75A3091C199ABA21AABCAC412960C8DCA687FB2321C2CF62467D27812497EF6
A45BADB374BD1C3CC6D8482BAC83736D5D77B4E31498CAC8488794F91BFC92F3
98E53497A5688E0D0D7CD1CEFF5E355D691E098D1FB67877F38E9ED1AF304882
19EFD5FB94E8C012073C0C3643A35CC169AFD69C818410A1E95B3BA4EE2ED540
CB43187D767EDE855B520ADFA07DACBEC45BBF0C25F7D3EE477C9DA3D871F8AB
4E0B4D591478C3BBE529B0303812DA577F2F42423A83972F2F36ABC8703D5AEF
C4DB3A56E2584273230485F18113D43E7261CF36022E879DA552ACC6FC5D8C67
AF31DEE2B4F08790D163578A5681829CC565A712B56E226745D82323FDC64C11
462CC74BFB60D38C2AA5F2CDB2BD662749FDFF8D502E7ED6AE24C15111AEE8B0
120DD8E29CC460BCFBE587BAAED947CD5F7DD882644EF2DE599944404B7A5B15
DE0DA8F40992ED9BCE277024155EE3A67C4316F392CCD22851666B910BEC1F0B
5A22E5745FE8EF4367E28FC522073FB1D7F6210071C2064C94DE4D114BC122A8
BFA0F031A3DBE8DC1D6FB37B2A939790B6FFBC65BF856CC55D2B72AC6766790C
81ECE3210433FAA59CAC1BCCBB6E8BD3500489A6132C0F36D15D428B44DC96A8
F6879E2135374C70D79D19EA9EFDD47815A8748C7FD8CC83AA4C7C9C61A51649
E73416E15EC9D49D2F35DDD0320956D2148DC7C2D7EFE859F41ED0F630C0154C
37F8B2D7F674B9D137B168F36A6280DB40F8673345263FB59BF0D7FD22BB800A
96B2722965EC2A6E3A800AC4C443525D0FA14085EA1A862537B4CD10C14CA858
E82DA3519174D386845193EBE4AE0D98DD4856627B9A8F49219B38AAAE5471FD
6A61176B6F6900D5D8FD1EE5A172D0792811CF61B3714077BB53DB1995E92330
92F528D6A704AA7EB260B129531E36E9AA37CE0AF7C4ED41B2F7F13DB459A5F8
DCEC4DB05F457DBE548C32954C60747297001747473ED6CCC057F60B0D5EF702
70B40D4EFDAA421F4059C474F56C422812B050DAE9D1E1121A5E880CFD73B51A
92E0508D86C106679FADF3E2C108112B3410C6DD545F7999F3EB933F247EEA14
8BD2C80C06E54E7126C3703044B72D0B7798D38091A3CEDBE91B068D1E432A2C
51E6054D332ECD422011A3968D9FCAC28875B34AB84D9594FCFACFE9D03B9851
FC8FEEBF287171660B9698E66AFC2B9920385876CE72318686ED9E447F8E1854
BF77CA6B15C104868DB82A285837E62986F81259F10A5DE4570C8DB66373ECF7
838754B1355618B8706769788FE84E1E85CFE56E137BA47C2A14D106F5549E6B
0989E89F2E5E5E637D1599298AB3F54B995885F7AB7B5C5DD25C2852914D3225
D07083B0BF8E4F1058E7DDBE9C697C5D32A76F096ECAAFC065535AB32B25336E
ADCFE52D2A9D0C4C94CB706120B5F5641CDE13C4569D54081804F5FD98DAB720
996E76C827664C5B9375B0394B8BD9364298FEED3B9CB12EFD2936C1BEB264F1
4183C30E5343D2CE65C1B010A5F5C34F34E04619365218791DA09A09C7AB12BE
2E64A6DA55B6DF7B7BCADC8A32BCFEBFDB16A0642E5CC69E5A25A66F748E82FB
FF5F294B5D0D796A90FB81A5A18E98E97357371A52F99FF290E8438626FB5F60
88590EF3CB9A8D54824B719C8B575FD784DA7688FA287F7069D48C54219F5E55
187DF09674F324FAB81E61751AE6213C188FF3D734E62C1E3E2E2BB873147AE0
CC255E05EB634C16740A6F22569A9BD942A13C1FF22C22F84C48B07CFBE75A9B
84DB541D8D299C5C5F56DD69E7635073B64FA6F22E8BD8E2B0B0F2D0749B7880
2208CD8C7973617B30F56960009A11B4D0E76C5DBEE655E470D2748EF972065F
F0FE37AF76EE986ECC5B669132039391A0ED0E7C9A7656F487D03CEF1C4312CF
8BF51ECD810D5C249C1F89B86B492E07E4DB88EC03A7608CE77EF1E843C3B7E3
CDC10C0E83A3C7BD7646FCB6C28886EC210A1F84DB21D885F435BC2106218510
01B6A402E3A07D0F204A3B093D596AC9BEA869A5C6AF8470D26527E73BE19DD3
8D41077DF96CF1DE87958E94147897470374D33501DA6088FC3E487D47C9849D
74C89F5D38D639C22F88B276E5A25C3F34FF96E72458EC8813C0142F72DD544A
34124181BCC4E8EEAB50A684882F5AFA6776BEB4765C6ED70B686E51ED49C551
3696E3AD894BAE642F2553ED0EEB16F747070CCE8249E41DC16DA43F79D4C8CE
6C8C9F8C6B7B9DA26D854E9A5B2B808890A43D9E7F59104AADCF7974D0A722E3
6F01DF05AB58428703B5F8FCF7156859F14A273B58BF958D3986BF189636037E
95FB425AAC96FCEBEC002986749142F92E2DC5B8DC0CD3FE27522E90E143F7D4
1492FDDAF610CC80CD098D1E968B18EE09AF09D0A886F58E9C1E574F41ED7A56
68110C3DF3982180C73243D7AE3798F900A467910D50BB0E97CCFFE2322734D3
7A129E9537CE44D5D84E9A18DAF2A99D8EE950A877F81CCDBDD46FADABA26B54
33D34C2AEB076031841EA02F1BE46D2BC0E824554C74679B25590F079D0C1EB4
C3D40B039889DCE822D58B48EFD185C651E24ACD1D0A7FFE2EB0620E8DF2FE91
252495954BE0B8164B93E2EB1C89AD116ECB0057E4133240C63B1F4469685B58
774F0C95553BB1601A34DBE6CD348E56F59A92AF56CAA782B3B2BA8F7B4B80EE
209CC66F763542D242050EE1FD5980C61BE10F4334B48EA578982D5FEB53407B
C29192867A109FFC6987D5E004177EEEE391AF71FF491ED33E9402044E6D0DF2
7B789D5597FE88BCDAD2925CFF60F5A8EA6684373B4C13236CBCC78A8F93CC75
F90C9189297BEEE43E86EFFE384B94A8A7F314CDC0E477C500A7DEAD963F26FC
C5FE0228634C1A1B606249BCE54D2BD2F83E49FE48F00155EA8DC3F8EA9DB943
789A191542089E218EF4054A13F763461ED764B530D2B46DD8E4FBB6003E4166
DC20E05D3E6A05FB23C6ADF60A26190EBAE17A9445723CF5FE9F5CD13B97A878
4E03A0816ADE7BF495FA39F976FA0602E5F63A71729A13D3922AC2BE00E1F189
F9A2F2EC52A0D32733B6EA08A261F936EDE7E4745E67F5ECD2DA32EE779584F2
69C4301C5AD39C601FB86D4090A52F79C5C4AAA33FCFA22C0A4AEABE4D4DEE30
8AC29CAEC02BF081FAC0EDDC71FA7E4732979E264B6DE0CEF2F614525B7EE32A
FCE928FB5C86C906464C725F7EF33F3C196507B099BEC7CD38699015DDFA5E32
143ACCD729EE4E66D4E5526B66BC38B0CC9669D8D3BCEAEC9258D51D75B0D237
AB3A9CE8C36492E99AED33256A1A6F3303F0C3E689F61C4E6087B3CCE265D1B9
CA8F039E9969CC0C06B4CB978FA7AE5136969F149CB186E27727E2C39A2B1E1B
C2DE477B119746FB1460E1E8C3CD4D4201384F222FEE9872706B290B8C9EA925
AFED9C9A2CBEDBDF0242815DE1CC6EBEF110CAB8928A5226727E2739D920F7E3
82B93BC82B897C7A9CE0513B4F6ECFB861950F9DE73EDB738A98DD288428DC05
CC52F59D616EF85F9DFBC28F289C8FC67AC9F910524EEE46F1BC0755B68583CF
4437B64310E58674B98FB22F3ADEFBCA00A47E7C02D75535877FB557A128D43E
C71195D9FFAC46E8F553085D5E4852FE50799E3FC1FAED0AED079DAFAE51D0A8
CDD777896E2ED784EFA156E3EF0EEA375E9A45032A472BE75F7F8587D9BEA936
654B07EAA5F9F0AEE1FBEBA609184A949308D93514FEFFCB76540332FA307630
057A4A2ABC101FA806BC4326E953F74410EFD4061B96AABDE97FA8A729C15AFE
C49996012837CA40EDBA2A1DB07E9F118A032666E0066E2B47B363C205488597
9A7C20DDCA027B126CA614F7EB5683F8F26340F223DA1AE50F58A5EC8DC73D95
93105D9FAB8E31BB1ADD84D05755C22717133E46C7948D2B434506178F3BE255
D840A00B9C1D3C7B56E636D32ED9B73609519C68EA08D7FFAC1EADCA89D57D40
DF45954D9F7149388E51DFC9158443845E8C974B3C9381313E1B12D1FDC60266
1832F72DBFA86F0CA548527B304A9A4FAD2952923C470D61BBB418D734678656
F41B2FFDBB3D94533608EFDF71848963CD149DAC9BF7F1118ABF91D3016878C3
0B49C7F148938D0AB54869F216AB66D5A27D2EFC994E1FF44FDB0A9BB4E46A7A
B37922642766E190E63E9CCC9B25A21B8BAC49F1A584E011AADFCC899363829C
E8B08139D3D04F489657CC15BAA5067B0A4C87752C54A35490494A4D567172A4
B7FC4DF2F5148D6897B1FAD1970A3567DE12F7EC6CC7D92B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /asterisk put
dup 44 /comma put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 64 /at put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD038C1A835959913E0EBC5AC265CA688
922695E6E9F552822D1DEC8C00D5A49BFEEEE5C0434D0088A8D21CA49E4E2B82
093323981CE212E327FA5C64B046AA88358181F16C275FB6E35BCD3BBEA2769F
A6D082D0A317892DCF2C614732F3FBAFEA04390845EB11CB8207737241611763
AC12A4BFB728BF4999D599F2D9400205ED82BDA70576CF0FA55E9701B9CFB4E5
9BBAD61751D6399672933EA7C28B310944BA6F84284DB8BB7A3F2F35026A47A3
DF9797F5272844D31B0991EA2621B4AB52911C61704B4459440CE6FB005A43A0
861A9033ED76B763A8DB65CDBAB88C180322714B666A2F5FCBA48BFB38EFFF20
96EC1983C732112C6ED490BE8FCCBC2CEB4D2B531A1734F9E75EC3CCADDFC18C
036517987D3138F766C4267C69051C6A9441D177D4C354C376C027141314B04D
261EEFA7E4AA3A5336ADD33204A9E3BA4FD9478EEA51FED4CCD2D249ECF4B22B
21842C8F86DB2D0533F4B7E81EFAF7223E9D7B39DEF7203248BB6D5ED9A4AFFA
BFF62611EF483C9711E1B0D84F44171C48CF7498FC29FD565D68BF89BD37A2E4
A0B6BE71A47B68613E9C51D21BC5FB8F14A51C2FD96C5614886C7A670B8BE096
ECD3B8D6F6F508EC1F59EE227E4F6A352AE96DF04607DC96A66E8520A4BAB581
41A8AE9C4E28C7AB552AE345DE6D4FB84B28C6B71825F190AE74B9E4008DC1B5
EB22D5F83D6A295AB9E01BF45591DFC3BA81CDBB6D525E86E041A6DED9374016
F5C9D8FDE349A20CBE84573F81B68599481ED86606ED644BCDB9A47930879388
2CDBA530E9795CBEE9F96BD9BA74F7B3E81B89B3B941CFB23A627753C22CAFAF
4C19766336E62F6E2F8F8FAC078226E4938367069BF6CB92D44DA5D075924602
E53DD9BFD2DAC29A0339A42F6A342FAFA2A079D64952A6D39CFFDBA38C11C723
8C738370C48AF085986E868A53B43FC51E84820FEA672BDB5BA9A73132D22C60
694BC641C156B137B35947C8A8387E4FCA3C73BCC6CC3B8906094ABB1A7C158B
382026967E4FD41CDD60D66FED2F7646E8AAB7BCF66D4B211E22D844E94E7737
64ACE9584559D47C3240B0D4A30A382DED5AF585C938A805ABA236AB35C6DCBF
A1165F47F8F52B0787EB4B70BBAB79A1E4EF615E561F645104C7F2E57AD5E340
0B0394AD9A0DD96968E43CF3969D5EB47419A4CD8D765464DEE084E22E30D2B4
18CAE20B1607BF95DD4FE31E624D9CB0570CA13475C5CFADC454CD775D439D8A
03FC3CE05D592ADB01BF6DD12869F9358CEBCE43687EFE54BEFBD069C7594CBB
01B8258FE920301DC50C2B1EABFECE5E9CC4B52E9708971E38E00BC102AA3E6A
DE73FA223148B032634B7BF5C6300F77AFEB429CF324B22D06A1983104FD0583
F633D0977FE3F85330AC7ACCB044D0A4EA2AE8EDA9524B5A8F347C1E8C514A40
519862E78DCDA3D406E10BEF07F151E6F63A11B41DB9BE69D6A445F0CF788373
22B7486A680C4C9882BF1B77C8F3CDB88D22F4B2529C19AC841239A7BC398351
156719B1CEB676CE2E2ED316B0A07205CD4A5869C1FEDA857BDF16916F724BDF
F3D8C391A5FDDFD39E78635DC7B3FAB1073904EC97BD5E0916B22F0169898B8D
127C00F3B953C1EE3DA9E899E2C27DE59DBA46663C4F4DB64B2DFAE07D0AADF8
9BEEDA818BF335F2562444FD3B95DD4D57D5C9B29D359A568F6DE875BA5D04F0
3BCD979593080DD396D26A0E7A657DE220EC3ED7864A177B0724F860C7660135
9426E7A7D188067F01FBE3C9604278555C81C25F6BC844221A7B1BC59FEE4F76
DB734558A0B49565547E206D9247D7ABDFB6A57909BCC64A66C4DFF4D330B3C8
7E992DE617DE4CF3D3B7A9D78DAC108CA1FF948030A2D7490F0A692E95B646A6
80D15C8C0D2BF42FC80E5850F9C7257D0467A7F3020334D2136641C1AAB438CD
124789D9CF7F8ECC4E9AEE2BABF36C39075D9EC1A987BD411749595C4A91CCC4
E24C5018BFA95A4364F55430598B2EF22A81CC3877B422E28AFA3499B6C472CA
D02AE443B87643A646C3BFA70725B68AC948A7CE4512B6791F85109582EC33DA
A908377AA57FA6984FE73DE5C0151E354118C1BF0ACD5BA825D8066398C9FE23
2C59AAC22C0D6081A94EFC1C50B811EAE8A259E6ADE4F8C24106E0D76B7D5065
BC569B735C7B85BA97D4B0B9414DC9C889C9EF896E2B0FE4E7F1CDF5EFE438AC
7D852B7B2250F63FCB0B9F06D1964432DF4EE3F022095BB0890534DF4116E310
D38F7CE7F1118DD5A508FF77025B7681DB61F8D448CE3607004E0BCFCCF8FAF0
717FBDC1D7EE470674E967E20DC64561972FCBF94E503AE026C02850956A4E7D
43A6A486B9EDF1D85B59A90834F4A5C6383953017326E6E5FCA3C6AD820A004F
7AD4B0CF72722718F22BC04856ECCEF7126A96C576CE283443B2F8F9E96DA847
24551F7C6C0ECEA3BA0E7FCB8FFA9C599F2CF7DD33D7C3843159FC52B94C1201
D19F2A70D8ED4E72E74C1955C378D81455F22E663E7CF3B6796855E211E67511
AC77691984E1D1C15FA740A080FB015B53F27E1A633D0C1D35C18F769CE9CEA6
0360F9E92CE1691746D8B7A5F0E76AF213582E46962647F86CEE07993B626598
42A7B90F8B2165401C7010E0B69DC1F26270A52395E724E633F2433AAED9A6D1
32CE9F0278C9E383B69785F0870946085A19463BE7A312FB1E7D3D39541030FC
765C5E612B409C28F466E44DE4340765E4718AFAE4C6FEAC83254AE23685A25D
5084AA21B81AF837AB46803BA4E509E24B79BE0F631C4878708061DFD58C2E96
4FEB500B32ED3ED63FBFDC0E43AEE3EE3CAE18D378A080194DC83C7784B773FD
7233E2A104F83FFACF3DD7A6B38C3180F646DFF0F21561E779955D2C14EC3598
9C7E41FA568BA1FE13F9FDB3FD8B52553EC993218216A45C23F6D07CD4466A31
B0CFF132F8AE3ACFA1DC632F59084C6076526E091281A026E14C5E8F4297C55D
F251222F772D668981CD337C68CB9F4DBFBA3A91CA0A60CCEB075B7A84979499
AB56F175F6615F3E7EDC97C7E254F81A75333C5BC408C1C6304C2A36BF50DDDA
208C655EE29FA1208675617ABC4C84C95593FA09C47291C5E468788F73AEEA96
DEC689CBADDF0CDF2192C49D9C0CBEC688996721C0E55818EF35ABEB2FD02FDF
DEE7EC40A08479CA21BCFD38CB378513F9D26F50FAE91CC94D2183CD8B5B60E7
EFAB5E9B562B84C5C6D9CDCFFC069107D275B70E8123B0737E199DE2C4B7E8F5
3445D83F104894F2F7E99EE85615990614D76150E86063F377E7975C4CBF8787
6E09209CB5434AA0EE6F0499EC7110108C993E7AA17940371BB42DD75C2FD020
4D42993B191B5EF308D142DB9D4815AC909D12BA2586A0C7F7F5E5169A44F7D3
4993943616778FBA3F00FD943C42A2648E50CC2D32A553DF2925A262CEFA6724
CF4E697667C63C17D68AD8E42921EA6EC43834FBB4242ACBB1F637B570BD9362
F6B431B7C803726B8E1E322FC48545EF5E64B58748A907330346E57E27ABCF7D
6A278B6A677188E7077073C29796B542A766B8486482D7E71301ABBF254F7781
AF73C4748E9A42FD2D1DCE7B60625761D9E2287E7E0B508A9586A546E9065F36
50834685B758500AC9FBEE8C5E1FE3541876AF0A476F9CFAFE73C47C59210ECE
A3F89B83D3AE9C05B5A6D646CC8765D5B7B98DB5143875F31B911BA8BC0AC13F
8812FBF1E17554128EBD5BDDCFAC0D9D1C1D92CA3FB714A273BCF3D1CE62C813
D2723D458A13C665A529CF234D74F7A644CCB639522B98E9D5E2B95578D76E52
A4E35622E31668DA9417A7047FE7D92A8CD4A58F11F26D6A83F2118FC68672B4
B527168EB3F78ED67A04819422FC55F8F4E847E4C20E5C2B283535868ECA74B8
0471B4F621C9C5BE2801F131887EAC45B897DAE4520836A675BCB9C6A43AA9C3
F1C80CF6AED80AC53449C5EF2ED088EAC5A0711AFDF5C79C3E21B26AAC6D1B76
28A101819326604FA9B8BCF12FF39F0DD8ABFFF666BD88D2559566A600F53B0A
389952B76D2932ED5E725365F007E6BC548837D36209C8727D1B994B153FDF48
17F99F67EBB9FF0B9302BCA72DB2CDC8979AE91ED81CDAB549C6CB0E87357966
C5CB098059A5F48454606AD613038BA4D6607E6BE80502B619ECA1AACE7D30A5
9C48EF9F65DC0AF3FE0AE8CA922E4635B4CDA6486A8FA1B41F2C3833E1C595B8
D81D6BA07788AFF08ED9DFAD4C43FD2B73234391EFEF2CEE3F57923A0F3D67D6
D2B8558C1D3A4A67E9544837A57076F3431B13FA431B7B117E78BA17A2F0999F
2B1237F54136B6E08E8E2691CE8B2E2925A2CDE48523A235657FB2A9CFAF0070
8053CD47313F6F870AC031BF10D6339AF1304412912B188313F36C04BCB5E9B3
782407F6FAC2A29FCAA097F96297772FC1EDC679BFD31D619B321A767CD35B44
5EB9C3D3D0F3A5DF95AA635D7180ECD780983FAE199DDCA73C58239E679456DA
BF4584C263EA4BD2E42E7881645E49D2A38E90EF581D1820C7E5DC20816B673E
203F410DAE582EFEA6E3C91B7D7748614E9257FB032FF913018B2FF69757608F
95D3D8BB710BD1259BDF9C9A1A1AFE4EF717569463945514DDC1E4712496FF7C
FD4C1B747EAA82CD6B0FF6176C13E0EC23F92954A1B210F8F1129814AF5DAB04
213698381661EC0A836E43CEF8155CE1A07ED92A19D3CD69D4EDE0422069D315
35CC903F15C48ADE7D8443799602CB1B06C7FEE52AC0BD5B0985E99A8E7A94AA
9C13F77D38112A3767CB33DA4270464EAC87EB7D672EB4E5D64A5876CCF2EC48
D540663C060FE0F207734E14A8A0A3AE2B49782FD96712F626B66B9940B0A7FB
0FA079D18595AF6A7FEE93D51C7A6AEA50BB86CCD21EA4C1C6C326F184C6D09D
091510412ABD308825EA4F97D93858575372C757EF41F6918B56C95877234F9F
D602497A80E51D534137531C7F95BA428D6FDBEB796CDD9E70E3B109EB57D83D
DABB419D1D4DE60A44A7DCA8FD416480C30E1455C869CE63835D7CF475D4A065
B4E8687718CE61C8BB72AC2652B57E7F3405F82F8A00F1AFAE38948F5624A2B1
FF6E4D944987BD44B89BAA65EC8121E795EA36E565466A7E162F654ED36532B7
288B938FA7D88916E879A2F2052EAC7936945E3746426C80ED2A6160B60D140B
8362D7D67F169B385285BA9914D83E74025B1EB249ECA88D973F0BA454A0A1CA
A980D0D25137CD928C0726D2A11049D805EA589D24A92E9ABF275EC8E050BDCF
4FA8F26CE5DBD22F5A3577082730AA7D1DDD19E6EE6B65CFD0CD82F1D054EC75
FA47CEA28B746F1B6AB666AD321D160EB43F9D9950865CADF892F20493CD222A
A98A45511E5D8DA387BC053E36BBF979B5C44CC11D1EC3D405EDA79A19DDFB0B
A3B2AA8F74D2ED3D90D0638C4D6D0FAA0FB8E417C3A71D8F023889804055B477
B908BD677BA0A7F41B5023E865B6B3AA56139DA4C74E14253CE11A3377F26981
D3F38D242AE60E974CBEB4D4416D5B77E94158ADCFA23E93CD8E0C2AF7E7432E
43999D71C5599F897BB493636CD974C9E2E90842B2538A2A2B4AF6ADC7905285
0B0FE7246FD0672A793087B1E1860860522BD5884B6F3A7A44F0DDEFCB79C5C9
06B645743B96B5FFC5E95177BB86E8A6912CBA17365A7AEFB66B2BF37BDD4334
D76454228C0EF1D41235FC0D7163A721C28B75112E6E09CD5E8C7D70EDA57F47
C9849D74C89F5D81108E93EE11CE51986032F2F701EEA49DE05578419B28BC2E
9A0450280C09E78DC06D26031E0455B85FE46FA15A0AA214C0B1793EC99C5BB1
00F3C651C709D157D643FCDD01318A5D8D74326F71E9110D1FC3E5E5CC46B55A
212AA14A6A04EBBA584384DE943278858FB48577FE880403351D1904039E199A
703B2D816C88568F69889E5EF21483E89319EEB7158F568E5F1FFED6D2358A16
57D1C7F0962611EB8317659BB5D675EF6E3EC4F6356A6AADB23A84B39E52800C
087E16251B942B805AF57D3C7C1EB58B470F531DCFFA514807D7EFBEB3017534
4A0020D0FC07391440E5F6F930B015416265135208B91764E28D2B109EA58DF3
B2A5D6B89738CDEFD0051D3D07D444C5340CF7A501FC11B881A7F030B8BBE358
89CE8DEB6F4DD2B7DB84E82B5F54E9EA5608EFB7444C6690FCD32074EAA2058A
ED152388F0AF5284131EB719F89DF8643FD4B9189A8D8653A2589B954FD804D1
FBCA7342F9A9C62095EA42A8684712AD09DA514C34EE8B4E4307E1CAABEC2EB5
382FAFDBE80D372E92759949641469475CBDA17C17D81FBC09A460340D4BDC13
C65B86521D7B32CA30878138DCF5FDA902773BFD9988ABEB17439B7E78137382
80B45F030D30C3426E6B2B95731994AEC6700A5719931D942B7252FC98369411
C1A3E84EFB1A31489505DD68A5A9372CF617BD1ED33D045F5797C72C8394E078
ACEBF8B53E81602C30F2C30631FBF973BC6DE97366C22A0A6FB0C02F0E08022C
8D81D73E6ABD4A141F60C6645ED538602CF78FA141530351B769F7BDAEF8F6DF
96A56E3E71B359D49FD57C7189DBFB28F01CF431AD832244F3256ACDE924BF3D
41D92425E94C69AC23068C1303BA8C375AE16A73A466602F3CE2EA7922BFD669
F0E06F99B207DFE87B1FE69F547FE7853694D4218AC3D1E46D60B1D63385168C
DB0E3CC98E10B35D69804F6623EA4C297718C619F9EFA48AFA97245ACC686EED
B2A12DB461306445F4A5048DFB06A56BB8B17DC0AAC05678651E6E528B6931DC
3FED9625DDBB560E7BC7C4D1ADB873A3AD9FE25F024907DA8C005A9AA86FDEEA
09C2FCD173CD2386D434A046F439F89E110F4A63E27BA3E1ACD28D17D38E953D
B8AF436AA13DA3922DB10CB8DD694FB0A2F180772E0813BEA0AE1F8AC96C9687
F8248F7E61B3578F9085B688613E41068EF6293AE93DFBE39FAB4199457087B7
87CA98C32B44C488FFF824D6A700D18A0450213D2C6FD9D64CEDE487AC989CC4
F02906AB71EDF495FD8B7A03163227128B0C93534266D64395294981A031E494
423530D35CCC12570B855892498721ED5384125355DDE084F95029B002AABEFD
9722EC422E96138B33EE1F8D482141FA7B6EF5DC342A0AFE086466C985877AE1
6BC30D56A00BBFA3CC9B64C9F2913849C6AC2C2368DB7125440CDD8CF1220B3F
9F975AC7F07892FFBCB9AF458E53AB98B4B6A198FFB61C93A4FD731C6C6E608A
50CD71AA45F7F9E913E4A7DED80D01F5EDC17C5A124214226FAF4179DC6D0D5E
B1389817CB00DA2AC06EF7D8D43DE46B18F0116F8ED5D1346F0F0AC766241AA8
2BDE08B3029445BDBEDDCE96451476595172E52DCE361C7B45C0655AF0A18D20
693E3F9EFE498EA1D2560E36582F295783A831A405E6E4DD7D89D3656529BC5B
8A0847FD89358A1B6D7C4C9F83EA0441181FA4F2DDA7EA78EEFA938BE7092E44
0F1451B51A1FFEF06EE4AD1DBE15C308F9433D9BCF0BA7EF81F6212DA66A7A0F
6FCA4A04FC8866F9ECC1B9F97CD576277E18E32C38B7895E44D8890801D19710
22720AFA18D13EB5FE5E9F70808A9D301802D67A095CA0BDEE26A81BBFA857B0
3DBAEC5520B9C4CE1FCD72ED835F3215BEA3EFD54BF2CC79DE4BA75E7D90AF44
A711C045A6D8926F86D631CA2F6C29E138F384303811427C13010A62D0A3EDD5
DC9E5E9DA7055D56B801F962543E3074EC1DC29F7F11C5A43130DC39C18DEE1E
C01EF1E5924E04236331EA61B1C2BF425B72649D1F7424454137CC7F7E4DF945
8F5ADCD797B0D40A326C1EF76A69A69D61E9985991E2C568743623C114E375C8
4DDCEEDACEBA76CAB0E6B4733599DF8DD665BB38DFC7AA789927295011ED9C8C
D6FCCDF38E734D73A8FDF37B41EF537D27CC0FBC79E5463B52F3CB3EF254EB97
157B9EA6B0366A68689BA4123B21D6638EB4439F0D86F46DCA40BA6643388F24
EE6696747FC35B7DA890B4F5DEB55842D44C4D6C7F7BE9132420F1F926C29D01
702C4D0A2C7133CA19F2E70FA090F63C4D8A9B8F808873EF125D1C4EC3037860
B94B11979E4D58202FFFA3339A385112D0DF8C9965A68E5BCC9361B692118090
169100C8549963EE950028F932BA869BFBB63094D4237F5EA259027A01336635
D1420EE59968DDD159122F6043360471E71A76274A8BE4362B479BF9FBDAB63C
D24527A0A6E175B383E685D68BB8B7C473F40595DB2775FBFD2119CF401A5B0A
5F36A06740DF059286C0C1A655833C764D4B7D72C6E7340571BD144C98E98FF1
825963D766B9A569DC90CAEC33011DC1B0DF254F3F906DE1B2629FB5F7143542
B7C8661D305FC4AA9D3A143FB274BA0529888BF3B31FEE8DB7B0E286C84C9CB3
DA05907C35EEF9C41329923F909E3E007D6EA63BA17CAB1F43AC9DC32F13B9C9
2B8F641BC6DCDF6309687E04B89D69A293053257D9AAE226B653CF324ADB9518
9FD45B9060D328220992782C83EC9281FA4C38B5F9A384D497EAB57AF6F492E2
4663E0E295EB9722C59DF150053CF89AD4193445B932F2A0AB91777AE660CD26
F7F0EBCAC16946F0A26706C7CBDD2111DD5123DC6BB26D534E98089ABA57315F
95A76DE4390DA55F90A3A3F1BEB2FA3D32C7EA1916A2A5D72DEC0854B22BDF8F
3DF4BBC4FBD9123238C2CC5E0650D64CA1266EAE0630835323493718C5F22C9A
16F29883019613B5F1C0409C1E01FA384DFA7E893778D427325B4998F1564EEA
A22F4BD132CC912B7082EAF8F4B52093D5AA8DC82B2FBF85C4B22999CEB45A92
53E86954CB9A7841DCD6E30ED5E681FC75E62D8EBB0353EB12C8756B22330961
20C025BB805065D5E2258B4502E657C51DA37D5411B85B0CA7761A143BFBEEE1
5986523DAC6DC7144C351A4ECF2651A245E3C0476EB77736A8C80AC9D793153E
997E7F9C1356A803CDCC37CD64685D15BC3DE7EEDECA3D6F1C7822F4858EB56A
FB1B21DA625C32726A9AA3E60331D2DDE64EA97FE97DE8C3B92EDE6433333FE7
A132E01A44BC708A23217BB42FB29C82732E9811526B25D1DD0C54F51CDC046C
B5F4970BFDFD15F675355CFBD81954FB423171B645542B786E57C234427B24FA
DC2B1797D7228958917032BEF80D9EF6EAB6F67D8124F1B12269FF04D8F06A70
FA224ED79EF29CAFB40D50F149EA5E448D4AF2CA084D55C432D7F0743349D8BD
19CB8BD2239961BC2E2B4841F196E8B6DFF1EE8098B0CFBBB5FFAD513F7D9757
B4AFCF9D2989193DD6C8B7CBC576617A8A02AFB8F9F976C0FC3C0360069250D4
EC1B6A9A9BD47B5D0DCCCFCF524504B7490291D92478CFAED4EFF3775F5A7948
91FCCE75236E90B46DE92B936D6D534A002628180F5D8756DBB26BE4159B11B5
90ECCAD96015D8399F74E3CE032728E5003A3574201D6D8D1424A53E45BE569D
91D1D2BB3C502A0D0F9EF49064EFD73D93AD267E3091ECB63991EC0F262F0FEA
E5F4398C6B18542617536D1A3100BEDE8C3EE756C20C17CEF00F26E362AB1DE5
EF1634BE5FE3FB9E40A87A1873F2BAF55A4C848693240CFB41FA4ACDD8D2F253
417EEAA050345EF2EC3CA2D657D9C69B66A95E3D4B590D44D9A1454D084D2023
9CD327149F1A5ADAC13E8FD8AFF376C597F1C7B013D7772D2B37FF073F382B10
AB55F9AA93C2E093B04FB24717949F64D4B8B324DB9D35913410EA3D1C064D0C
9383A3F5735FBE6A5277793963F74F2A137D3262372FE843423B04A358DFFBE7
929D1771E1628B3B8DEF25BB24655FECBC3AB097C6A1B021AB31EF428704F606
52D638B4F0D75EDE6EA0E7E15E07FBBC6D5E0DCB952C3438627AA25437DD8920
C589C796457C471B24DCC6FD95C7B3DF2AE8953C83D8541E5D227D05C4D32457
C0A63F9502DDEDD70D59AC7C98E98D83D164222E835298361E4EAF19AC466D81
6BE39A470A4A8228C9AD2BF78D7259B3A345BB2F3D3C8099B50068A5603966B0
D8CA289B302ABA9E6DD89679828C166E97DE0B200D36A674709D10484BA7D9C6
6F6C78656A40B9FC5451331D33BDBD639410130D8FA1EE80D74837F2B99666FD
7220DF1315C0D413C07DE3D4C83FCABA35B3294FA144204C0920D56749E15310
FB96026FFC3A11F3AEF099983C3D7130CDC813A4579A3EC308AE44C3987A7BD0
FDA8F1022B9E9FB18F048FB6CAB9AFCAEFFDC4FD6187C104F1348D0EE51ADE24
E91FA4A1A3468DFA2467013FFF6DF7321A779F03EF66FF60463ADA62C2E968E4
6631B7E54FEF9B822E221808B6758B3D8BD5E74001010C1B9458876348889559
D4D152D15390A891E432F3320A2374955B0CEC5453490CA99752683DCC1B2156
5BE495147C082A535376ED1905F47EB80354EB19B576C514433B5AFC8EF14038
51277DE590337B46BD988A79174C8F82E3D065418DA83755F45B1DAD294E5944
E2866DD32FFD5A676B1F01F6B120664CBDA02DBB370C9885358B609DCEB05D06
753D532EF2C2E0128ECACC3994A8E609323EA7E8235E096C6321740CE5C47340
D7DB891F9133BE4EB1E9E277DFDB68B5678660859288062B3EA0639CCAFA5D21
4E9ADED68D9CD0A64544658CAD7613F569F1134953EFAE3A0D0BA8F2F8EF4192
61F0CC99619F5EB6BDB58F2D59D50ABBF43FF4C062F4561714DFB3EF8F7F2CD3
A45EEAF4FF0BD361F0E691F79E9939298688E7DCE85B18E2E1D338C2A05BBB26
2BADBCB22952904AFC7535A0AF7DF971C53F72E95CCEC28A4BC4F79D9980803A
685FF5727402A7DE76F4E31268B7C9043B98EF5A9638F846F624890F6884C942
9B3DC9F795146DC19450CD6DE913053B7AD6A4C0180074010C5A030FB0799748
7185D298F1D73A53299612F75E2586CFBF509362B38FA40287555D9EBEFAA663
C985D5CB18FA6D8E74C30D1FD6DB22C79C2D03AD0788CD2C9D5E9C5A6E3EF72A
045E5B19B4EAE2325DC8BFC4436A4466E1068421430B4EB6B72238068EDE6B5B
BF3384F2E16B40C1C1E37C56EF70B9BB65F8BA009F34BD7DBE2851271578B8BC
42D01ECD1AFEA06861ADCF8768D83E2927C86A42AF94ABBA2336B4A853FF5C24
73EF058A2547D1E7C91F566BEE49FD2E4A43CE65206097D48D8B045EF3EE7AF6
3FEC81C9C16F303A7368046A61BCAFBB906E8E9E072AC3AEF5D3632EC5F5F52D
C734618BB4FDD01DE75AE89A4EA2E9633594510F7A4FBC702B1B962B3B6E54EC
741984E1E0F28B8CC185207C6634D73AAB0525DF5029D3F27C6757D051D8BBBE
81C11E44FACB2E8AB9390246C9695A009B556A68744B0270705DEB034BCAE0F3
91DA94D67D6182517DE9532459CA692ABAFB67B6B70E0A457731E59BF296E600
113C1050E2D62E206BD3AA60BB085E7C43CC52741DB5AA3E7951B356CCCA6BD3
030702F32620FFCB27F65C5E4A66C4E5C36EE5C3BFC2182E1BAF3E1D165D7193
2442373A4BC6B4E03BE413330B907D4BD2BEBDB127BC353E6CD70801169E2963
6ED0478B8CA15780AD9ACB404238CD75D0DC0958F6F6FDD081EBE5D649139F7E
908A86B7C71362292123F844F59B85118D6D8AAC9C67E4A0AF56E3D84F66F5B8
DFBE5CE3EA007A5EC8DEB4F7509DD1AC284C6C70D3FE1289FBB4C85D7F7333BF
B553AAAC335B1E4A792AE34F159DAB75748026ED4C6CF2E48F3B3AD57645CB02
BF64FCDDEDE1CEDAC567C1D761DFDE7090D647ECC8A2CBA3D6AFB0E7FB45F511
913DD4B843DCB4C7DF44D2B0233A23B45C2BF6A21851F0D154BB3A10294DF6F8
6BB008912FB0C21AB62D63DECCA285B25A06D846FCC2A3E938CC0E3C06829F63
F8AAB93FF3410923FEA597D8D4DFD2438D9B065B1A9A8A506C2B728278B691AF
367EE005C167E99AF5408E31310863022BE0C15A04BF780740834A4CD3AD2CB8
DA9EA49F0EE731EDA1AE96084D8F6F7E4013A3478516AA06B1CB4622A1AA22AA
86511D5AAF70EB82EEF561F7B1D81EE780193E3F9C0583559F6CD4D5B0B6871D
D9DCA7416D1DCFB64DA7513CF79BFF9A586E286E20D756A50F197761D35B0C05
E68E1C0C9A8CCA1D1F1F317019A0D861BEB61CA9094DCAB80AB27E8944C9C02D
1CABA15F577E3D5F3F13272C452F00370A48BBDD9B16ADD37DC4E00D96701F6B
B95B1F97038FE000500C65B5CB71BC026D6C7DB5149323AE15C4AF5AB32B3500
5B64A861C691CBDBE7DC15E90CD8BF7B9C3B08EC06F70FF637F0018DAF82925C
F506B6FF97E022D3F8BBD92889BC444A024A1DACA69AEFE827F89B16735E3BDF
0CD8E7054741459FA82D399C490571593CFBD7DFB9DC0AE1B80C67E1DBDEC809
00FD7AF38CF10B9E2CC7F65090F1466FE36C71DC1F0F6AD9E4A01E9027B89767
96678E7176269C34B320B0AA3355414D2E4C71054FBFC2D96C136FA4C6E5EBA9
8365EF4AFB2D1B85BCE20EC0E65DC3EC7988FE4A2DDC6456DD47F3E13D54F7A4
51A704F70C57CBFBDDF60281EA0180CC698A7CD5471FCA1475AD6454EF5D0C3A
845F643DDA167447B177446BDB93F041CC783B9AFFFE0DB70DBEFCBBE740F825
6C8031C67172184260E7448C6C3B9BFBD3F151CFA6C87427CFAFAB577B488A8E
283F9410A48465A7EBD8DABDC9FB0C3F993F9F75AF74515AF05C4D6D3D350079
DEA93A508B5A4150BBF359E3D606D538E76C01E7591F8FC24C71ABEF381C8166
9B16FEE40C9AAAE1EFC4F3215E6532E4CCB38FA1DC5037E4B22EBD3E0FE46E64
FD4F76DE58A6580DF8A60E188EAADF0DF449FB365E0D83CEA61A488D18EE03FD
28CA409F28976E25E32E5C9F0D0CEA363918AC6679FC139EC2A89BCB18E7CB8B
19743EDC55C5060BC9B68D31AC32F683CFE582C57303604135681946CBFA2A50
0849C52BF0427CD0AA4950984FA685CBE1F42E739B6485F429A839AD2FF26F37
79118481B54EEAFCEF943D1399CCFFF7FAED7602F698EFA7E4F255CFEA0556C7
F5E79060A9310340ED1F5F010EBDFCCEF03FDA9B0A852215C92C66927EB1EB73
94AE2129C66F222DFD421261491A5DC342BD4421B1CDA2E65F6B9BC246FD9A96
1E317A5751B5735149EB6B3EDDBEF43261003D6B487D5D89F6A6BC4AC73C3D6E
81B19C20D08E52E3E9DC438D8C906BF9C86C80F957676E4ECC058EBB31D2BC6E
7183062E5CEBBFCC636A31CF26C14252952B87EE384205706CEB22832DC21A46
173AE26D078DCE8FF38CCFB2C6B978EE9F7FA4E80519DC60429EFFD24075D0EC
8E5315D81995BB6020810712FC164246DC4B8E7B300AD0AF04183100D3F812E0
1133DED0B3C40F3603F2C3F1F9C0DEAC683D84CFF066E7A6ADF80D431ABC3804
C7CB802591CF99C1B100C7FFF3BDB4BC34AF1E410648C22882A61F33F0608105
B26A46457FB3FDC6411C3A832E78275F597E721609006B46A7BC4FC909C6DC19
4E0F61B83E7747DAE044281C7E66F2D376FA3DC6C612DC36F86F22B14E9182F2
D9F73CD2077C3EFDB5919AE0641994D982DA1305DF7488B14D2A6A92895F01FA
B299B9F6036F1BDB9C41FE732C35AFE9ECCE74A125142FBA82181F964062A1DB
E2FEC8BEF0F893D0916AD243EC8E99997706C76155A0A54E21EFB814B35EEC10
C90444C1E2AACA23998CC139C516A1107A9A4421B227302A30D917498AECBA26
669724E151EDA6EB09BE838B2B9AFC05015BD99BEC8A9B751090D2A475557B98
BAB4D6B48C41A93773E798740E2778E70A1FBADA15B871D8EE06271C3D157292
7CC0204031B3817AEBA1F83B7AC88386AD9D68682A8A6BEF8BD2E95EBC9AFEBD
BAB70C47864AF894F35A7CB3AA8ACD8866F509353928EFB5BD9C76C0C9A5E579
95A5F9B33C14EFB2BD5314581CBBC1ABB0999867CED3127C847622A6E392BA58
65454B0CFDC76017318066F32A2E60ADB66535FADF980F22BED7BA13F37B1BFD
87B9100C19A6639AC0F7C9E95B8E8FC194A1E2FE056CDECB6BBBE738519DE8ED
95B12987630D81DECCBBA3470B8F213DC95013EE6EB1C6954066E1881A6A0707
3708B02B74827B938CFA001E54ED9F3B9DF0FCE87D8B03D013BF9B48F3485677
D88969A3FC69670B9142CABBF2EC44D42E4F08E5FE4C8C1E8CF6C1ED421BFF73
CA4E54AECDC1E3651BF5019E5CF4A87187C281EF0ABC113F5F6E701DCF7B22C9
CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 49 /one put
dup 50 /two put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A00DE74E4990135B9FCF930B9549CFAA482EEA3C612BF66FF5E4C2F6A0
304CC43B7F56F6DF973313CA7F2D88D30E986CC7132881048F7B2B756528F96C
D9B74C6986B3A3968DD715BA53F95964F2D73F91888F204A4D7B1C82AD7754A6
236A0E2BC7893B8CF866B93D7EDC346E0D351F5FF27B2100063603CCBA467149
5375C8ED03B1D3DE4B38A21C2B3183CD68696053E9066021DB0D4C96319734AB
555F215F187EF121177A4722B33616CAC9709A0C31F60CB9161BE95CC492B4A6
D174E6DA80DF849529D72C5876596801733FE74E94BB31695A94DC993A854086
543BFC7C101B14E407CDC1155BA079A7674522DCF10AD27F89C45D13A2BD1232
D7C863838FE6A7AB85CE7CCFD9EF74586DDC6BD828D2B6E53504F2B08A80878D
070B8CD6E83C2F6E749B4EE3AA701504B5C6807782DE29F04528686CA8997428
406954805FF765E92486471798E65EC8CB7999563AE0717B721575EFAF2BEEC5
E04432871D14FA2CC36348158E861741E70797566EF35E678804BB29A594E1E5
6CE34BE437F1816F7EE6987D538C8330FEB676419DAE3C03728FBFD11941FA50
446FD44F4EA9D42C7B62F42AA238F2C388F118806FAE0C868F86F111325AEC3F
743E47FAA87B81C69DC8CAD4F1CF91770DC3AEF542E344105065A47A7BA57E7C
8C12EB142D61FF11A018DFB9E8618A6DB4BAE0C1F913CAB9E674C26FD53F7F8E
73D9E38FFDFE8F9D28BA6E2C9E1BAA4DB345407606D511D4D804064CECD24E00
3BCEE8C4EE10E195C0C21124FC875288886596FCA2173E863059959EBEE31BC9
A98C8500E7DB78B60C0BD963FE2FEDAAA71807348FA10C0FB511708BBCD6542E
EC305874FC16C39FF0D1EA91562924949B1F79B025575581F3609ED4CA98
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
dup 124 /emdash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA0B8DFA92F8C86B98A36587857C644A7D63A5AD00696AC1C54641E
88C6CE5490263A01AE737ACE2BABDBAC88BF012B53F8D3262E9BA4F370699C86
78D8450BA8F9CAF3D67B0C1CEE2BB8306F602FF0FF3274CE1D00E0B066E69212
493570AF320616E0FE9CD9CCDE6D439C662760414C0140C072B1D32196383623
71545D0ED78EC6858ED20AB20C0F2AB7DE3212D5629D2F80C851690AAEAF4A9E
282DF92EBB974E02B7CECA2F939EC1EAE1A64A69649F0DFD0046D62CD2B223D5
8731A241E11468C54CAA664473E5B312ADAAB96FCFAB73505979C5134569E257
687DD3CB3FE2944C3A15D194EFFE8054EBF42AB7EF205B2CFBC8D943ED371C45
D549E0D336B98C470FA951CFC57233C7F4CA84DA78BFA5AE30FA18DC204E0A97
FF403FD242FAC288BBBC225AF9C25F4B807CF701EEE85F4EF240CAD180CAF35C
1E79A408C9BD1DD7FDCF4B3462372FE843423B047DC3A3E39225DB818FB60535
8F0CBDA0C150C576B84BA4C768A454647DB379C59607924B4F739C8C730BD62F
9D7971DD6D47C3473C41A6F1025C49BC859AEE440FA84DD3FEDB5FD98D46CD22
94E55DB250B8BDB935CE9F0EB1606BD200E0CF04808AC6CA128F8E6F7BCDC13F
F9849C5DCE8EE5BA9CE7675D24F0389B2AA8BF58CCE6D3C0F8EC7617142B6B7E
D7234F09970A7CF2D4F7C4BC51B6185221DE666FC79D150CAB719F6B84DFBC58
06FF1F5F0EE64700CBBC6440C8CD96946EAB7607AC7E0C796555994F5274C9CB
9F0A6EEB2AC5F914EAF023EAAC0E793173700A22E2C317DD79637EE1DFB86EBC
D11B5068CACB8219175085DBF6C8D2BCA09907FF73B89B3F82466BFE54B0A5E0
9CFF3E607BF45E324CEF42F0846374B50FFF9D9633DB41DBE14E0C10896B1D52
75C97C65DBF4CC300D489F126A663A126AD84F84BBC9F36EE89A2DB9B7851E6E
E24AFC4C41F3C2E8F8175142F9B07751CF724660DF432A0FA96DBBE47B79290B
AA734052AEFCAEF6AC0280E232C2C6F23B3E12DA3C5EE8952BD948DE08F52EB8
B45BC3838AB653E4C9A19210AEA6313E62E70EC9BEF8C4560801112A781CB563
378D8C5CB7F8729D436B65B80B3B62BBFBF36CA5654039F3BFDA83A6CD672E3F
E980F6740FC44096A0FAE044D3C8EDECD5FA6214B8D7411D8B3A6C422E3D42ED
1D2DFE9B6E7771643356462F90B9D8ED56FA3AE38C1C5E7D3BB56A886C426F8E
7A710ECCFCB4A39BE3CCEA340E6E55C23FC876FB5674A3EC73B8F3419AF9EF8F
F42BDF59F0201BB83C64D26AB747299043885CBFBFF18D6EA38445830F0CCA08
D642BFDCDF7E10288D205CB8FFCEE555B6C81E4DAAE3B96B8C7AE44F70ABAD04
02644E83479EA2E5DF3DD21B807F767959970824E7DB785AB60A14846ED8CE71
6D43FE7A24A49EE8EC57BE41DB5B87CA1F7C79C6E2C81A167016041CB1C7D708
5326EF8DA67E650EB7B1DF10C08BFD2B4B362D9DDB163BF1EA30975F776C7B72
A2903D62091349F1125357B0FCA27B5D7318B429CF83BAB07526F0CA97D0DCBE
DED36070B1A215D2D349311926C59B13B653C8DCA66D5D0BF50CADD1385CAD9E
3A55D363C1180A19A9F0BE522FE66353CCF07166682CC9512F527FEC90A07630
A41B26BF68A3AED6FA662B2BE9DC403BA2A31C861A4B43CC0FDE715A12B969F1
0F7AEFF90937C6FB7A0C59EDE44C02D432F75606DFEF4B3CC81A29217D2CD9C4
3FDA1115137E13488B61554D8CB64B2494B8F25EA15E67C07A4AA63AC41FC1BD
9306C409C0AF8E3C2D91D19ED84FE52EA96370D7581A2024F2008D619DB725DF
835A596D08A8086016C1B0913ACDF2E57B26A5D0246FA8DC804DFBA4D875BCD1
C5A160EB35A8EB174221D808F961F6E6BED4A1655EDC31C235D20B206326C7E0
B64730CA249F63129FF18F9BDB498BAEF1DF8D4DB819E94F8E9C174BF7E21D86
04FF7574877751DF8D583BFE57D69E4F1B0D8664095CB0228A39EAE9502BF6B6
0033750E3772C5059585821F661900ABBD1D8565EF6B77512546ACE6437740E5
4402849472B3DEACA29ADB6994F329696732374F9B03250A58E94FABD1678D2F
E9017FBACA70F73CEF404208C9013F7EA391C892A5CD8219036A4B1689A6C0ED
71EDE2067A02A4193DE67EF18181FF1062A7F0262167DF4DB18E5891F5F4A65F
54395C37B5092D240FC3F376B37614F0BB2232BA259FC90C7A259D520FFFA6C0
EDCECDFAA397C2723F10DBF0994B1C6F2D60C5C8B9D71301577A0026C7929C87
1105BD1277B1D1D365CA8F3F9127215291287380C9B1E57E38E240BABAC3A7D5
3389115C8C5DF995339EAFE9A71A0DDCE149E75AA3BF13B0CE43259D9C0CEEA0
ABAD63C433496DE2E96A6B4EDF5FB540FF1D07DC32888E0742B96044AF087703
337EC1E22750BC82B0817E4B891C4323A893DC58A24D65F5751682CA84F36DE8
F89E9E4518BEFA0C97A3F73B491E78EA31D54D83D4BDA7B1B90028C373D3448A
3C28DB4B8175E5232D6644A2D6904E963F71D184EFC549AF372CB0E4A1E1052B
C2A751689DBB5BA772562F0C9B1B0E0A32C84A0F74C8BA15DB4002E16402010C
8D59FD257A608DC5DA8CCC8E44311C97400A2E64E942530CC560BDDDD3C43789
AD8AB3B48C4FFD3DC24D0245AAB6129C0580939CC062F57B69DBC55E6DD283F5
16A84D3A36F3B7AC37F415FDAF7F8B01D887F434D6A217D311AA098ADFACAE54
7DA5926F0D3D888B660B5E09415511DF96BDF1280959E0B0F1BC18D5F80E118B
52B56457128A90ED2829AE73C4E152CF0AA1933565CED0D79F987D963C3315A9
BCE6F56DACF6ED540E5773FD93FA3AA61C85F01B02C1A4E8BE81DBE9A49495E5
3DF3AD9691D422B534D2FBA9BF3A502B042B4348DE8A1EA9D5FAA15B381E04E1
FBCD4750ED4E67E7D057B246BB24A72D3E55171398E6D10CC9F9203A8FA3171F
C0670FB3550E5683AEF823618E45B1B6AFD86D04C478A3F05BF2C586A760AC4E
2DC106C04BFF70378B1A9116D623498E48A201EED8B4E96B5C996B9977E64113
7825C4DF0EDACE7B25FF1E458ADBCB1B63ACC899ACDD820F993EB7ABA17FB247
0F325870D7F506FDF57ACB2EF4933D33064234AF0D450F5772FCD307E5DB0B46
E25392CD6F3337C0D83355D975D875B0A880639AA79BDEC0D527BFB50F1A7BFA
31532C24F87D0D6EE6721F4F334AA401DC08CE61F1A35EC752598AC3C2D5BBF0
957680618C923BABB9AB8F7A576DCD30861254E68D526D86D79E21FB1E0BC216
40B484638C32E5C5BEAE0D1090E75379216DFC626C5AD578FC8E30ABD64FFDDE
BD4CD1A1BAD38981AC7FB73EE34B9EAF5DEFC753A26A690589BF1E4AF89319F6
B035076B38AD2BC0317EFFC6C45C54A79575674B2A47C068AA5927DAD871D159
4AC915B467E48BF6DA6EEE3C00084480193ECDB5F08EDF66B627B992C219CB1D
AD987EF8D90A43B126C47B37842F7889CDD570104566FF4FA34EE00F77A02532
94A3EE98171AE65F9788563B6C85D913CB117E6F3BB1C79C831F0A419F2DCC71
AC39F48693656F19C0E043A73CCED431352196A3816997D6055743783B277AC8
243EDE31995D7723373FA675D44B2D0C17274BAAAA454168F15C37B7F24D2781
8DCA97B141546FF52AAE9BCDA7A5424643438A33D4E38F521DE080E4FEBC6F96
597ADC51EC7BB30AF9B41DDC65E3A94B7514039C34D543F6C75CAD8E75DFF208
727DC428911CB820B9211D2A3C61F14CDE6AF95A61987000720C391EFF0197DE
010D996288A20A192DC1DE72A8DB0B15345CB7FFFBE6223336F1AB9D182D10DD
F84071814E368A6B337FF1C0C56372A3F68BC9EE445E89FA03ADB7AE2AC84B44
E6F260875F19D9565043816BD571540E8446A82AF91F44923FD549415C3E1E7E
5404D0AFD930FB186645C9F038DA1B23439FA1A1F2A43233141E1274E4A6C591
A42B58D8224F5FDC10F4BD7D426A30E69BDC68150065FDEA0676622A202A3062
F218582C59B4973E4E9FB1DCAC358FDEC1F43DC3A126EBEE67B095D6112664F4
01321CC6361CF578FAAB0B5CFB7E62B0A151B0D8E1B141262B08DA38B808ADCE
756C19FD44616217270E754A80BE869CAA8AD1E320207A9D9E1F63D84232C18B
97C35249EEDE332D58D92C277CABB6CEA57DB636074D7B00165A90F1B54D0949
AE8589AA01EE07DF4B8D99C1F2B3D90B1444E654491898A6FA5694ADBA67428A
3B847FEF5DFDB1DAE428DEA1DA440671576AB4D7E1859FD5C0D0E719A413F2FF
46A33F0BC008036EA3093A4A799D6C4B772D3D37521FAA2335B16E6F765DD95A
2A0FD5FD1D74A077F18269A34B7E560A6C264FED2B603927A63729FE3E7A0BFD
58ED9CB5A0D78115D6F47C31F07C9EFCDC396430848439F0573A2E85555F307E
397C57195B410F742849973F3F0510323FCBBAC31BC8ADE157B96F0F73178113
0D3AF01E55645C565526D9B73112B2EBA6EE57A65C08CAB705AF5B5D4EEF5CEC
2530B0304A6F40A0121E96164AF8420A7AB3D1936130B3591DB4B4D58D37BE35
CF2F26D07EB68B9C39D7836F7D0612742F429C34B44DF72BEC4DE94127944C80
C0C62E7006562811906A236A462E28DD698FE8632B3A9792483651B163455AEC
CFE9F94913CFDBD57FFBAA24508B2DDC54EA1635B1B8F395976037B0C742786F
AE694C459C4EC44D18BE4C8F5DB698E081FD91524B3EABF10198F22E59070C26
34073EB47C851099012A8A6D9A332976C49961401EF5BF2E4AAA268ED90DDD16
33ACD356713EBC9639ED4FBED8F05465D7D535BDE653A1B8872D0A88D97A12B4
FCA0F4AA8AE569490F4F9BA2F9CFF3A98A9E08E8A6621691108514E00F382653
97AC8DA23EA3F80EBDC8BEF6FC10D9468BEC96F44009DACAE8DA324CF40B392F
580D21455E6BAF8220D464A0C4692EE008ABFEC870C027C44524470A397EA519
801A83210680E9B3E8613A1D251342FEBDEF5484B0BBE0DFB6C5C43AE2981933
F3F7A15675B0D020A6690D62710E134232B97C44F4B4D6CCA784266A1467C869
175F771351E32B86FE43852C33BAA6071B6F78B41A7299A9364DC74075CE233E
14C0C6D078E717C9A146B4B7C5CDCFD037D6CE98840320BF25BD472EB61F06EB
A45E08069FB41C41D95AE496CA8E5304CD23FA665DE42EA669C92F8AF05BE940
661F40B65AEB1CAB4286A6CFF109CC50BE8B9A2EE79138D5B9FDD4D11AA70CB9
FC4119850162140412E4327E615ECF01460C247D2131D11F494A3F81C9D5B5AE
8A3B2513107B43C3F1B1B9F62402EA62DAD8B889DE4ADBCA9A98CB206343C3D8
E56556119FE9CBD8A833CEFE623649D2F5901827144B2D59704D7A96CCBAD9E4
61024D284615787A72202ED38139CD9209777C0495116B725B83961EC3363C09
FF189A93AFA7CD7C783EC2B41A9FD340C19D91C6C77E47DB802967687520D5DA
E7C0679AFFF786E94EC60E712CD034C1518E0EB1DE1F4932A1B7DEC526C83C2E
57B656002AE4419144B92EEDF9FE878233D13FEFA42C1305EE40CDD7927C8054
83A5B0F6D63FD7E7DD3A92D39CC4FE39AA86C480FF8EA33FCCD3108A42327CFF
21B287624FF859008AA987DF2F3C5DA788049BCEF50C236C6047497E42C2D807
4A0B07091F0806CE37581F9B932BC840A81D70ADC30053556FE140D39D322666
41859EDBAB51590942B6B8A203FF2E79750A542A7BF2D9F745225CBC384B34CF
7D619ECB97C86564942A66C514E36797FED841599AC4C923F4A7F0FD22BDC176
B8B8FB36A3EDB7A55B8C4DD747A1D4E7525FC4D5DB63BC29FFD8EA20EA384D74
676CAD67FE59B2802FE9695E1A05E263903D4E6E718D3421F0D3700F82C05536
F8CBB549A971DCA1BC8A5AC18C49B4757FC1C69DBC9ECE2A69F32DC1BFB65A24
7FB5F30D7D135EEC116C355D55A0C617DFE19BB511FA03DDA68FB5F10042F6A9
232F3B682FB5016D8A3C0F69EBCCB1BC2912A8D63285B68C111E7D147A8C3CEB
7ED04B672F4AE01822A95E935C9556AC36236FE9A87B9FC22E3B4161D73A4014
C0FF2F54490FF68F3294FF1D86C15F0279B15568E28DD459E6BA26C280DB240A
00F07F2BFA6854FBB25CE454FC6249F462754FBE931F8F2D0E1FFF448A969744
F68B196E8C2F43916C834E6776EBA1F23D280E4B873B5A909D6E083DA0752B4F
CF2180545D93D9F9B286397D72F1B9DF6AEA46B518885400A636E423EB652805
FCF4DCCBAC35EE36796C804EEBA25ADABC35987EC5FCFCE118A40CA249B1DA5C
A38E21528CFF9D28C0E3C0334EA762C069AF545D30E39EF7189541C1BFDA0B5C
B7427388DFD41636EC25F5C5D170968DC4F1928E191508C4695B28DE0D8A6640
2FA054A221F92E107AF68C81240984801508B1522E873FEEA30E16BA3540894E
F3CD5A7782EF9223F738C8748E7C41143E0BA803C072D9014552FA8290185FE6
1F8AAD0C33B325074523E7774D2E36B7DC672821E8FCF03941EE6504E0BCB86C
3FB5C27E81045CD88CD2B2058CFBF2D4B620A93569F3395A84D2706F60386A31
36F8156D846FC766F05027AFA14F2F5C1EE3C5381A1BA1AA4E1BEDF1D3C4F5FA
5E139236FFDC62E1A160ABC75D95ED3263AAF24C21ACB134CA618DBA94974F48
57091ABE5D1B65CABDFAA23F676245E95C00E7CFD94BBC3C1F5D743B1AE0B72A
4596C1D1E0E716E70D6DCAAE9766C05458DB71373741964C6EDD7D655281B009
056AD758CE191E7784964D1B1C6BD3AC483CBB5551EAD6E76801374EA8500158
A97B1850F9A710B2098B9A6BA69B840E8A7A7D1ABCDF102042984DDC400713AE
0FCF2D5517A168F09AFC3F95A5F860ADC0244A9B6909346D9EA1466DCBEC3407
0DD5273B95B99FC5E446C629236DF3E01D288F57E31A0BBA21864C528B5BD1C3
26194906956C7835111E028E69CC39FF1EEA6178A31FE2AEA71858EAECF7F8EC
2BEB6913DBED4E8FAA0172766FD2C3039B202D08FF7B58A0F613DBD74DE4AB84
8D940B1C93CC78984B89D1EFE19563D2737CA8BF6B2B5B05D22109C8E7E76E1F
010A8EBB94F4D9778CBED45FA8338F2EBF27FE31BB43019E81CE4BD6DA44D462
175FC5A593CB6385E0B00FEB008D8B1B576D3E7C03F3D03A775EBE7A0A3EBDED
18737E6B16C0C0E30F0D7C9EA427B07D6DBBD85117A7192A9EA022D546D12424
F0BB509687B078F7E53BDDE03AAB1AA1535E1EF51CCDA6FE526B13F20264097D
CE95113429A14CBEDFE8C1ACC0B14A5ECE5EC2A21521410E53E78D308DB14E65
9CE368C74C76D951577821B12BDBC3FD7879D00EBB138AD826D0D175A930F21F
32C2ACD26F1CCE4D6E8CEB7F96D3C4023B1B8EAD1EEBB8F85CE934CFEBBA5543
52CD23C1DC34D3567E1D5FFAE722572261F70AE711D731842DE654BCB5DA08D8
85343D6DEF5357F1AF858597E369F0C36A2858AB43F61CD9893CFE3927B4B473
712C9DB7E74B57F91C4B7B85187630EEC8EE8F6BD47E02E4CC39CD415F2B5A7E
04652F0F720DADFAC0C33576D92665BC33D50FCC1EDFE3437833A41A43F6A004
212DA16E57D68CD8422D81FE4D5A011A4220E48639E3BA36416C4EFD50D5982B
91E95E8E7EFAEF018F8F429415844A4B126CAC03BDC7149EC0513B524D355F68
605EAB142F4B3B27700B86BB6C66B998AFDD355450930FC7B8326DBD02BB8420
ADCBE7B7BE70239BCC5175B2667EB0F2AC3D2105345B1F4748968A6B798E527F
F8D8EE2BE0E48E2EAB1E078B66A252654706B291D915BFFE4BED98CAB4F03A5E
6FE17C5ED64410414243E851A372B53B30A52CB5378A41DCE2FA34AB68370112
3D9CEE4A56EBF6D8AF8DBF02EF5E0C6DA9B284D79AAFBB4869CB5EB6632A2174
B1A09188847B21E0F2D82727B4802AAC1AA1D7D1C296001EEAC69305C0ADA91D
320C7918C2A95FF6E3AD1A9BCA7ABDCDAD4496B6D2258661BABADAC3457934F1
54A5DBF20DAFE5C544F48B39CD1DAC18337A7FF4707E93AEEF0AF38953CB64A7
A0812D49AADB93CB4B80E98FF48B497DD493E534AE93171AA0670F98E1C2C1E3
D535C1A31E2FDAF87EE8A52B3A64F6FFCC4727BD0E1EB5523B2EA478329C43D9
2FC6F11AD1DDCE01587475631E059F5B55818C48D0CE2001136873FC644BD259
07C9F4A1D3000354227780DEDF4A762F5B47C97E86094D0D106827CB717DE5C4
DA46B84C5BFB3BF1C7BA013696D0BC59BF8AB96771B1F0C1C57BFD919016A2A8
1F40122D851325AEC9995548195972EC9A6ECF431F876FA1A1C6AEAD7C42C78B
BE36C7F1E3E17B29642DCD22433B001526FFBEE2B97975036186A60254B270FA
7C180D3C435ECC5124695CBDE5A04A35BE068EDFEB714902292C7F602221D987
3C63EA23BC6AC89E606CC5402BC39AD064371F2DB4C4E05C1A2C65BDC4296EE9
27D05F107291879BC6457480084D49F955E5854EFD333D3D1F5F8ECA4A96232B
CB708066E8F778636A7D4B8516B713D2959D101357E26E190749A015EEC5142D
B845EF1EAA705C6374A059316923766B1A50FDEBCD34E10F08D2720D38A9E543
FB1A398B775A237514938E425FB15547C35046204CD9BD4D0BEC1B174F025295
70071EB15BA8335CD0956DD3B1685CFACDE6CA1A2F94971C20BB1547B6C6D93C
0C2A766A15DA027EF2C05EAA4882F8638BAFF944FB19D3E733625850EDE7C24C
6CD6AA18CE9105013FFCA7249F6A16DEC00F0003B8E896B34E56EF7187A3D4B4
191E5F4084470C564E7F16ACE144C46AAEB4A2687812168B7EAB820A405294CD
BD219198F33C7E4EA9E4A5C0F4141BA46D935E6E573CEBC11C571C6AC4AC2479
2E4FA26517FF34CB7CA1C3F3ABDA130FE96504327567953B634788BAA19C1AD2
3F88A10DE0EA593F55E2F78301922B719F92D2B872F20DAAD3BAD746D8AB5C57
895FFA28F0450059B701BCAC219421B686227E9165B53632701C663286EB1A08
C7A34F9BC857042A371A8D83CFD9F163927C7B1B3B3B7C9FB6C4065446DA0D34
42C2847103484CD811B935CF10B8697D5C324ACE57FF671D7FB3042378AF6C8E
7536F58F4A48F2143F0A0F34958FCE11700B65605F8786E863919DBCA65533AC
BF81BFF5335B949CAC0AE8CE57FE8E92D4B1DB3A5C3BEA3A72A102207DBEBA48
D1DCEDB0A02AA44D7400BCBF4A0ADD69061446DD12487FA3D3DDD9ABCDC9CE22
9923B996D528A12878892A5429C53AA6D7088EDBCEA1F68D8CFF04EEFD96FAFC
BD0BF8A73903029F202F34263A65B1ACA385C2AD1173D1B567F87E356DF8482F
ED52A41D7E88FA8EAEBFE00996E57484CEDC089AB4B58E7B3E3BE9B325019862
E57A179441B941567D3E8F9D9D5448C228969F9FD8F03852A648A39D1AB8DF8F
D43B576F70369945C7F66158DF869EDED2805918A8C1CEAFBE4D588CA6E59D9E
50902FBC214FDBFE08A6561D6FA0A2F1C30BF4C81B3CBF87C6111DDD24B8CF86
EF64AC84C6290C9D906854B515A0E3DD89CE4DE07FB07FDFF009283C22A62E1B
6FDAF47F02E95B3187B162FFB413C119CDEC7F37539776278E274D9177C8F454
0CE537D8F48D41CE37144B0AD6A6410A9760C98A6154CD6437EAE24EC35B6C48
F89204A926756753E686334E258C884FCD13256D1308119387825F44A3DC1051
405610ABD6BDFAE099D49E06D82A50897ADD6461345EC545890D867F6E982CC6
81E804D3493A7E0D1BF97C8D50828A3212656E81FE6D06B40C97F43B7A625A5B
465E98354B910FD3F0569006F449910C987C503812182B413550D8E44D24E2BF
F5B36BB619809E3D4F9062D18E14F5E5AAFE214E02D2A7AB3D21EC9651500A1E
065F6CC12C5318CFA7B66920CBB4899646FE696658E06AD54C203747B65C3990
768E8ACD029558BB6F8FACADBB0993E3910DA781532FAF7DEE09961269123A00
0845BDCD177CECF3969A0B07FD38D56FAD7828E5E203F38463FDD61DDDB3777E
6F9CED72481B97B64FDB2D6B8CE582F204C220E51B9939E4FF2789DBB3EA62FE
F23594D39A81465F7CB266FC25324CDB0EC7700FB35C00724C4FD7FB8F69B278
62FBFCC9337B075059EE78ED6946D3A113DDB02593552D464848B3E1CC2DF13E
330705137AB9AFB1B10E582370A1034555C7E0B4F86599BDAD91AADD1AADD46B
6365642BB781D03ED1C6C622FF2AF5F620B5C83995E78A5D9A1C1B3977813298
304F659D2ED621D6C77256352D0B3FBAB4F83C0A7F71591CB48FEB8E86928A8D
9819F55F7FB8749D8F24279A5A97EF2A5F37E6102AE6A639AF6A5E66A3B8E564
9829030F5339675F5B630FEF81631369050183ADDB4CDD7BE61B15BF0462EB2B
211EECBCA459A43BBAA1C6EC70A5B81555A509822A76A15E5D5606A1376D8B0F
3C0C75DE5421C5237EAA63657B8B818EF00BCF7143A9A63D0E5B55F56CA1E458
D91C0CA797BE9CB6F539091E3A60E3B705B97ACD43B55234851B675C349C9392
B1FF0007AEEBB595B56E8A9224E600B321BF9E2C126624AA84427DD08229FE0B
3DA355AA886F87379F64943990293DC80A7EECD8E32004940F4FD4EDC3646386
7B98AB8293B43D59131B13DE37DA1DB27E535AD93C45F589FD060DFBADA3A740
2EAF0CE97C038D7E6967935D3B92F405C082FE6EE3955696C59B9B32303A7F6F
CFFD6E76255B96B4BFEB9C0FB0B316A4D2D33B3A45A74A1AE411F44D044E305A
BE886AC66CF74BC7D1E1FCD464617904D75D14D43A5C310F0FDD1C06267B6AD1
0417F6A854FED0512B954744F65F2677084189EF4E58299D2FA9EB041C0D3DD8
BA81C51832970AAAEE1FBE1813922BEAB6B1CA6AEC869A2D8A905D20C766CE06
A77C537D4A060CB61D52D69E2BF7CC4B71D65D5AB8355BBE3E2B65ADCCD1D77D
CAC7E2DD3206F64E3CD6D65DAAE022E82BA108229F3FFF69252B89DD3BC849EB
BC128888BD8D85A4ABA9F1B7ADAC988FEDD8D2FBC1C9579E799F548C3224A97C
80B899E57D455AF08E266717BDAA4B67747CEFE262C61F3CE327ED628D58A9FB
66382028584AEBC21F68BEF9650D5B2F4AB25D8CD1284636B0FB4EF529BC0E6D
570623AC05323878893B1B595285B01375D6C5556CFAAAF11A5DEAFD980FD807
6785D55F2F30C8DC0BAAD5957FAB52989BA0BC1959A7BE52BAD29A74F0E2B33F
4347A76FA462FC0830F7AB3EE346E009137B600A035A2041D8F56D575687608D
6F6B07160C9699DAE5A7EE08565A616278DF94043EDC7BE202EB15ED1BEFE0B7
7D43D464767D10F210C3D78964931B03DE360B070B9D84413A8D1FBA61F6F04F
607EC49D9712E193C51EE3553AFC51C0AFD814428453612000302C64263BF0C5
4DE13CEFBA34749925EA7A90F387237D5FAC6AF817D46D748792CA3DF70BB568
5BBA603789022A2A0AFEEC2455D561F6910CA22CC5765B60AC49284C2A19C933
4484802DE4F4948D1933E62D7A8D23C21FC4585ED1B66DB70495E064B7A6E204
0CA8C640A0A4CE1324ADC0C4EEB6CD09E29E4D223B1D6AA61976E57E970DA700
48328F704474DAD971A79169C81F9795E3D73339CEFDCAA9F4BE7739D5423DD8
21EB790BBBA3A80C7D077D76E12D1F88C1AD1BF65AE3E69C85BE6EBBA2A79EAD
C8B525D6009A90519D8ED08593A1837743826E90A64CC057CDA6D322C44F4E65
1BE19A3B4FE5055026EDE28F96735236CA1D4DD047C6685F94972E164BF39755
DDF73CA4C2378B282311C362A97642A05E94FCD67B8199C6CFE9CD160D88027D
A5DF0D2954BF2CC6A3C6E0901F595D24E88AF631035DBABCC2B5FA0705CE81F1
7F3495B30AF00F8DB7A1E2D301B55C83A4C00383648A5040F583FB809682F79F
3B68EBE9F78F0F81D1371FAF79AA78089121301F4A3E725306177D891088C12C
40252032914A8F7FB0900BAA0D210EC42A28EF8511F83F93E8C49AE7F3C618B6
D55B51397A5B7577AAE00EA74DCD95C12500720D59A85A5A58E2BF21AA9DAB47
7E8B9D75C0429252D58499665CA84BADD07FBF9EC939B0F7FF8B445856D3066C
49521AC8AF56989939DF7F2DC02EEA320DEA0BEA928D768661598F0541243535
6B613736D5765ADA50B9640C3483333C8073BEB4591EE601E580A5926D1B1251
B6B6AEBC41CCFC641DAB9972ECAEA961E1B510BC3097E780039623AEA1984691
103CF2595D6EBE199A13E9A7678BFB68C8E1B00CB741904352BAAF64A0315B36
8A49D3A9F173DA559E46C81885B1DC16C5534AAC9E9113E1AFB45C2206E70CD5
09B014EAE02416D989A12E05A7942A8F3720AE4AB5DC89EDE9CB4CFA1E04CE13
1E00F50C9BC753FE140BFD0835DBA410ED2004176B32CFDB51C341A2DC547FA9
617769741F0203D8D1F886CD9FDD39AE0A0AD53F34BDCE20757197AD6FC5F999
4BF6C27E397506A032465003A5310EA18DF1F4F5E128335FA5AC4F026EB4572B
9C4DFF858CE11EF8D162775646DFC29ECDF39D9CC4F2F102747A5610615FE381
DA8B1FD13C700C326F61BCCD762D727AB25895AC7449F8D1A20CFD1A1F8794F9
48022BD00BBE9CA664E165CC6BD39DF3A733EA08C002888BACD1E160001CD90F
8CB2C2B8978737F222C03D1909D5C983BBF260C49E17EA39FC4F2A85092A2038
892C8FDD2DD6F293ED631E0B89D22400F3F38C1E0E3D29645C7932A085699615
975A0EC3FABE235E654F27906DAC05FDAD5CE0C3E0269A9DF890A75BABE64DEB
665F4C830222767CB35B2E5D67EE77E042ABA8A623AAC359696665CEC3871A4F
AEA3D0972B029FDAA8B3A78F436EB2A6B187408AB637CE32EB3A97924FB4EE29
E79B73B6F467451C898DC190DDF53998C6A4FA2010E91980F7D8E8BD6C0E3871
9634A1E364894B44931BCC191CAE0E685B1305F43D4AE503D6B8E62FCC1D2644
759D2535069C153525A3E5526EBA3B8F6EBB68D567A5692A41A44F39B706D0FB
01DDE74890FBB41813E990B12BC37B66123474755F98351C621156507769FE0F
6D0CAA78B351177292AD6F165BF9D6549EEF8A274CBFDDF428972BA80B3B4409
C3453CD2D72E438409C48BD0128B2476F794B40976EAFEBDE5E5D065A535CA99
95FE43A5065AFA4A833B3A92D6A15FA157E23EEE0501599C87C8F22D754C01C6
F4C12777A3C4D34CD875F6493BFBC267AC499FB28203BFF347F225AE75E8A882
3F5B27AA2E94E07E22E80A0D9C93A954F381D11A4F2261A547C29483FCC19EA3
7B5E779251D23006721A5433BCC55F26C5D80DB567DF186A779F4C6C50DA175A
AAA70241EB37EF8D948BC5DFEE53AAC48F220BF90367E180A1417050703210DF
A42838F87449C1CB8320686BC4EB6D8E042393E21FD9545CF029887CF20D0E5B
9E4D846C9F23EF6AAA62D92C77D1983DB0E545A496EDEF93C5F7895DF2E5F41A
2576380BF49C8F609E19A99918B4186479A4464C28F2B8406AB238773CEA00FE
666A1A4DE7BD5E5415C5EE964794A25D762C90AAD7588BECB90B1C1FD8060814
35EC8D3987AA7B4C5438ECBBF634D47451F14637961755FBDF4DAA41AC117A7D
68C194B2C7BD4A1ECDAC35C5B7C1D3CDA5548EE51A33E4B1C4B721CB4CDE2082
209DADFBF83C55B352D6EC3623F6632A5709FFE2466EE28334FDFA12C97351D5
AD53E55F73E6C19706355843B4333F0802E57A2D78517CDBCAD97B1C598C3FFD
AC45748ABE392F549CA26818D810836652805EA766A0118CF30ECA1928BAE8EF
8B923FC23AB9E993AC0B8FD62741332CCA4CE3C0EF6936DBF3AE1378D17817F5
1D7D20589424A103D47A57E5F23350EDEA3DE6C2FF5E8FA9EA35ECF29F0E31FB
CB3DBA0F7706F4500C915EA8C6BB3A9CC9C595BB21B9AC45B3CEC6BA0A3F2B99
699750B7C4429B84A47A7BDD75E97814B21D6D7141FB72715838A270190D622C
9AB7D499CE540EAB07C6ED8BB3F771BC0BDE2302682AB45863CFCC98FF54A5D1
8C2F6C4F4B2925B045B7A72BBF890EE6CD42727EC007D19CB6A20F455F06099B
42709C4BCDD113A7F9DDA0C2722A28AC39441BE888C4917BE8D5A59410B6B921
62B8846ECAC60BCBB940F5EFA69552693433D510D586BA0D09A65D406DCAC01D
7E6208D0B724A36C6BADF116E9AEE63AACB257E42EE2CE71B16D5AC463150881
B80798ECF1CE5F385992CCF8763902BF6E7A770BB0AD64D44C2D2CB58F7E1236
68250F16F0E18E0D773456355171D948D02AF308C3728148A35A82E938678C33
0A767474A48F257CDD77A25127432EC9D24C336997ADBEC7B6F2A2D5596452D1
4FDE94A43EFD14E793AF276C5EFB3D975431981872EB76DE92D0222D7DEDBD53
E187A46B9959F37C06F968C8E444AD667F9B1FC029D25DEDD066110ED0085285
6682274516C28CA1EFEC852DC6F5E47A13FA3E45BBB6A6BF66BE3888907448E8
FD59B19982BF06120254489367ECBB2DEEB54EF95AE927B512EBA322C311513F
C7ACD2197D772AC86C79AF2559047D7DAB853E8470DA2FAA4BAA4F44CDB587EF
807D2935CC4EB0C76133C872648EF2F80905D2066AC89C430AC608107E72206A
032F8FB18333B309811C5138BD0455A59710E348808F9A557865C372DD7C225C
D2A98C19BC1F4075EFF22D72CF86CE1AC1E6EFC84AADC5C0F18923670001AFED
DBA201EF2B4710B7C5D7B38228A36916393D86063516543D184700FCDCB85B4B
E1A56DE196CDE1258B372905579BF2F8C1EA9F7D86B6F0443F79CB177B920D7F
B420CC6EC860C214022F0DBD82A584B31E5E695694E447D44F5F90D603EC1625
76F4BD52B067D5B9053771246B5AAFAEB9ABED4C5CCB6742A04CBF599AA8EADA
88672F3753016685A1C1550F966FB5C40729C60EAF5328E284E3E0C66161DBB1
C10B69A825F8FC141FE64CDC5A4C3E57B6498A8A10161E0E72BD2FFEFCBA3D49
5E8067B71E2B19844B0CA9B35FA5C74AAE3A3C5805D048AAE2F6CD5572B88AD5
00B71D9D0DDAD6AFAEEC550E8BF43A1494E4B8E21845B171EEDF4CE6CFC86466
4AE29444A0DD2B01579B6EB4A69DA1C644D6D6ADC9B2AC0BEB610018E5B84292
4757C45F78EA6B0CFFD7A50FBB9834EACE75078E74C4D6F7E2526A9DEDDD711F
BAE1BFBD5E0DA4E466F9B05D06EFB4024D09E0EC0432BDFC812B5ED79DFBCB22
3E717EAD97F007FE240976397D06E14249305CF698F1E9A92BBCA61A8F9E959E
BA526D1CDA54DDCFEECD35D93179D3A70778F07C36C25EC8466F1EF31700C3F9
74A10F025418159D14F8B2A573C86B19AA4CBBAB796405F5FE0D3D9BD8343F21
5C5123FFFDF46C9D172EA22DE54DC5167068B2B17736A1F43D70075A8E6789BF
00D01E884D9FA293AD58C0B9E049F76989C7A253F561A3FCC646497F45F595A9
3E7942CE93D9FFCC1B60D16100BAE0B0874D27DC04039D830E87D4F6172DCAB5
C87EA6BC5497EBD84E185E7F5DF8DB7F7D90C66BE514234623DBCFEBE31E0AA4
1197332D9FC8BB529BC71B730FC0684164CC6D03CBF09EB8B1D6A009A7B177EE
B17CEA32B5DB4A8635421C794D09EB4A84C0C5D1D42FC243EDF0015A21F806E0
68BA068B12D5FDC34023952579E16DD2DDB16D52E9AD8AC550F2A4FCEED6A841
ABCA9F00AF7FA8FD38078223EC82C92147FF077ED63AEAF8B1BF5E162175C423
C7676A75D9E105F3F472A3A3469DD2661852C7AA3929ADC53E97F27935B18749
95E7160F2CA78E95C1896EA67A3205CBD934CE2EC67640B13B0C575326EFB294
0187DE84C1E6FA7EDE719FE6546E2A8C3589BCE7DCB62617D1CA11F6D4FAA544
9AC143F18E8AB1E0E43879B8B0DEC6382CE4F29B25086903C11729E2CBC2EACD
C168D70F271CACA0C084E9C51DC16F40FC9952739FAA5ADA23527BBB794D0AF2
183B7EE4F279572C9A74D6A2FF470BD2832EE6779AA660C943D8F52EFFFF1F82
7E29ECCD8EC34384ABD5798A0DDFD8FE4733A06C3C8C936FE6E53B11EB40B9B7
EEE71C25984CB5511FBA4F5C1E9CB98BE39A991F34B235956F29AEAD7A199067
E59FAFF2189587793BD2714ABE30C805F845BDDD42242A005110BE837A4BB0AC
DBFC7491AB036B9072B98FB3EBDD02735F5AD81A61E0A04CF8B192DD670D912A
E5B1D54EA93C9223D8DD593DF5D5AF87E73EEDEFEC185A943BF61F115C16D23A
D821EED761D38A74C8D34707A08BB88C2E3D7F2C898D0D3D188EE4444F5F1AB0
BA0DE88509DDA828419114A1ABE35E9F18CE950C12892C8C5C1594B2155161E7
A275E1DB97288B607E8D7F1F61EDED169F0E96EDD93C69E25B9A3E190A5E36F3
266569DD835F6AE2A991DE4C581CCC3234FC68823FB7BB1F74C6978FE716E25E
C5A881D6E6AAD719A820F2268AF260708C93127525096B57CCC7DD25894A0C99
5682F9C11B655C4AB2A9AA9850F22D37169D03F8E103D3AB554CC5D8AB04AA6A
22E0BC35DC77B528C4F93A26BDDCE8A64FA1CE82645BA9559ACFA2F5C868C7C5
40FCAE08AA377890ED9DFB44B9210FBA406793E794CEFA112B72EA0456D769FE
B4726B52A7F33D378F3DB45AC65B2B67E1A70E49FECE731113E8317C2A74EE20
81068C9FCDA35B5FA828DC9B605EB24F15909BDBF7365D54AF9D85FB9525EF2F
140753E52E281AB1C50DD674575383E18209707BB6604B6EE9C703EFD1FADFC9
657622FEBAAD9E7B7023D7971289D8372DEC49B485FC7989C5189B95F2383E3B
630544DB30828BE6A96ACBF1F4AA68A389638983363BDFEBF3C905DC814982B1
CC1B497EE428B3530EF99E851F675DDC142DFC76EA650FBCDDD9A8B42AF2AD4A
95D941A81A592501CB35FBBB36E195253662B41587BCA1476FC6D0052B0E5C18
AB97F0C1E57AEF55C64B89024C5CDF488137725473CB2A837A5E4C49494BF3B9
DA0224CEA4C80C1526B82647E632178D4E59C5AA80BBBDDD6B742C3E3C554AF0
2516398271180D849CF7FA6B036C544F384385DBA6A1D27B6BE6F00012383F20
8149A68B056F11193B8AF76F49F5AD83157C727117A13C4441AE69C404F91DB7
D2A25AFD4E8F4AD26B6734B1C2CD45B9D4AF6AB859D57610B1E5CDA20D3D8226
844356684B01263FAE4299874B7DC2F87B7E133048B6DC330ABF0E54AEAF727E
E0C9CB92ABAC6FCEAEE8ECDF1402BDC2B0208B2753AF574EC88586A99E0C9C3F
A02A306CB66EEEA7DCED7211CCA9D591C97BAF177C97A9938EF236F4147C82B0
15FA191749E8F27CB68E4BC88966338F4CB1D4CC145183C416AC05E42D1953A5
BF872906EF6F60CB6C192E633B813E123DD17AADE826B0EB71DF8D21051FC914
D9BC87ED01B22EAE6E1EC90D99CFDF41BE1CF9CC6AD3F49C5DDF87EF7F2748F1
3BE9254C242095B90D45EA2262AC88EA56A3E058655F8BD6A79382C3D263C0B8
7960ABD1A4C5B67FF13768AAD388A88F96472232601C2DA45CF6E6E00D1B8237
4C1454B5DEACA5E1664F454FF076E3CF1749BC210556EE7F863804F17080814B
813B4199E40699F97DC97881B8F4BC64C6603B0A913358CDD0E52EE886E07270
D0D4C681DB45814FDFF7F62332A6D016CA48FE88E014F861AF600D1B605F432C
699351E55A3ECCE137F477A3CDEE58A583A626D59FCCD81A34CF021257269E1C
58FB83EE796544D135D874BA11163DED21B6E91697909C83C0EB1DAB9BEEE5F2
717BFA35A520FAD4E6C23736A5097E1F6A28A131A22BADDFF4A3299583700640
F5C94A2CBEC40E5E9B696B5BE7458D91F9E1B9ECCC70AB7DA6682ACBE7522768
B38F789035EAF314ABE2EC8DC24FDEB0B8D599C35E0CBE1E59CE6589B6E61B02
A7096672F7B61D7FB59B0BA3588C706FB4EA6B60F77C604BD86E4E61FC6CAE03
253755081347E374F60540122A2CA862B532548A513195596A3105A78CE30D6E
4C3BAC61BBC52818B95488F9F169F95F9F1556C87DA020F70222EB3B9212C8A2
496AFC85195CC0DD87D717522144F8F922C3BF4F1D9C2BD70BBD17DBF654DEDF
9487658A6B4E906B87DCF8C5BECE61C227B88A9B42CFDAEF3DDDE0FDC9A2688E
68A6FE4EF121F59347775A188844A46A4CA3C4060345CDA6C144DBAC1FC39D15
8DCEAA122469441E150DCCB9875999BE6D4441D897D03AD9C3BD18F520045DC9
8C75DEF57B510FA707901CD465FBEA4B0C744F6AAA8625B2D140F1F6B2843C2B
77E7605B83DE6BD22059B059198166F0D22C8F8309C51DCF12EA19021B998AB2
F5A20568CC3F7B967924954BBF4AC671A3A22DBB6B07E4AD4CC012C9BEA90CE8
8E3B71CC82994A2C5725CB9DA787902B32C5C8C64DA0EC742CDEB26EE2B4B04D
A96DBA8EDCD81753E48DEB97FF9B1CDA5EF4D79010D81FBB52F7E934C4CD4B0E
8FD71FB938D72D7EA00D17F6AE1986FB2E5E6A5A91CE83AD5506625777377F41
DF0859FCF934379ED75CE159692B48E0E6C142BC2F3481DA10F3F6D342939FC0
6B77BE1D1F1613A6ECD8FFEDF35B0071E0B2EDF21DCD8F1F58394C17FF4D1361
30E462A6E5060FD0FC1B375AB701E9EFD3F782AFF680C9A4F97038266A4F21BF
3AC2206CE45E36E5A0442573B6C3928DEE7F04172256E8484459FEE905D4BF5D
44CE14EC5EF35AC7202D0929507F2FAF68DEA1532705408E088A72D1899F675C
989DECBA20A39DB08FB0BE7319090171680D7B99D5F427F7BCBC981DA094D5FA
05CD8BE5DFFA5CDFF17078C4A0F1AABA153AC44F19F25D133D25A8B9DC964B9F
E267DE19A08C20F8FABE1525D941700F771599EAC92905EE3E8F77E4DA759F97
2F0047C6C05DE5DBADDAE7385FECC49277EA06BD6818AE417BB5A9E6097F0EEA
1D2F31A8C78DC8714A6E6B55C97C0F17CFD978C2DE716F1EADA2109E2D70B4AE
368A2CE6CFD3A95391ACFA776DE48AD33A714FD8AB568BADEAFFA9C00D9080D9
9A18A31453AAEC3AA2CD16114DFEADB92300CDC8CDB1B664B2CD1558B1E0491E
915EDF504FFF4A3CB4A97941CB4CECB7097DE2604F400BC91248BE1A9DD232CF
AEAF5AD65C10FB83D7B0EB9D6955ECABC274BE036E098488A4DC5AF8B8F67F47
CA1D50FCEE7AA083925CD802A6195A20367603D73461D84889E1F1C830B1FFA0
61D2A91F6641663FC39AB9865E44FCEC61F04FA12C1933B22105318BCF7AEE90
0FE72091B3DFF613F6F4B909776550192F85A2A288855527FDD78237F91E9AAA
678736B9D3AA3DA9CE1BBC12EAE5B81158CF4B805C79FD51D47AA4ED89D3F3A0
13E6A86BDE39E492FD3D771EEFF484A9DDC5612D679BCA44F26DA2BD34FDD684
A8BF1965F4D4C94BAD05E88E03863FA67DAEFFB575E3F2EC0D3EDEE5CED92374
6107DDE4C3FE3BFFB3BAFB8C455FD203345755AA6B94FA8EA0F0B0A52A563C5B
7B06349671C7B164785A479737FDD2E448E7CA1CDDE0F3F1692F482F986DC0D1
DED1771DD4F1AA0D0A032C2A9DE9D31AB6FF0AA4C418F45F2D321DC877780C7B
D306680E380355BC8CCB6227C8D4B7D1B0C67F51F41F4C509FBE0065114810A2
825741F914650604605B1906E031A4918DB37693D09C94AE73BD31CE55C89392
304B2D7ACA3188D61DFD13DBE8ED2E47EBB3C23FB029B213AA5C66793A9742F8
C5D2AF2F6DDAF7C7AAE54776BDF7274128DE5E1C2EA7D08EC4E62F307F7EB118
3F6979C87FA5D38F2417DF8350EFDC5F21B4CBCD86F931056A5896F32BBF665E
711CBBFA4C5B541BE7D6DE8B4EE8CD1A3B3D80750CDE95DA2E96A58CFA4F9809
884F184E1D351FB34A3F823F75A7B7142CE76B01ED6C1BE876B53B0165BB2ECF
6990C448240AE44E5FB661727156842EE9DCEDACF724F5A92E9B60D855C5114D
C364BA6B56A6A7B4DCCA6377132640F6C269E2BB26D4A8AF3287FD3A74DF5EAF
8654DF59AD32F1F5788AACA2DC8EFBF1141D1D4D8BD15344FF16ECEEA6147D3B
A3485EFEFDC7BD196BC998B48D54EE69E9F07765D94D76FBB386000A5825AACC
3CAD83D418A978557D4916D686FB859C9906AB4A2FBE90ED21EA261B72CB8AD2
C38D3B375EB2B4E43D0C88D2D6955A6CDC082F2D0DD0CDCD60B61ECFB79AA8AD
9CFD43ED68094E8DDB6B20EB2B0B8E185C667E0469409742AE5A93A98D1F25E0
AC18462EB4BBADAA6F8238854935DBF1A80A8433BE978BB4DCCFD6A18F268CB7
0D12E6EB98CAA79B1E50050655039C186469F1BA068B64A7AD71174D6A7AEA40
E9ADE4AD9E5EB7CD6DCADEEE4F29690B0130245F7FB1D63372B97C15DE12F9FB
887589C4820E6A1A4A85BBFA8357C6A347491ABE4D22660D6597FBF2E21DF50F
6F65FAEF6D9A8715A273A10A438294E0B28CE185EE0013071C584BDCAD32202C
7F74C396BDB035BF954FCD18B051A350BC69E0550851FE8ABF558E1D431B00DC
814E89B2E9517839D4AF29D4D295C7CBF1C7827D2017C2E0DD0798308A6D0956
7E87D8455BDE43CFA6F084E6AFAA7F5559DAEBF90110F0A4D6D2EEDA6F421521
0050ED41FDABFFA87C24BE3999F64A4F0DDF0A72C5EB362AC68E2BDDF0AE81A3
443CF3C5694AD93E92B217B571D07607EA9AC94AAA1549F41783D70583D51E65
6A409EFDCA70BA2E3440D070715721B44988769E02D30E95CB749A13E4F12DA0
F8B2FD2C82F2EF1DADD7AC36C70BEB49EC0B5ADEDBD014681BEBB50B6B58E042
B9C426E1868C71098ADBE49EA5FBB640D269D939CC823C8B9D2E9D545972B6D2
4BDF62C2E38E86D4A225FCF0CF3DCFEC8AE842EF8830D74581BA3AAD70D33FB8
FE2007693A3457EDA27068BAC2E96CB0E5B5FDCCF8F8B6F35B927F9E8222E511
9505605FBF6DE9CC6DAC3438206DC026458DF297F4106C36CBE16D113B28FA5C
22E8D8E70D17BBF42CD1E3DC8BF91B754391D2721332CEC1AE30ECADF59926BC
817DD022109EC44C0BFDFCF5063E366147ACC91833583C743CFC5594E8054673
129BFA40D4B4CE78CA4A56C307061197C54486D644800E3A8F32B8BF15DC9AE0
20D45D0D7E9E9C80A1F5D3FCAA9CCBFBB4CD3B04185BAD3C4B6A6E9D6FCD5C06
0C87B85CFBA7B9609650D81C5D5F4598FB23A4AB4DE89FE20628D86C06F9EACE
23F986DECB26EC1A4110BDB1AEE312BFBFE010BD1DD29EB7DF5B522453CB07B4
54A3AD5C67446D886E2C8AE9F5FCE5F599ACE2785A718B76B0CB0AC44C8D5663
85BEDF58DAB6334F48AC2BB7DB7F76BFD476EB53AEEF5DE8288643F3835563A8
CCE258AC0DBCEE8B1A8CCA31C85C8164AA4D48282E3E5AA32FFE0D217AC4C167
6E941A3D772C6AC9B40214A8B91F2D0E3DED70EC74B990D47959E5F33E0DEFE2
03CF564D02F7ECD68E07B318BE5427F88E8DD98E06DBE2BE741D163595A8487F
67B91E6E8F3EEB623A033AB0DD8F4F744B4BE47B3F6921C2A10A7511D5FAC734
9890EF2305D1331ECE4C3BEFD80519E419035B8769BCC725E59C2C3DC5DDA612
C313B2DFA2C5246BC47CD939AC5C7235F71D38F39C081731F47CAC52825D16A9
69C5453E7F548020DE165F007D93504A4F9BD73CCEB485D98DB739E9326BBB59
BC79F950E60123C9249D072B5C073535C6C840BC4CF620BFDDE154C57032DF42
86CB539099
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 65 /A put
dup 67 /C put
dup 74 /J put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD6DBD2817CD57D7CCC2FAE2B14257C7214981A0678BB213832B04A68AB3631
8B23CA966781ABFCBD46714EEDB6F54568E2E17613658D4F62AAE1B2B4732FA8
F3F9BB87D30D771D591B8E7F59EC319B3C80C7DDB03B26C4A34300BFECE03FD2
8732CB57F2E95555F4EBC6F97D187D7F7BF406499A2B12B953D0AE1984D78EF2
399E862A24DD788C8C23E5A620F4FD4BDD641715A50B543CA1C4DBC2B2F72F6D
19FA0C4EFE4E73FE9669F35AADCBCEDA2186F38CBD6E817B4352748449752684
7B4F84F05ADA354F7D171B6E8D311AA83305D7EF2971283BE3D51100142B1B62
50DD77B44844982F11B7020A2D36E903F851A54EFE91D6C9987BD9BE745BCA21
04F0A28816B184277891B9231F28346EBFB42D1CC3D8A8E589C4A40FF0F656A6
7DC95A4E4802EBEDD7BF5C59DD668128561C8FA770A2DCE227CFC5E4B147FD53
D972E67FB63D1EEBC336B45F48BD9237F386905B38E198AE6445AE840C2DEF08
A6B185F2F4CDBC19445CC5CDB41EB97881E27CA19657536EEBBACC2730FBD62C
6748AB7B6645B6630C5D41A00E8EB279C33B675FDFDF99E626059ECE9A67257E
51FE20B5D0B5EB04A333CF74854E0A244333CAD2A117EE982780B15FEC1A3ADF
813C79123799A92600BBC3BD6E7EDB567E1F6750C2162433D8EC0559264A93B4
CAEDB21289D282EE9D25331314EC1DE14F599F0E6AF74E4EBDABDFC1047E04CE
45668906E4E4ACDB10A2A538988A58CF594D83C5C9F487CF6BEBE1BFE5A64D3C
20BE9B448E11D92A4A5610EC34E9E2ED058E881FD012DE121692DC2D523A3541
37CE51DBF1CF44A1870193BC0D10C18DEC1C5FBC73D69535DEA7DDC852FB075D
BE479516D8D96DD258420ACAA031441E97E23FFC8F9C07108DCB9A85A656F047
7BFE9F73DEF8FE4A6D85D850FDFE1D16A061C44E89ECD17154AB2C85E3753F1B
60D66464F4AB8E3BCDBD637B637D4F5F7308131849ADB62E0F699D4F36143AEB
53DCA9006102E4EDA71483D8D6847585A00D90E602FAAF6B9F12F558ED64C929
79BF35E385825F6E2A05DD81E5F4005AB9191204BAD6D0F01BCB4B30B7B29BE3
9528E2AF2D382451BB7B201D053025A6343E7FCE37A02D920D3DB30917201565
C7AEFA44C2635F4DA68BBD291EE8CD2F023E96A2091205276E88AE0546DF0E34
16CE12BE2843A4AB916A0C73BC9DA75BBE4EBB65EC93B452CD50D5DBB1ED75CB
09E03FA5FE6B76807C1D351FBAA92641ADD3EE27D797491E121C35E78D3AABDB
09871C7C64C78C169A090EF1402607066BD6EB0E0536C3B0ECCAFC8647BC44E7
DD2F65C460DED369867BAFD6B1162B6CBAC2B66CBC63B96CED4DB5FD481EFD2F
7C157198CEB74CAFE6180064F4DF12EF94C197754103D2600A10F3F481453EDF
697251FDE7FFEBF203F1B3377616049294BDC977799A268D1702735DA8E28B3E
47FFBC49314606BA4C4B116B481CE8C41B4E50C098941C46B1052F63572053CD
0FFAB5973C4D2C150E87700E6D1522A7A44C4F6CCD1CFC353D0CA4FA201BCD0F
B9F5CE2402ABD530DD03E6AD1037B0DF17459015A53B7EF52372C323CBA1FFD8
0E65B1AF314B7731CF3051DFD1E829AE01A2C3D86FA80B431BC16B7115BC1F51
A4ABAF1FD54EF69269C4A32F9987B726009DED80420F4521C609E09C0B55AA85
DF09CEB3D9064A8E1FEFDB69430616248BB344B4E0BFEF372DD51C18221071FC
5D399A006F17A300935BCC57AB1954F6367912BB1913E653FF918A97FAF148C6
73EA48B9777E32B95CC1417DFA0BA449EFEECB21AE85F84C2D4B77F8D38B0E50
345F764B36FBAACAD5CB6CBEAE2647E0C08212BEE924BADAA67920F5879C178A
670A70C4CF43F09064C1FFB67C9638EA01AF6FB71F6704685945BD8A78E10B28
AF41C717E0F9ED958626A04A0ADEC289ECF7C91AF8BA9A958C62BF0E8BB087B2
7767BF2D19A992C2925B83A8B9D6CBAB2683C9A04CB3976F0B99283FCDCD3D69
2DD5B2BE2F6264B853EE2579DF5AF7249BA701307223B4BFEC9D69AA0B0B4EF5
AB273A2D0BE7D34E6186EE24B9E5AA39472FBED5692773EE7119300E3F3157E4
A9179F71701AAF5DFECE107A97C9F9F6C36222C0F694C4130C5D0FAEA78A4A70
1BB643AAF137729CC7EEA6541885B7748B22D395FE26A1E6314ACB088FF3FFF7
E28D553AED15D05AB765A322C233192ADAE3462B91013098293A89BF7D8135F6
2D5F615C50159BFE966660B66B1DEFEA9C789A3C9E5E1A3D75D004116CCDEE7B
C2D6574DA19CF966D19237C7E81C986813009EEF365802DD340EB0B797F1E001
241F673D1E2505A0F83E272EBF01D282128B36506FF2320A8DAD2D01B99819F2
08CB9A49DFE22AB5392FDFF27B8BDA6A0EBE6A5A82E08BAA4FA0D8458971AA6C
D1574E3ACAAA231A58D0726B935E796E2E016459E1BC5C2455BA400D2825A554
2124C3CB57FBEF27763E04ECEB72C88E8A8E240E718DFA3C1A9CA12F9642C1C8
6CDA93497E41FE406827ADB547D55B07CB3008205BE6A91CC0F686F0C093BBD8
18384BBB5E7D38EA8316A9E06F545757A44073B11C3110FAC554F50A24D64A1C
AE0CF3BA8EE87AAF09B26608E7CCDAD1871172FEB048A19B541FCF91EC6884F2
FCADF9C7A2464770DCFE7D4532DB429EC596ED8D975B4FB9636BCF21B00E9B2E
C4D87403A23027045B042A885832AF69D9C2BCA76DB682F8A4280D78530810CA
8253632752502AC5AEB53E02C0AB5F2172616B54A23CD8B082F3192E222B2CD3
CFA521C62969BA28BC5970EB8CEFEEBB8BC62C54FA5D09E053BAD27822DD83C7
88B102297D34DB31BAA72D92A2967807A50284A2B97D24D18086FC98ADD44640
348FF9C26962D06D1BABDB7464FA4863E4D7B4B4D246CA2C2855CE68547D34E1
6FD463DE22BCFF0BC2B7DADA7C489E0D9F710362BCC70B7BC73635BFD74BA054
336D5251A91D5B7B2B335B3439A22DB91114BF051711643127DDE475512FE70E
4DCBDD6FB643026FD15ACE019E39E33EFBD71CE7822BD1121B2320F0F0F14AB4
C90618FB51175537C99EBDB343FAF765161FBA0D07C6527353048BFFCE7BB1E6
B08F88C9961E81378745F20B0AFDA2592D276DA74682A8CBA48832A5AECFE40D
98226FA8DF8DFEDBEE6D9D31FE5D967AD05CC71827F55945DA7E997FB5AFF69C
73A88EB0ED8C0F5F50F68F4A06DB43D9C5E3EE5EDE953E3751799081EC57E094
AA89E4724FDFDD9C8CF5AE18A669D37741A342835FB4A562E7174E43F24DC36A
7E1C1500B83AF43CE2D86913FB8E9F42824AC56C4EF8F55FEA29B98E5D5C7CAE
8A3653F71E90662208F007A2BC16D6C9B18141AA966316144992B609763726EC
E92ABC4FC8E0900E955C783F96D43AEB693ADE2E602D4067E1D377AE6DC0A4AF
045B1CADBB542C166FDADCC92D6C0AFC22EF221923449F40CA81EA5B574002E1
1ED9614EB50313CBBB8EAFC631DFA3BBB07D9B3E4D840FC41F374AF809A69FA8
3676934B634241247A69B536D7431ED70545979B9562F57B37DECB61DA9484F4
75E9E384FE1FA0A1A4419AB537699E21D812C00673331584556916C3BEF0AF74
5BFAD27DAE5A3574F04FB91FAC963E0F0745C23A4B589282731D199AE4E6D725
8009544ACA12AE6D02BD02DA6865A5D1675558621373D008C682C520A7CE8FAE
FF75B69B170B5B4297E5C82AC72AAC64DEA82FABC4D1FFDC56758D24319B87C1
2372D2C189CB1AC1CE9AA1B1D09172B11F0FE27C9EA2B89D907B555E3854BB58
D596A381CA6E6595FEDDC5EC76D64FF50F813A4F91CEDE9287D4A1D08197B919
9CEA71BFDF14E58AA966E25A45A33278FBCA2F4344F8FB8C0FE0F1547E78EEB2
752724BC3176D9199981CB7C534F9DD5EF6F8F369717BF3F0161A1D21B907B8D
7D15F766BF2FD5B8D3DCC12DDB7EAA01B177E83D093C19AAB21DA05220A58296
8548D1C5642ED55684D00C0C04AC4C37F892712079683FE9C316EBA9AA11DAEF
5D4FAA1F9A28832ED1059C899DC5E503C5A6436065787275A5CA9609061E355E
F7DFF46004844A116A50D7A202F326F026FC50D14D0DBA0CD3CB5887C185C64F
8CA5503E548AB6C6020655EE454A777A7778298225A531AEFD1E249362BF1999
B6EB817D21408CCBE824807CF12EACD452B7E54D80D50064F94CB759E9F2EBFF
75092A5D9CC8479DD8F13652320A8EBD7E36E83A331351909A6E6A552C6EE7BD
63C6BF7C050452B5DE97DA942F1BE784115DCDD13EB5B3C256B1F922333C3FA1
0F2EFA141F93553F447305DFF0A3D5C772011A87DFB00CDFF2050F9E86B36E1D
7B9084977AEBF2CAAA674BCD10BDAAC0CD8F8C76E74CB933364D405369305D52
5703C738C00D46513F0358C4975DFA21EBC0EABE63767F6A7346934CF1C8A86C
6F23E775A87F035CFAECC19D70E523925B3FE704EA659F9C0F18A9994108C149
D3EED13D4086E540AA1EE927E5D1CFD1DA72DB8F0172A310407D48FC76B4BAEC
1BAD7639F8255F883494F8981A7522D735BF20FA4CE74F7DE054BDC95825C3CC
D4B82B088AD10DF82D9D09790035078BE30C06CACDE90BD8E9EE83A4A276321F
9BA46CAC35C9FF11DE795757BE2F1F6A2EDCB059BED8448EA2AB7EB0F570D356
6BD61442A5080E98147E717B3442CE68C11AD6573C0BA2F21957D713499C2A95
FB2147E6447B7FF92897D92732586CBAEA2B50331EED3AB63617F6030D7EEC90
B50F0BCD5D45218538D9DF56CDAF745821140EF69DF281BCE90F050CEA28F54B
643A9BBEA1F48DD48082DF639336217962F03472BC263BB979F33A4896140441
4E2FD6A560A233B4E1C9EF77991B45762606C9D972C051BF6B8262094B012318
65965EB00DD406DAEE3F16C7E61874549FD693A72925ECB5ED1750E36CFD6A18
D519EE31DF923815737B520A91E41CA7C9289D8A20E8714F66BEB5F0259AE35B
5B1BA57C7015A7C7C24CE1C6C08D07D101672E1237ED2A33292572DE141ED855
FB306D0A4BD21EF0E72D037E7CE96EB06506C9F678172F869591CEFA48DA32ED
214318E63FCB112A4D3D92B6631DF270AD41030F8BA169E1ECCBED695E61760A
F322A877AAF87D3C7D1FD15AC13D13CDC771AE9C2ECCA70326B1238C1ED0687F
E732E08BC7FB67C33F49491D586131C77F5AFBA870F932C7A9262DD6A30C846D
F4A36D8CBCB4538F927FF9AB4A2D7CCD0FCA6A63D9315F8A056DA836E2D7AA6E
52A3683E1733FC6C4E0B51C35245000898D52501EEA317834D68B521B1CC7836
3E80B585EB799125F3E7AA3B5CD02D77EF6D83A816E7C997D24D8AA535AC7556
D67DA78354CFD306583C6EE98A87BFFAE48C8B87A1B87F363FAC73C4D7F17D96
2490AF813745FC5A625A2AA9E4DC59F03991DDD6D238FBD6FBC46550A6CA7D8A
A05D30F8AD3387C7A04CCB116AF9CD981212402385A08A022D0E563CB55395D8
DAD906DF4D31F4A4DC6DCEA9F8FF67284A0E49C623CFA461F55A5A7F2C6DC416
833E28C5AC0299A78AF6A3661C091D322D3F518AEC4BAF4D430C69B39AFF4B07
BDF3126BE531930BC3ED777AA328015D345505A1DEFB903C20EE4CBC9E4EB3AE
CCB256B5F2D395BBCBDCC1FEB36446AD9BA3676FA51D84A9C72C168CA6D854BC
9D032A892FA4065F6BBC683C8DF18FFCECF21339AE9D0B17CC10BC36CB741010
DBEBC601EB6D9D23FD723E83BB8F0717B0D6D97FF4E85AA662B37AE14B53095C
7C365D31344F1A95543266D2CBD28DEF6390C18189B87EC56A09209A33E52561
B5246BADC01CEC1CCF03AC33559FB2BC9D2C558D57CAD5FE03BB02DCB18B52B6
E03F18C9457EB1EF5BC08FE4A754D1702A4D3F1D06D011C5E55AF8844E546E9F
2DB459F6CB568C9753B9A003F008793B52A970689C0BEDC665F967F37AAAB012
4ED39C7B256D4609B55D1E2F7ABC9379EFA0BCF95F3BE75FBD626196B28D5B9B
AC0B2865D5EA13D77B776E3E6FC6F257FDCD03CFCCB250531A14FA97D5894B87
9F52EC9360341372CA5D9B17016772B4EB0563568B3916629CE1C0B394FACFBF
B8AA1C2EF8295EDAA067C82CC97705D07827B0AC33620F567949BA375ECCD559
263BCDD8A0C95838F46810B0B04249FAD8CCCA44B89C423A5D53AE7F007F9BE9
F1B5A3BC2C6206F98655F9DF0F2B6AB537C71B7BA34087C3D4FDECEE0F0CE569
C627B75CE8D383D3F438DEF0D8A49A45C85117AEB3C135B3AAF94C6549D6A3B6
E2F13011519DF7D736EA061B7E52430629764ADCAAB2A5A6D96F9F22214A0E7B
09D806B99E764C71E8E3D79BB23931DD85B2C6A25778D7EE23F19AEC125BAFDA
175D4004CA343A1AB97519B857F6AC0964BF090AFA5CC01CE603B0A3E43C814B
EF20D92EAFFD36C0E82F457AE39D86189B88AB83B8EF71A62697315998C95CD2
CA9A3DBBB8D119BFD1F805709A6FA5068483347A919F962A947377CB5EB50F0C
CEDB7B5FE9F163A76E9F3F25FAE807C9AC8074927C282F45FBBD2022D0FBC1AE
19ADDF6F8669C2123EFEC491462E8A0DE4147CC7ED581377DFCF602400478CC6
CCB974046D0798F885D79C3A44B71A2ABEA8DB761A2DAFC5406B0BF4DABFCD7C
A75D50DE8F3B9E14837E6B6F0E0623D286CDD144CCF5A5277DF3CF59F776D566
68B36629FC02295C0D35A437F7C27D4CDEB9466E4150A94B533E5215DE7D2FFF
10897DEB329F1CE69B5D6B15D09E04AD8EC9AD0DDF918B3061AD656210F94E9F
B2EDBFB4B8859053739A67101561DA940EAE026308D31522A5BD2ED5F6AE62E9
9430C9E788075A1214FCDE56DC6640502F6E811E53D92BB0A8C3121B13FF9C68
014AD6248686569F6206E29F7816E662D4F92C643DB85B115C092D48D66CC1DC
42F3E922C0D3DB946D60A810D062FF9436EAC77881BF315565CF172EE2B0036D
16DDFACB24FC6F77115D73F9E185EB79485695CADF77DCD9026ACE831B7C9FAB
FD878D3B0BAF06A7D5500C284308C6034C459352F8149CF3AF1B00A79A08E352
E64E1DF29F84075DF199FBB0988979B419D2C5178E20CDDEE3AE2A8290E0744C
D70EE9D40A3DA3536602131B84E612B65BC6D3F0DFDABF2B8DBB5460B4022F3D
EFDA2DBBFF04C880B145170FDFE7E74EB94F697FE0AA067D3DA381CD4CF2F9F2
C6AE5F08835BB1312847BDA9E4E5B7669A3C4CA285F35300F078B7A6EF924D6E
A8D9A22F921AA0873BA1756C84A0FC9D62A702F4293D1D7D5BD040FD37A57BB9
2CFE74B672CCF7C99A0AB86A288045A7A3D9EBD0A13DBD57540C8E5559EC5F98
2E91F5B5E24CCC67D61B7FBA7821E7239ADC1EB44CBB4946610B507CC3D8E439
CB7707F6F669495AA65200830902F84A069602F30EA7D9E489C52454EF99BE31
F6670DF2C8F9ECF23929A5E86C701A34A114777F3439F4C25AAC35B6D90A202B
010EBD09A2AD515AC281BFC4971AD57114ABB4755C46BB7132A4FCE6D98BF6B5
7D131CD142617FEFB03AD84AC7943C29F3E654D8C68791B74D80D6B1A55C9C22
ADE837B7F041CBBDC5FC7DBCAB5E9E2B2974859E597331C589100ABC35F0D704
8D5924A9FA6F99E945075D1BB7F2A86FB0D3799E6E509E94FE877420533E8BA1
267F8EE4DB744AB3026263176F3D64B3C3496A7F043C9691C0D54457FC6C4474
13CA52EE7BEE6BC063554059E8F5CADBDA0D97BCA80E1592A98E27A3F9933E7B
66F7972A316374C177746BD778E2F4C53604381B3D3E2ADF481233049A66547A
A31B3D7E3D70D69200FBF42017D744E7CEEEB4A9CC9E7FB09923C98F1500A3F6
71AFC2BFA93F00476F2E3C103BB0E7FB70C6D2436E233F7E84864F2B730E803E
6C200887C0AC4B0630AA474C1DCF21EB1229158A1DFED31A8DFA4318BBB52223
D7D7B9C84B18F2CE7FC82A5BD4F45C3E988951E2EFEE2DB63EBAEF33734216E6
D65C776985910F7C8D65AEEB8205E70585A2AAAEB7C4F27653152529050CB7F9
3BE8553BA2A452D1D94154D2694DD19EA9451D72D4A18CE028441D1BDF345A1C
F0135A58B5269360A9E503D3BE2AA5B3F5DEE4D64ECDBA0608A03F03551F7069
A674B8711467541E8A20ED567CB7FE7303774F8B861C12D2FD343FAECA52ACB9
37E3C2D88272206746C3B02251ED62186EC9D999BA604D91E105D7E5BC95259E
2E24BF022BD9A0677353A4292209BDE840BDDA5E5C5D8ECCDA6B2D2942E8C207
427EBD47167F76298908DFAD38E5047337061A41C367E47EC2341E4C718FE306
F87D2D65287AF28B7164E1A7F9FD16589883D9D87483980D8FCCE723EB31BA1A
71A3D0D3A69211208999669255A350164F69835E7ED2EC2A37890ADC9C1821DE
590708FB2693D0EFC1A7605A19B3C5A4812B6F628B2A987DA19EAF7DEB924986
E35C7786ADE4C7627624803DC5E29C6B653B56315A6BECD7101BD93D70F2D530
83779D15831A5DCDFDEBA4EF5188C3897BA9E2CE83C33037A932BDDE36BD5490
48C750124CE9432AC536FA8FBD8566C3DFDB7BDE8F2C52047B3828EFDE6AE42B
F3922EA4623AF8912FEDBF36E2DBBDB99A72181A2461A9FD9209694E7D0C5A1A
5BB7F0FE49B3B9A5D4B6E0F2BE6D772AA17D260F3E02DA6B9A60C7721D4F0D6E
EA81144D7B75E35780818496CC83B8FA6699B4C3A7F36254B68E8927DD70B86B
BE507BDEF5C47BABB4CB704E223B28B529E984CBE652A74F8C243CC26D27B79E
B6F15E55C18F4A7B4B6569DBD5AD9C7D87FB98FF9AE589545A46922A938201F8
E5BE4581F29F91D5D517D9445AAA5BBB70E15F8AC7887A59226CBC34EC86D25C
26138992F599946F8C97B197FA16799482E33551F5693B7FF91C98A7AFD7DD1F
A0420BE7ECBA10BE230658C413E2E4421C47FD27A1A983B5107FA1A9A12D9D47
1A08DD786B2A39D46884F04703C739B574A7B6AD534FB0CC2FCFEE0C0226940D
D6DBD0D6BE08CB9244F47A248320672D826C46E7105DDE5A2F720C908A320133
FBDE5B0E0734842B3B98FF5F1A1A3ACD361DECB896EAF844AB3E267ED785790F
612EBB9DB8D249F375467C5FA7F8A3992AB9DD549DB70199AF85E67E78F1D448
5CB9DCDAFFB6EDCFA24756E7178AD3ED924B1557D1B5AD7BF069672951762333
2BF11F7A9D93FE1948A09E34D1BB3A3725DFEC5FB223A0B66DD364A1DFEC827D
D7B593C1BCBAED5110212EB1F26D084F62747243802F2AE39662DF3A3EA15F1D
F91C42B5D2740323890FBD9B704DF8E9DABF605FF8130CCA17
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (plos_latex_template.dvi)
@start /Fa 136[44 2[44 44 44 1[44 44 44 44 3[44 44 44
1[44 1[44 44 44 38[44 44 2[44 1[44 44 1[44 44 44 44 46[{}24
83.022 /CMTT10 rf /Fb 135[59 2[62 44 44 46 59 62 56 62
93 31 2[31 1[56 1[51 62 50 62 54 10[85 86 78 62 84 1[77
84 88 106 67 2[42 2[70 74 86 81 16[56 56 2[31 37 45[{}37
99.6264 /CMBX12 rf /Fc 171[35 15[46 68[{}2 41.511 /CMMI5
rf /Fd 205[28 50[{}1 41.511 /CMR5 rf /Fe 140[31 3[33
1[59 21 5[32 2[30 15[41 7[56 75[{}8 58.1154 /CMMI7 rf
/Ff 136[59 4[37 2[40 2[25 6[39 1[36 30[69 8[23 59[{}8
83.022 /CMMI10 rf /Fg 172[46 2[53 61 2[45 76[{}4 83.022
/CMSS10 rf /Fh 198[22 22 22 22 22 22 22 22 22 22 48[{}10
41.511 /CMSS8 rf /Fi 136[97 1[75 52 53 55 1[75 67 75
112 37 71 1[37 75 67 41 61 75 60 75 65 13[75 100 4[128
3[50 4[103 2[102 65[{}26 119.552 /CMBX12 rf /Fj 91[64
10[45 19[42 42 132[{ TS1Encoding ReEncodeFont }4 83.022
/SFBX1000 rf /Fk 166[67 89[{}1 83.022 /MarVoSym rf /Fl
134[50 1[69 50 53 37 38 39 50 53 48 53 80 27 50 1[27
53 48 29 44 53 42 53 46 11[73 66 53 3[72 75 91 57 2[36
75 1[60 63 73 69 68 72 74 12[48 48 48 2[27 1[27 1[48
42[{}45 83.022 /CMBX10 rf /Fm 162[19 1[19 40[33 33 4[19
44[{}5 58.1154 /CMR7 rf /Fn 131[83 42 37 44 44 60 44
46 32 33 33 44 46 42 46 69 23 44 25 23 46 42 25 37 46
37 46 42 3[23 1[23 51 2[85 62 62 60 46 61 65 57 65 62
76 52 65 43 30 62 65 54 57 1[60 59 62 3[65 1[23 23 42
42 42 42 42 42 42 42 42 42 42 23 28 23 65 1[32 32 23
39[{}74 83.022 /CMR10 rf /Fo 134[62 62 85 1[65 46 46
46 62 65 59 65 98 33 62 1[33 1[59 36 52 65 52 65 59 12[85
65 86 1[80 91 88 1[73 1[60 6[85 1[88 19[39 45[{}33 119.552
/CMR12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1042 -406
a
SDict begin H.S end
 1042 -406 a 1042 -406 a
SDict begin H.R end
 1042 -406 a 1042 -406 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 1042
-406 a -300 -203 a @beginspecial 0 @llx 0 @lly 216 @urx
35 @ury 1440 @rwi @setspecial
%%BeginDocument: PLOS-submission.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PLOS-Submission.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Richard Basset
%%CreationDate: 1/13/2015
%%BoundingBox: 0 0 216 35
%%HiResBoundingBox: 0 0 216 34.6541
%%CropBox: 0 0 216 34.6541
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-13T11:29:27-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-13T11:29:27-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-01-13T11:29:27-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J+btcm0Hytq+twWrX02&#xA;m2c91HZpUNK0MZcJUBiK08Dirzv8iPzqv/zB8t6vq+vWMGkR6TOsbXiOyWroycj8Up+Fo/2vi7jp&#xA;iqfzfnt+T0U7QP5t04upoSkvNK+zoGQ/OuKoz8sdB8paRod1/hbV5NZ03UL2e/N0959eVZLhuTIk&#xA;gLUA9zyJqWJJxV5J+V//ADlDrvnD81l8qXehw22lXr3Edi8fq/WoDBG8lbgsxRqiOh4ovE+OKve9&#xA;b17RNB059S1q+g06wjKq91cyLFGCxoo5MQKk9MVY0Pzr/KMmn+L9K/6Sov64qyjSda0bWLQXmkX9&#xA;vqNmxoLm0lSeMkducZZcVS3zH598leWp4YPMGt2Wlz3Cl4YrqdInZAaFgrGtK7VxVObW6tru2iur&#xA;WVJ7adFkgnjYOjo4qrKwqCCDUEYqq4qlPmDzd5V8uxLLr2r2elpJ/dm7njhL/wCoHILfRiqXaD+a&#xA;H5da/cra6P5k069u3/u7WO4j9Zt6fDGSHP0DFWT4qlPmPzd5X8s2gu/MGq2ul27VEb3UqxlyOoRS&#xA;eTn2UHFUm0P83vyw129Wx0rzNp9zeSGkVv6ypI5PZFfiXPsuKsvxVjfmnzVcaLrXlfT4oElTX9Qe&#xA;xmdiQY1W1muOS06msIG+KskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ8l/mx5G85WGqahoWo&#xA;etaaM5W/lkjeIIoUsJPjAqjKjEH2xV4pceXbv86dK1Tzj5n1e48s/lhprTvoemWqqhlhtuXq30/I&#xA;Fa1U0+E9wKUqyqSeTvyw1fStN078wtc8pWfm3y5Pb1i0IW8EWoWWnl2eG5+rQpFaXcrxMHkDKXO1&#xA;CN6KpJ5L03U9H81eePMX5S6q09j5eNpqcGlAl7a+0y7jaeW1kRvi9W3X4RUc6hhs4FVX09+Xf+Av&#xA;MGmW3n3y9pFna3euw+pcXsUESXJcsRNHLKqhmZZVIffcjFXmX/Oav/krNK/7blv/ANQd3ir5i/Ln&#xA;8m/O35hwX83luKCVNOaNLn15liNZQxXjXr9g4qq+UfNXnX8oPzBbkslpeafOINa0pmBjniB+ONwC&#xA;UaqmqOOmzDFWZ/8AOX9zDdfmlZ3UDcoZ9GtJYm8Vd5WU/ccVfUv5A/8AkmvKf/MCv/EmxVLf+cgv&#xA;zf8A+Vb+UEmsQknmHVWaDSo3HJU4gGWdh3EYYUHdiO1cVfG/lfyN+Zv5ta/d3Vkk2q3ZblqGrXkn&#xA;GKMtuA8r/wDCooJp0FMVTPz7/wA47/mf5H0o6zqVpDc6bDQ3F5YS+sIKmgMilUdRX9rjT3xV7L/z&#xA;it+e+r6rqK+Q/NF095O8bPoeoTHlKfSUs9vK53f4FLIx32IJPw0VeBfmL5o1nz/+Zd7d3d0K3l8b&#xA;TT1nfhDbwer6cKVOyIq0LmnWrHfFWX+bf+cUfzZ0FIZbO2g1+GYhS2mOzOhP86SrE1P8oVHjTFX2&#xA;L+Vmh+YdC/L3QtK8xXb3us2tqq3kshDMrElhDyFeXoqRHyrvxriqVfmT/wApf+XP/bcl/wC6bdYq&#xA;z/FWAeY/z3/K/wAvaxLo+o6vS+t39O6SGGaZYmHUO8aMtR0IUkg7HFaTq8/MfyhaT+XoXvvUPmli&#xA;uiSRI8iTU4ftKCF/vl+1TFUTc+dfL1t5vtPKM07Lrt7bG8t7cRuVMKlwWMgHAf3LbE4qwqL/AJyW&#xA;/J55AjaxJGD+29pc0Hz4xsfwxTTIPNP5u+QvLFjpd/qmo/6HrSPLps8Eck6SpGELMDGGp/er1xQq&#xA;+bvzT8leUrjT7fW74wzampezWOKSbkoIHImMNQEttXFUTF+YXlKTWda0g3oiu/L0Qn1Yyq0cUMRU&#xA;NyMjAIRQ9jiqQaJ+fn5V61rMOkWOsVvLlxFberBPFHI5NFVXkRQC3blSuK0ivN/50/lz5S1Q6VrO&#xA;qcNRUK0ttDFLM0YcVXmY1ZVJG9Ca03pitIu7/NXyLbaJpeuHUhNpes3C2mn3EMcjh5mr8DKF5IRx&#xA;NeQFO+KqXnL83/y+8nXqWGu6oIb91D/VIo5J5FU9GcRqwSvbkQT2xVEWX5oeR7/ypd+arHUludGs&#xA;FLXksaP6kVKVV4iokB3/AJd+2Krrr8zPJtt5Lj86PelvL0oQpdJG7mrv6VDGBzBD/CRTbFWK/mh5&#xA;U8v+U/yc87jytpkGlG9sppLsWkYTnzHByePYIzbdAMVSHzLFbN+RHkHyvZMIrPzTJoOjySRnf0Ll&#xA;UnuCCKV5xxPXxqcVeneTLvzfPHqcXmLSbbSYrS8kg0ZLWb1hLYoAIpGFPhJHy/1V7qvmzRPzDXyT&#xA;+bvnbzXa2UVx5V1XVptDksLXiLmW+t4meN7ePq4eYFXI2/eAntirNP8AnG3zRb+W/wAlde1nzCPq&#xA;Wm6Rq96SkSmQRx8YSUjROR/vpGUf5nFUN/zmBqlhq35MeX9U0+X17G+1e0uLWYArzilsrpkajAEV&#xA;B7jFXzn+WX51ecfy4t9Qg8vJaMmpNG9wbqJpSDCGC8eLpT7ZxVT8t+XvO35v/mG1S93qOpzibVdR&#xA;4Uit4js0j8QFVVRaIvfZRirNf+cvbWG0/NGytIBxht9Gs4ol8FR5VUfcMVfU35A/+Sa8p/8AMCv/&#xA;ABJsVfOn/ObU12fzA0OBv95E0kPDvt6j3Mok2/1UTFXun/OL1hpNr+SugyaeF5Xf1ie9kAAZ7j13&#xA;R+dO6hAg/wAkDFXqN1bW11azW11Gs1tOjRzxSAMjxuCrKwOxBBocVfnV+WhjtPzs8tppUjNbJ5gt&#xA;YreRTyLW7XaoTXuGiO58MVem/n9/zjZ5o03zDqHmbylZPqmhX8r3U1nbAvc2skh5SL6Q+J4uRJUo&#xA;DxGxG1Sqwj8vP+cg/wAzPIU0Vkl4+o6Tbt6cmjahydUVTQpE5/eQkb0APEHqpxV9wfl3580fz15S&#xA;svMmlckgugVlt3IMkMyHjJE9O6noe4oe+KpJ+ZP/ACl/5c/9tyX/ALpt1irP8VfMV5aXfq+dta8g&#xA;6/pt7oNzcTzeZPLOtw+i3qbvKo9YBmHItxIdN9q1GKVt95g0q/i/JHWorGLQ9MTULxZYFLC2hZbq&#xA;BXKvJ0RmRmFTt0rtirNNWura8/5yn8vNaSpcLbaFIlwYmDiNq3Ro/GvE0kXr4jxxV5X+X9l+YV3+&#xA;TGuxaTq+kWvl52u/rljfCly9IkMpR2VlWq04Hx7jriqI80WVh5t8l/lLpml28tulzb6xaQQytzf6&#xA;zCIkDcwEDBpk5bAeGKsS1bWL/wA4WNhrt0GEXlq30fQ46nZpGMrGT3J9Jq/7WKXq12+gL+Yv5wDz&#xA;BNJb6PLYW0N1cQo8rxiZYo1cIlWPF3B/XtihIri81nyrpXlKfWLnRfPHkgXEMeiIE9K/gR15BkRQ&#xA;sistNwxfeitvTFWS65p9zdfmR5r1P8u/Mtja6sFEPmbQtZh4RSekCj+nJMjh424VPGgH81CMVYnq&#xA;WvafrP5V+T5rPSoNINv5rS3ube05C3eZY+RliDlyAyuv7R3rirOPyrn8vQ/m9+Y48yPbx6+2oOdO&#xA;a+KCQ2XOX+5L/s+iY60/Zp2xVh9++lyar+cr+WPTPlY6bBva8fqxuax1KcPhpz9enHbFWJ+YJNc8&#xA;nfl1/ha853Og+b7HTdc0e4ptFckQy3MX9R7If2jil9V+Z9WF3r1v5Hu9Bvb3SfMFhdi+1eNV+qQp&#xA;x4NFKxNQXVvvK05VPFYvk7Xbzz9+Wt3ZeUNe1lRa+WNYtdX8rR39q8tpcQI7RCWO4iZZeEazlpIe&#xA;1DxIIoVXq/5oefvzh8t+X7a4l80aDFrGq+nHoelaDYS3dxePM1EeM3U0o4UI+PgR2AJO6rA9e8ie&#xA;TPLHkq08k6Varr/51eYTb/WJ7aQzzWMwuEuJHMgbjb+mF48hRmHxN8NcVfSf5afl/ZeTfy/07yo3&#xA;C6EMLDUHZapPNOS05KtWqlmIAP7NBiry3/nNNVX8qtJVQFVdctwqjYACzuthirz/AP5xE/L7yX5q&#xA;sfMk/mPR7fVJLKe0FqbheYQOspYAVpQ8RWuKvrDQ/LugaDZiy0TTbbTLQb+haQpChPiQgWp9zir4&#xA;w/5zJ/8AJuQ/9sq2/wCTs2Kpr5A/5y8/wj5N0ny3/hP67+i4BB9b/SHpepQk8vT+rScevTkcVTfz&#xA;zPN/zkN+XMvmjQNFksfMvlK4eKTTRKLg3NrMiuyxOEiLOvHkqlfECpYYq8v/ACg/PzzZ+WLT2ENu&#xA;mpaJPIZLjSrhmjKS04s8UgDGNjxAaqsNuld8VZb+ZH/OXnmjzToM+i6JpSeXoLxDFeXIuDc3DRts&#xA;yRv6cAjDDYniTToRiqN/5xK/KLUtT8zQ+e9Tt2h0XSuR0wyAj6zdMpTkgPVIQSeX81AK0aiqtrX/&#xA;ADl3570r8ytUK2kVx5YtriS1i0OeMQyhIWKep6wX1UlfjUhuSjpx74q82/PL80dD/MbzLbazpmhD&#xA;R5IoPSu5mZWmuXrVWk4BV+AfCp606mgACr6d/wCcQPL+raT+U5uL9Wji1e/lvrGJhQ+gY44Q++/x&#xA;mEke1COuKsw/Mn/lL/y5/wC25L/3TbrFWf4qwLzD+Rf5XeYNYk1fUtFVr6dudy8M00CysdyzpE6L&#xA;yPcgVPfFbTvWfy78laz5dg8uahpMEmjWvH6raoDEIStQDE0ZVkO5qQd++KobyX+VvkXyZLLP5e0t&#xA;bW6nT05rp3kmlKVrxDys/FagVC0BoK4qkI/5xx/JkEEeXenjeXx/XPim2Uyfl/5OebQ5v0ZHG/lo&#xA;udEWJpIktzLx50SNlRuXAfbB/XihLF/Jv8tl0y40xdGVbG6vF1GeET3I5XMYIR+Qk5AAMaKDx9sV&#xA;TNPIHlBNV1jVf0aj3uvxCDV3keSRJ4goXg0Ts0YHEU+FRirH9G/Ib8qtH1mLV7HRFF3A/qW4lmnm&#xA;jjcdGWOR2Wo6ioNO2K2ivNv5Mflx5r1M6prWkiXUGCiW5illgaQKKD1PSZA2wpUitO+K2jbj8rvI&#xA;U+jabor6RGumaROt1p9tFJLEI51rSQtG6s7bmvMmvfFVDzj+UX5fecLtb3XdKWa+VQv1uJ5IJWUd&#xA;A7RMnOnblWnbFUVZflp5GsfLF15Xs9Jjg0O9BF5bRvIGlrTd5uXrMdhuXrirtb/LTyRrnl7T/L2q&#xA;6WtzpOlLGmnwGSZWiWGP0kCyo6y/Y2NW371xVk2KvMv+ch9a8m6J+XkuoeavL6eZLT6xHBbWDt6R&#xA;E0oPxicBnhoqt8SCvbvirzf8svyE/J/z55X07zlYQ6xpIuvUUWAvg/omF2heNJTHzZPhNDUGh7Yq&#xA;yDzjpd/+TVpokX5S+RItVk1Od4dXuzFcXdwETgY0aVG9RfVLMQzHgvH7O+KvdELFFLDixAJWtaHw&#xA;rirHfPv5f+WPPeg/oTzFbtcWQmS4iMbtG8csYKh0Ze/F2X5E4qhfy7/K7yf+X1hdWXlu2eFL2QS3&#xA;Us0jSyOyjioLN2UE0A8cVZbirz/8wvyK/Lzz9qsGq+YLWY6hBD9XE9vM0RaMMWVXAqDxLGh98VYr&#xA;/wBChfk3/wAs19/0lt/TFXoP5e/lp5S8gaXPpvlu2eGG5l9e4klkaWR3oFFWbsAKADFUp87fkP8A&#xA;ld5yumvtY0ZF1GQ1kv7RmtpnPcyGMhZCfF1JxVIvL/8Aziv+TWj3SXTaXLqcsZqi6hO0sdQa7xL6&#xA;cb+FGUjFXrMEEFvCkEEaxQxKEjiQBVVVFAqqNgBirBfPn5G/lp54na71vSVXUmFDqVqxt7g0FBzZ&#xA;Phkp25q2Ksb8v/8AOKH5PaPqEd69lc6o8RDRw6hP6kIYGoJjRYlf5PUe2KvX4444o1jjUJGgCoig&#xA;BVUCgAA6AYqxPzr5e1XVPMXky9sow9vo+qSXd+xZVKRNZTwggEgt8cqigxVl2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KpP5u/wl/h+6/wAW/Uv0DQfW/wBJen9W6/Dy9X4a8qce9em+Kq3lz/Dv&#xA;6Ds/8OfVf0H6Y+ofUPT+renU/wB16XwUrXpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.805556</stDim:w>
            <stDim:h>17.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">rough-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:54570bd4-44fc-4daa-af13-191c026bfe24</stRef:instanceID>
            <stRef:documentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEE5A5CD5E72E311A5DAE32040218A44</stEvt:instanceID>
                  <stEvt:when>2014-01-02T13:33:25-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</stEvt:instanceID>
                  <stEvt:when>2015-01-13T11:29:27-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -34.654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 34.654 li
216 34.654 li
216 0 li
cp
clp
21.6844 2.60761 mo
22.4047 2.60761 22.9888 2.02407 22.9888 1.30352 cv
22.9888 .583607 22.4047 0 21.6844 0 cv
20.9648 0 20.3806 .583607 20.3806 1.30352 cv
20.3806 2.02407 20.9648 2.60761 21.6844 2.60761 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
33.4875 18.1845 mo
32.7669 18.1845 32.184 18.7681 32.184 19.4881 cv
32.184 20.2086 32.7669 20.7922 33.4875 20.7922 cv
34.2081 20.7922 34.791 20.2086 34.791 19.4881 cv
34.791 18.7681 34.2081 18.1845 33.4875 18.1845 cv
cp
f
25.355 29.5761 mo
24.4266 29.5761 23.6747 30.3283 23.6747 31.257 cv
23.6747 32.1858 24.4266 32.9383 25.355 32.9383 cv
26.2842 32.9383 27.037 32.1858 27.037 31.257 cv
27.037 30.3283 26.2842 29.5761 25.355 29.5761 cv
cp
f
15.1998 16.0573 mo
14.498 16.0573 13.9303 16.6255 13.9303 17.327 cv
13.9303 18.0282 14.498 18.5964 15.1998 18.5964 cv
15.9013 18.5964 16.4689 18.0282 16.4689 17.327 cv
16.4689 16.6255 15.9013 16.0573 15.1998 16.0573 cv
cp
f
3.1565 13.1063 mo
3.1565 12.2349 2.45011 11.5282 1.57809 11.5282 cv
.70677 11.5282 0 12.2349 0 13.1063 cv
0 13.9786 .70677 14.685 1.57809 14.685 cv
2.45011 14.685 3.1565 13.9786 3.1565 13.1063 cv
cp
f
3.91145 23.8113 mo
3.19154 23.8113 2.60768 24.395 2.60768 25.1149 cv
2.60768 25.8357 3.19154 26.419 3.91145 26.419 cv
4.632 26.419 5.21554 25.8357 5.21554 25.1149 cv
5.21554 24.395 4.632 23.8113 3.91145 23.8113 cv
cp
f
7.78818 6.86214 mo
8.90709 6.86214 9.81282 5.95609 9.81282 4.83782 cv
9.81282 3.71979 8.90709 2.81343 7.78818 2.81343 cv
6.67016 2.81343 5.76411 3.71979 5.76411 4.83782 cv
5.76411 5.95609 6.67016 6.86214 7.78818 6.86214 cv
cp
f
29.6443 2.67612 mo
28.2797 2.67612 27.1742 3.78213 27.1742 5.14648 cv
27.1742 6.51139 28.2797 7.61709 29.6443 7.61709 cv
31.0095 7.61709 32.1149 6.51139 32.1149 5.14648 cv
32.1149 3.78213 31.0095 2.67612 29.6443 2.67612 cv
cp
f
13.2783 30.4683 mo
12.1219 30.4683 11.1855 31.4045 11.1855 32.5606 cv
11.1855 33.7166 12.1219 34.654 13.2783 34.654 cv
14.4347 34.654 15.3712 33.7166 15.3712 32.5606 cv
15.3712 31.4045 14.4347 30.4683 13.2783 30.4683 cv
cp
f
18.3194 27.6162 mo
18.8034 27.2154 20.5164 25.6351 21.9182 22.3404 cv
23.3537 21.7262 24.4447 21.1135 25.2761 20.5363 cv
25.7488 22.2099 25.5369 23.362 25.2982 24.0092 cv
23.5878 26.032 21.1104 27.3846 18.3194 27.6162 cv
cp
8.91382 23.0564 mo
9.694 23.449 10.5398 23.7048 11.3998 23.8636 cv
11.5669 24.6206 11.8071 25.3925 12.1395 26.1616 cv
10.8501 25.3754 9.74835 24.3123 8.91382 23.0564 cv
cp
10.323 10.0407 mo
11.6741 9.16813 13.1957 9.18014 14.6654 9.6221 cv
13.6346 11.0175 12.5728 12.9749 11.8713 15.6458 cv
11.8713 15.6458 10.6909 18.8385 11.1931 22.6841 cv
8.32568 22.0502 7.68528 20.4494 7.68528 20.4494 cv
7.68528 20.4494 7.67855 20.4479 7.66842 20.4466 cv
7.36768 19.4825 7.20552 18.4576 7.20552 17.3955 cv
7.20552 14.513 8.40217 11.906 10.323 10.0407 cv
cp
23.3316 17.6354 mo
23.3316 17.6354 23.3955 17.3439 23.4741 16.8534 cv
24.097 17.7788 24.5476 18.6204 24.8652 19.3781 cv
24.093 19.9697 23.2475 20.4734 22.475 20.8779 cv
22.803 19.9159 23.0976 18.8388 23.3316 17.6354 cv
cp
19.969 7.47977 mo
19.7452 7.39593 li
19.8216 7.41316 19.8987 7.42945 19.9746 7.44907 cv
19.9709 7.46845 19.969 7.47977 19.969 7.47977 cv
19.969 7.47977 22.1258 8.60176 22.0856 13.2301 cv
21.8365 12.9739 21.6844 12.8323 21.6844 12.8323 cv
19.8468 10.9397 18.0433 9.81622 16.5386 9.14725 cv
17.487 8.19051 18.6241 7.53142 19.969 7.47977 cv
cp
15.404 8.70348 mo
14.2528 8.3143 13.3837 8.2068 12.9675 8.1773 cv
14.2086 7.56916 15.5889 7.20615 17.0475 7.14777 cv
16.6188 7.47549 16.0379 7.98199 15.404 8.70348 cv
cp
19.9003 22.0275 mo
16.5828 22.8949 14.1445 23.0552 12.3584 22.8709 cv
12.1788 21.502 12.1895 19.747 12.5578 17.4987 cv
12.5578 17.4987 13.5031 13.004 15.7729 10.0346 cv
18.7605 11.3574 21.2729 14.067 21.2729 14.067 cv
21.5256 14.3468 21.7593 14.6187 21.9845 14.8874 cv
21.8835 15.8435 21.7013 16.9127 21.4102 18.116 cv
21.4102 18.116 21.0477 19.9061 20.181 21.9228 cv
20.0044 21.991 19.9003 22.0275 19.9003 22.0275 cv
cp
17.2644 27.6494 mo
16.8356 27.6414 16.4139 27.6076 15.9993 27.5483 cv
17.2644 27.6494 li
cp
15.0916 27.3748 mo
14.8318 27.3127 14.5745 27.2418 14.322 27.1604 cv
13.8247 26.7528 13.0191 25.8419 12.5706 24.0227 cv
15.8991 24.3203 19.0765 23.4001 19.0765 23.4001 cv
19.2393 23.3473 19.3928 23.2935 19.5495 23.2404 cv
18.551 25.1084 17.1019 26.8827 15.0916 27.3748 cv
cp
27.7056 17.9791 mo
27.6291 19.3357 27.2873 20.6226 26.7326 21.7895 cv
26.657 21.0962 26.4985 20.415 26.2786 19.7565 cv
27.0818 19.0458 27.4943 18.4269 27.7056 17.9791 cv
cp
27.5625 15.6003 mo
27.4489 15.0972 li
27.5348 16.4081 26.8259 17.578 25.8124 18.5663 cv
25.2113 17.2364 24.4195 16.0425 23.6888 15.0923 cv
23.8461 13.2347 23.8322 10.7121 22.988 8.75782 cv
25.3517 10.2751 27.0541 12.7328 27.5625 15.6003 cv
cp
17.4643 5.49018 mo
10.8888 5.49018 5.55836 10.8199 5.55836 17.3955 cv
5.55836 23.9711 10.8888 29.3015 17.4643 29.3015 cv
24.0402 29.3015 29.3697 23.9711 29.3697 17.3955 cv
29.3697 10.8199 24.0402 5.49018 17.4643 5.49018 cv
cp
f
110.132 20.0839 mo
109.476 17.8999 107.385 16.464 105.444 15.5069 cv
104.722 15.1506 103.926 14.9347 103.221 14.5548 cv
102.655 14.2507 102.02 13.9737 101.488 13.6165 cv
100.768 13.1327 100.389 12.7669 100.493 11.8821 cv
100.627 10.7404 101.955 10.3604 102.921 10.6292 cv
103.579 10.8123 104.163 11.0294 104.785 11.3163 cv
105.32 11.5635 105.879 12.1382 106.422 12.3007 cv
107.076 12.4963 107.579 12.2666 108.124 11.9253 cv
108.627 11.6111 109.792 9.59291 109.766 9.00107 cv
109.736 8.32656 109.2 7.78818 108.652 7.45889 cv
107.653 6.85723 106.586 6.2718 105.461 5.9493 cv
103.245 5.31568 100.8 5.33047 98.6792 6.29054 cv
97.0625 7.02216 95.754 8.45162 95.1944 10.1356 cv
95.0218 10.6584 94.9444 11.257 94.8682 11.8013 cv
94.5402 14.1607 95.9954 16.4713 97.826 17.8304 cv
98.6706 18.4576 99.6099 18.9361 100.568 19.363 cv
101.504 19.7798 102.512 20.1067 103.344 20.7206 cv
103.949 21.1681 105.113 22.2996 104.365 23.2462 cv
104.105 23.5859 103.585 23.9862 103.223 24.0998 cv
101.317 24.6963 99.6406 23.0198 98.1178 22.2339 cv
96.9482 21.6295 96.2682 22.6617 95.7577 23.5543 cv
95.2134 24.5074 94.3916 25.6346 95.3977 26.6294 cv
95.7995 27.064 96.1994 27.3331 96.6613 27.5871 cv
98.1061 28.3798 99.643 29.0014 101.299 29.197 cv
102.727 29.3663 104.352 29.2545 105.709 28.7533 cv
106.887 28.3192 107.699 27.7631 108.607 26.9012 cv
109.527 26.0258 110.048 24.8182 110.417 23.6243 cv
110.731 22.6074 110.43 21.0806 110.132 20.0839 cv
cp
f
69.1452 23.7769 mo
61.863 23.7769 li
61.863 7.01693 li
61.863 6.37257 61.3408 5.84979 60.6958 5.84979 cv
57.5397 5.84979 li
56.8947 5.84979 56.3725 6.37257 56.3725 7.01693 cv
56.3725 27.7913 li
56.3725 28.4357 56.8947 28.9584 57.5397 28.9584 cv
69.1452 28.9502 li
69.789 28.9502 70.3117 28.4277 70.3117 27.783 cv
70.3117 24.9441 li
70.3117 24.2997 69.789 23.7769 69.1452 23.7769 cv
cp
f
46.0938 15.9547 mo
43.6096 15.9547 li
43.6096 11.2177 li
46.197 11.2196 li
47.8887 11.2196 48.9354 12.4705 48.9354 13.6297 cv
48.9354 14.912 47.6608 15.9547 46.0938 15.9547 cv
cp
46.1982 5.86734 mo
46.1982 5.86734 42.4916 5.84979 42.4425 5.84979 cv
39.2866 5.84979 li
38.6416 5.84979 38.1186 6.37257 38.1186 7.01693 cv
38.1186 27.7913 li
38.1186 28.4357 38.6416 28.9584 39.2866 28.9584 cv
42.4425 28.9584 li
43.0869 28.9584 43.6096 28.4357 43.6096 27.7913 cv
43.6096 21.3066 li
46.0938 21.3066 li
50.6124 21.3066 54.2883 17.863 54.2883 13.6297 cv
54.2883 9.34967 50.6579 5.86734 46.1982 5.86734 cv
cp
f
81.9155 10.9726 mo
78.3668 10.9726 75.4803 13.8594 75.4803 17.4078 cv
75.4803 20.9562 78.3668 23.8427 81.9155 23.8427 cv
85.463 23.8427 88.3501 20.9562 88.3501 17.4078 cv
88.3501 13.8594 85.463 10.9726 81.9155 10.9726 cv
cp
81.9155 29.1289 mo
75.4527 29.1289 70.1938 23.8707 70.1938 17.4078 cv
70.1938 10.9446 75.4527 5.68674 81.9155 5.68674 cv
88.3777 5.68674 93.636 10.9446 93.636 17.4078 cv
93.636 23.8707 88.3777 29.1289 81.9155 29.1289 cv
cp
f
119.955 31.7399 mo
118.848 31.7399 li
118.848 3.04441 li
119.955 3.04441 li
119.955 31.7399 li
cp
f
128.593 18.5605 mo
130.57 18.3682 li
130.689 19.032 130.93 19.5191 131.294 19.8302 cv
131.657 20.1416 132.148 20.2971 132.766 20.2971 cv
133.42 20.2971 133.914 20.1588 134.245 19.8818 cv
134.577 19.6051 134.743 19.281 134.743 18.9106 cv
134.743 18.6726 134.673 18.4702 134.534 18.3031 cv
134.394 18.136 134.15 17.9907 133.803 17.8673 cv
133.565 17.7847 133.022 17.6385 132.176 17.4278 cv
131.087 17.1578 130.323 16.8261 129.883 16.4326 cv
129.265 15.8789 128.956 15.2041 128.956 14.4077 cv
128.956 13.8953 129.102 13.4159 129.393 12.9696 cv
129.683 12.5237 130.102 12.1837 130.649 11.9502 cv
131.196 11.7171 131.855 11.6004 132.629 11.6004 cv
133.892 11.6004 134.843 11.8771 135.481 12.4309 cv
136.119 12.9847 136.454 13.7236 136.486 14.6478 cv
134.455 14.7372 li
134.368 14.22 134.181 13.8483 133.895 13.6217 cv
133.609 13.3953 133.18 13.282 132.608 13.282 cv
132.018 13.282 131.556 13.4033 131.222 13.6456 cv
131.006 13.8014 130.899 14.0096 130.899 14.2704 cv
130.899 14.5084 131 14.712 131.201 14.8813 cv
131.457 15.0966 132.079 15.3205 133.068 15.5539 cv
134.057 15.7873 134.788 16.0287 135.261 16.2781 cv
135.735 16.5275 136.105 16.8685 136.373 17.3009 cv
136.641 17.7334 136.774 18.2678 136.774 18.9036 cv
136.774 19.4804 136.615 20.0203 136.294 20.5234 cv
135.974 21.0271 135.521 21.4012 134.935 21.6457 cv
134.349 21.8905 133.619 22.0131 132.745 22.0131 cv
131.473 22.0131 130.496 21.7191 129.815 21.1309 cv
129.133 20.5431 128.726 19.6862 128.593 18.5605 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
138.47 11.7718 mo
140.502 11.7718 li
140.502 17.222 li
140.502 18.0869 140.527 18.6474 140.577 18.9036 cv
140.664 19.3154 140.872 19.6462 141.198 19.8956 cv
141.526 20.145 141.973 20.2697 142.541 20.2697 cv
143.117 20.2697 143.552 20.1518 143.845 19.9162 cv
144.138 19.6803 144.313 19.391 144.373 19.0479 cv
144.433 18.7045 144.463 18.1348 144.463 17.3387 cv
144.463 11.7718 li
146.494 11.7718 li
146.494 17.0573 li
146.494 18.2653 146.44 19.1189 146.33 19.6174 cv
146.22 20.1165 146.018 20.5372 145.722 20.8806 cv
145.427 21.2237 145.032 21.4971 144.538 21.7007 cv
144.044 21.9043 143.399 22.0063 142.602 22.0063 cv
141.641 22.0063 140.913 21.8951 140.416 21.6734 cv
139.92 21.4513 139.527 21.1632 139.239 20.8085 cv
138.951 20.4537 138.761 20.0821 138.669 19.6929 cv
138.537 19.1164 138.47 18.2653 138.47 17.1397 cv
138.47 11.7718 li
cp
f
150.674 17.4483 mo
150.674 20.1392 li
152.555 20.1392 li
153.287 20.1392 153.751 20.1186 153.948 20.0775 cv
154.25 20.0225 154.496 19.8886 154.686 19.6757 cv
154.876 19.4632 154.971 19.1782 154.971 18.8213 cv
154.971 18.5193 154.898 18.2632 154.751 18.0525 cv
154.605 17.8421 154.393 17.6888 154.117 17.5927 cv
153.84 17.4966 153.239 17.4483 152.314 17.4483 cv
150.674 17.4483 li
cp
150.674 13.4466 mo
150.674 15.7735 li
152.006 15.7735 li
152.797 15.7735 153.289 15.7621 153.482 15.7394 cv
153.829 15.6983 154.103 15.5782 154.302 15.3788 cv
154.501 15.1798 154.6 14.9181 154.6 14.5932 cv
154.6 14.282 154.515 14.0289 154.343 13.8345 cv
154.171 13.6401 153.917 13.5222 153.577 13.481 cv
153.376 13.4583 152.797 13.4466 151.841 13.4466 cv
150.674 13.4466 li
cp
148.642 11.7718 mo
152.665 11.7718 li
153.461 11.7718 154.055 11.8053 154.446 11.8713 cv
154.837 11.9379 155.187 12.0762 155.496 12.2865 cv
155.805 12.4972 156.062 12.7774 156.269 13.1275 cv
156.474 13.4776 156.577 13.8702 156.577 14.3048 cv
156.577 14.7762 156.45 15.2087 156.196 15.6021 cv
155.942 15.9956 155.598 16.2907 155.164 16.4876 cv
155.777 16.6661 156.248 16.9704 156.577 17.4004 cv
156.907 17.8307 157.071 18.3363 157.071 18.9174 cv
157.071 19.375 156.965 19.8201 156.752 20.2525 cv
156.54 20.685 156.249 21.0305 155.88 21.2888 cv
155.512 21.5474 155.058 21.7065 154.518 21.7661 cv
154.179 21.8027 153.362 21.8254 152.068 21.8346 cv
148.642 21.8346 li
148.642 11.7718 li
cp
f
158.76 21.8346 mo
158.76 11.7718 li
161.801 11.7718 li
163.627 18.636 li
165.432 11.7718 li
168.48 11.7718 li
168.48 21.8346 li
166.592 21.8346 li
166.592 13.9135 li
164.595 21.8346 li
162.639 21.8346 li
160.648 13.9135 li
160.648 21.8346 li
158.76 21.8346 li
cp
f
170.436 21.8346 mo
170.436 11.7718 li
172.468 11.7718 li
172.468 21.8346 li
170.436 21.8346 li
cp
f
173.889 18.5605 mo
175.865 18.3682 li
175.985 19.032 176.226 19.5191 176.59 19.8302 cv
176.953 20.1416 177.444 20.2971 178.062 20.2971 cv
178.716 20.2971 179.21 20.1588 179.541 19.8818 cv
179.873 19.6051 180.039 19.281 180.039 18.9106 cv
180.039 18.6726 179.969 18.4702 179.829 18.3031 cv
179.69 18.136 179.446 17.9907 179.098 17.8673 cv
178.861 17.7847 178.318 17.6385 177.472 17.4278 cv
176.383 17.1578 175.618 16.8261 175.179 16.4326 cv
174.561 15.8789 174.252 15.2041 174.252 14.4077 cv
174.252 13.8953 174.398 13.4159 174.688 12.9696 cv
174.979 12.5237 175.397 12.1837 175.945 11.9502 cv
176.491 11.7171 177.151 11.6004 177.924 11.6004 cv
179.187 11.6004 180.138 11.8771 180.777 12.4309 cv
181.415 12.9847 181.75 13.7236 181.782 14.6478 cv
179.751 14.7372 li
179.663 14.22 179.477 13.8483 179.191 13.6217 cv
178.905 13.3953 178.476 13.282 177.904 13.282 cv
177.314 13.282 176.851 13.4033 176.518 13.6456 cv
176.302 13.8014 176.195 14.0096 176.195 14.2704 cv
176.195 14.5084 176.295 14.712 176.497 14.8813 cv
176.753 15.0966 177.375 15.3205 178.364 15.5539 cv
179.353 15.7873 180.084 16.0287 180.557 16.2781 cv
181.031 16.5275 181.401 16.8685 181.669 17.3009 cv
181.937 17.7334 182.07 18.2678 182.07 18.9036 cv
182.07 19.4804 181.911 20.0203 181.59 20.5234 cv
181.27 21.0271 180.816 21.4012 180.231 21.6457 cv
179.645 21.8905 178.915 22.0131 178.041 22.0131 cv
176.769 22.0131 175.792 21.7191 175.11 21.1309 cv
174.429 20.5431 174.021 19.6862 173.889 18.5605 cv
cp
f
183.265 18.5605 mo
185.242 18.3682 li
185.361 19.032 185.602 19.5191 185.966 19.8302 cv
186.33 20.1416 186.82 20.2971 187.438 20.2971 cv
188.093 20.2971 188.586 20.1588 188.918 19.8818 cv
189.249 19.6051 189.415 19.281 189.415 18.9106 cv
189.415 18.6726 189.345 18.4702 189.206 18.3031 cv
189.066 18.136 188.822 17.9907 188.475 17.8673 cv
188.237 17.7847 187.695 17.6385 186.848 17.4278 cv
185.759 17.1578 184.995 16.8261 184.556 16.4326 cv
183.938 15.8789 183.629 15.2041 183.629 14.4077 cv
183.629 13.8953 183.774 13.4159 184.065 12.9696 cv
184.355 12.5237 184.774 12.1837 185.321 11.9502 cv
185.868 11.7171 186.527 11.6004 187.301 11.6004 cv
188.564 11.6004 189.515 11.8771 190.153 12.4309 cv
190.791 12.9847 191.127 13.7236 191.159 14.6478 cv
189.127 14.7372 li
189.04 14.22 188.853 13.8483 188.567 13.6217 cv
188.281 13.3953 187.852 13.282 187.281 13.282 cv
186.69 13.282 186.228 13.4033 185.894 13.6456 cv
185.679 13.8014 185.571 14.0096 185.571 14.2704 cv
185.571 14.5084 185.672 14.712 185.873 14.8813 cv
186.129 15.0966 186.752 15.3205 187.74 15.5539 cv
188.729 15.7873 189.46 16.0287 189.934 16.2781 cv
190.407 16.5275 190.778 16.8685 191.045 17.3009 cv
191.313 17.7334 191.447 18.2678 191.447 18.9036 cv
191.447 19.4804 191.287 20.0203 190.966 20.5234 cv
190.646 21.0271 190.193 21.4012 189.607 21.6457 cv
189.021 21.8905 188.292 22.0131 187.418 22.0131 cv
186.145 22.0131 185.169 21.7191 184.487 21.1309 cv
183.805 20.5431 183.398 19.6862 183.265 18.5605 cv
cp
f
193.094 21.8346 mo
193.094 11.7718 li
195.126 11.7718 li
195.126 21.8346 li
193.094 21.8346 li
cp
f
198.744 16.7963 mo
198.744 17.9358 199.007 18.7998 199.533 19.3876 cv
200.059 19.9755 200.727 20.2697 201.537 20.2697 cv
202.347 20.2697 203.012 19.9779 203.531 19.3944 cv
204.05 18.8111 204.31 17.9358 204.31 16.7689 cv
204.31 15.6156 204.057 14.7556 203.552 14.188 cv
203.046 13.6208 202.375 13.337 201.537 13.337 cv
200.7 13.337 200.024 13.6241 199.512 14.1982 cv
199 14.7725 198.744 15.6387 198.744 16.7963 cv
cp
196.65 16.8651 mo
196.65 15.8402 196.803 14.9799 197.11 14.2842 cv
197.339 13.7716 197.651 13.3118 198.046 12.9045 cv
198.443 12.4972 198.876 12.1953 199.347 11.9984 cv
199.974 11.7331 200.697 11.6004 201.516 11.6004 cv
202.999 11.6004 204.186 12.0602 205.076 12.9801 cv
205.966 13.8996 206.41 15.1789 206.41 16.8169 cv
206.41 18.4416 205.969 19.7126 205.086 20.63 cv
204.203 21.5474 203.022 22.0063 201.544 22.0063 cv
200.048 22.0063 198.858 21.5499 197.975 20.6368 cv
197.091 19.7239 196.65 18.4668 196.65 16.8651 cv
cp
f
208.017 21.8346 mo
208.017 11.7718 li
209.994 11.7718 li
214.112 18.4917 li
214.112 11.7718 li
216 11.7718 li
216 21.8346 li
213.961 21.8346 li
209.904 15.2726 li
209.904 21.8346 li
208.017 21.8346 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Richard Basset) ()
%%Title: (PLOS-Submission.eps)
%%CreationDate: 1/13/2015 11:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;B6uBoZKV6Lcf>$*2DuGA*)3:2)]MI+30;mFaUQJ^S.Fel?V-g<9ddf)mbY:VirN=h-'_)f<$gAXB@_jgGda&Of)LaK]`+#/
%kOTSh6,15P%,^u*Ip\_rW1C;XMhm$KYbd6`q>HtsO8U@AEeV/75C>2p*Z^QrC1!gh,AO^2Xqtl"(H#b')6=6"K*ccX0Qa84@f7rI
%Ahb.I_)pmZTL[9C'Y1*-K>#)g\-V`-a4ncWArH3F@6(.IW57p5U>LA^"LYcBhuI<_)>tWAQ'U@+3jmjt:'7:'b^K2]o8Iktr9Oao
%#d4L22].DT_`m^Dn9Ve+6\Oq/,$7$Ee7?#Bdt@U8^&#0XB^,2%3M>O8[*og:$r/J72akH.*l@)QgGGkjAhhq:/Bn7!!$E*ZraMM1
%VI7WHR5<o]":[PU+V9UJ:SC=4D'Df?qKk^1.r)"pRDCgS,fu3%:%.DSrrSGSq#(?3r+-u#%L\/3Y%E$H)!OqOH2V;;VAA)!!<fqM
%+HiFJ4MkI67:SSYW'0'qp#5sc&iG>f/7<qLK7>:/boRWlAOER<lPAck1E>ld$MhSi]Rd<'j7@U++^`US%3c5;0YeClnX)Jp?PY[*
%"T`Tk6?#i'@%Jn@Cbf3`\NYao"aW'B-9pQKKUG&<*3M!hDhS"Sm4K7RIS[)UrWC0`^0kbF\6eG3COS.dY*X)kG498OnAks@em^dN
%T*erP1B?F=@>BD_ke4.8$aUQNI.Pr?o.8[t/e6fJJR0EVV:EogjtBAR]H0t*nn^`4R"kn<e7u4\hZi`P?Yart^6Zdg5Zg+N_/*W3
%!*Z!nqpA@MQMpIh^t$8M$J%&A)XkK=b\t^,()cE9h\>[O/r3oP2q2LO?BY"`ZN9bj&#pCY\u*;!)B10D?gn5^!(mnlK-#ueFFin.
%)a+2-K>h:XTa.(OCh1W6LY^J,=K`Ngf4CQF<5P9$8+96D;m<1`<Fs.n`A(E%JJ980s3*S)_:\Olj=l.?s$'rN#a6@V!(SL-[VD<.
%^BS)ZQ=iQj$`X-OEk#H"G"Wl;r_"!-qUoOJec4=iWMLY\5[Mm'5Qp_Eqld1%N6pMDBInVNUL8R8M9>iS=E;n%&<Rf"TO7;k^T#1u
%K+WrSVi*VPK@PL<YX9;M\,jqs!_Ct*g:,U@6K\36Xi=bUottTA#ngpbgcttf:nJ4U']K4tAR,9RkQ/AOlRf#5LIPcQ,O,X]:AM^\
%'Rp-.S:DY\BRn@-p!B?];Vg:"!U-]Ha)7ro`HDM:B2NmP^sJ<65%pV=6hh',4'qQ/BY4q1!W2'VrJrYYTZt"HB0cP[`r3PRs(d>&
%)5<ccT7BcDLW08IC2gotQB]2dg=0cNWhoJ[KV8JI#UZ%]clTu0C>b/MFj7SM:;[l1gp_dk[jU\0(]<t[5R>8ciU`NmN,QL!!#FN1
%K<?nD+Em@C_$t\t5G2Ec;IG.*VG;9<!!XL`%&5l5hf#K4J1/eD01\+&dnh'9IksE0Gat[+;AfHL:!E-hR3lS;KSNqV1-,GfqENd(
%!1<C[,n+Uf3KGIFfE7/Dn%#tN+Q'u<ZOnJ/JGt?&U&@l<"l>'Pj-[[Rn)\!^)E<:]VJ!faSc\&N"#Wj&o\b35ba#D?m7(%4i6p,4
%D<3Xb97U">A,'^:&!YB'Z/oE%lg90#'a&6X%M5]gihh29('hQ*I'?O_\,m&-D9$g3-iWs,7;ug9Ggo<YK)iO&CddN^JE-Z^\HhcJ
%!,\GchVidq?SBUPc^o-9Fj9mT96uEaa%,G(7JoH(]1*7Z7f71Qm/8"]-;Vtne;DhEr\YY`Vn0me[f"GgRkNu_GQZYu2Pk#Ll!E!:
%\>K9<"6?5K=p+[mf@^'_;;D.j3E]]2kRiLm^A::\+77V)^](]uDPX`@*mhP!I(fLYS5dBDg2c]HTbJV`S_Ch&Rckk1hY]T)VH?mb
%Pu?4&"'quuF)%dlOBg97D8mQ_]\-]&ptoT-+e^SNm""d%#K=Q0`$eCpIF5h&NtSo"O3s_P7s>%P-@r<Q&2aD)C6Vp]TL8`nrV=b^
%d$!)n`aHfhd$_toS[f]Gd1T_X!,IRC$3f&l^t=Y*LY:1QBELEMm4$cb2ql#%$jV^,C;cnFI%eQd_pT[omD?qOF#=m;Hs@`n5`^JW
%jIgoq"3JHadaX<2)_fP%#nWW#S1[5=0@XlSW1dPArX4G#0Q`h99o*,T*;5l>?L&n()":E&b(J7*!-dq4lO=8uF"]4R1jC7$O_CuQ
%cO>HFCp4QiMf4F#EdcRni"kZs:TrroL^A>)hD!iR#i%ojXp=UO0S6q(#-VG`9JYH.O+Ece_[HrjYbs`Z$<]Wan</ZF+7E]V#%LEU
%LH%"NhTT5&4CD8]UY9S9HYL+R?oM_Jo<[@?pM#39dNq9WY[@!cU+rD<$J6PQ?A8cmP9Fc^0l.%55gnJ)GutKZ=nQ6ggs^o+DDM9N
%D"J5<1`M)04CX?qa^ocF2iE%Jh]*McJUfDH4G=gYc'q_%9d_d:$O+ep(i*fjOjF?XVKa38a911a>:8+?lL2Ql/g;Z$O(_PBIoD(+
%+;3C_*"6J<g&<(E[L=6i()/W\&Z!uC`8q7FbaD&Oe0'aZi\_M'L-rNNS"_hq^9"^^7uQ%)$lQ)$Ifnt0!#+aa<fY*.W)JW6?k8%o
%qFT)2g^ZK5[i+tLjn3;kJ:^PG)K4#Rg'se="KX!7,$Y6td-'X+GuuW-BkUB9%Wi@Hjear[P8;>NJCuNf)N9L5s1K4Z^.Mlp-).j-
%)9\\o+$O<sO[Fm"@0>\&B6^&oJ6]*n;^+RPMm-jUE=qDa-prmh%.g7(cOm>sI^Cm!&PNrTqbSCJ7ol400PZN$d9(>V0j$QsLs&9k
%r*I7u$\r"R^Rt#m0^@7o"dI)n=oZ+iiEkMj8f[L,]`8_-n/'#K5dM[&"IO:L3)#!XnsG>[BFD3@\pWIm-R_F,[XQ6uI5-P'[&1mn
%=GG'0maq,<r*6%T4^J4%iWXW^Sj<ZG=H-J>XK%8J[nu3!9S%_4+dm<AQ5Gt/OK[528&i3="5Cr?hh16deQS%iL=ln?OnB3$OK06g
%Qpl\,U1ORcN=DgLTp:ap<ed:*nO83UAt_c=Z6HCt&nsjQ/$'emMl[LWWEDSbGIXc2g+Z.Tbp5:e1*Rsj,ACAEMJ$d80sdmP>-PCM
%\JU\pl,>L1-CD<6!l^Nr3_@=XPgW6@iH";P(*$NPms=19cM#E^Pg#;u-e!H!=jC;?.&,9W5H_na!ilGq/?TMr/U?t(b&`8T0cNMY
%\YkBTe6\A6+Rpn"&AVs^:l$%"'-T0+h1"<$1E[8a.8FS\e.KLjfG?4`9$^/"nIdrjXRu7&1Y*).#lk:8aA"]l_e_EBW<S@7%WHIs
%euIMAJVNsF;(/0k9XFi\$+U>V;TfqOQ#nU._83N["NiRWY;r9rM"kE(ZYF7olUN?Sc\-[U0`qLV"7(2J)#e$ddD.N3e`R'e=c$\;
%0rgA#KZ^Db'N>);(=%rgDE!ih4(8<A%/ERHNM$t';nL^n-0KDB>G>[bA2f6B@A9(RT@lQr"NWJ@lki<kDm@+0`"R2Sp''i8CK7.O
%BY=I`Y_O:(g43R0hEVpp;?aJJo[pRKTp[]u0i4YtIt5P-Y3GuG<e*LmA<)J=afkq84E7@,,27n]Q?ihUAinr-:cpSZL4<utF>qo)
%7fTEC/Z-p/[8UXOctEqp:Yl@R*[R2X`F,Hn*,J!M!?f'FXe7nV.\:(T*R)CKa2t8C,L<WkU?<i,#55C:Ye")rJ>,43\c<X&&i$4l
%+_W_OdHccmRgkIoZdmB*Wu[0Gb%]jhnVlFWhPj5KfEB%_OH.n=HsBj7ED<7HGf"d$UUAG^*KBT\aK;P9e_W/iBZNQ<d>%X'Y>g3!
%CpuJ7q,Q^DS#m\JmbcM\bt-LglP1>NC6QAQXf0>AM\[bKJdr`Y:MB5/C^@Dr8d!ea"5s^a!Qn&!cu:oaN%(2nUD@Z7m9u)k"o9Un
%6Pc8h=\):,r-RH:8*s1JjI4K:IR-5ml/\eB6:4d^@^/hA\J6#<TlH'h5R"/tKb=-3f_8<X\_`:p,S"Ro;k&6c@XMQf#];0LL*"f*
%D(C"@`%;NndoCT0hPhZ;:Bu5SKRR(hn!31)eaU%L_]N%`)[X!LjGYnA#Wae/85>jK>Z>jQr(#:l&R)@3;i4UiMMNG,N;E71,ZNAL
%kRa2T_eQ!UKU>5F>_-6O)X8$M1g$mT9op26oS2=t1tU0+"`cI&D5tVD@_kLsF`nA2b.RlCq2(D3%:/26?E4eM,W*30eu5rB^#-Ht
%C]j%\eQeji2a5dRK,VV,%W!D"RQmp0Y[Rd63$+@l#SFf9m,-<e9$olQ8BUbi_/>lWM,qbjUHm6-H$qQ3fp8WKrha"P)a2q,W3g*\
%66U@(%!:3"fg)^m)6f)7Y)k#$Z>hL1\uhBDdMO/<!maT`bW&?jf<_;O309mXX.ZBiAEDe!*e/Yr`s-D$POG4)bbXI>EZ1LMN)-7s
%@52D-"4tg4C_lWY]4e3I8A+_]dINY",t/nF+YrM7$/^+-r]>_ajaM7a#@U6D\h72:mb$l(]4\;dTLm,F7[e,c[*MF'DrjsR:XueX
%a2BChEg\:F\B<hA5T%Y+pX.>X@A!GqcM0VoNq@?th>u?uVtNOJmQfq4VYA='_YanjjF2o_Te&$!..S$d]mY@+)d-68)(XPrqONMi
%amW2Nk??S\Nr&om.?&`V)FQ6ahl@`;5Mtq'bTaH.7t3;CI<HP*n;&L@J&mU3j_ZK=1qths5c8hZm\IH!T,tGOd^Wi335`M.FPV5O
%@QMmXN"5n_jO[i_j[Xk\96TUh`T$-/hh+)`lKHu$=`]eN;?pF#olN-PNCJO\r%tbCJ'([o[>/]36M/LOO3Y=4j36LHBm.quY=#m+
%J(VU==AuK&W=PX.``h9!oP.oCg)j[2ma1OjE>AnlG<`eu4XtaDo;IEL3QaMP>(CW:1DP61&``(+lQ1RJp:NLkS.7$T#Z[58(cpdU
%<43LUHd=bt!E_jU.t%Wj&u"['CQGsET2G(HmMiu:XR<od&jb7mS<hLZHgkkU8X7B@X[+>XTWN4%n9j-,jP5C_")5,lck&n_53O1=
%W!P^V$u\dfoYmCEj6W]=HiBFIT695l$oDnC>65f"-L?RWhVl^*-]]gOpW%Mpr;52:ZcVqY^oLuI*#d0Ro>Gk3>Ng[ZnlUOH-pRP[
%@*I\XLtk"*Qh1MIK"n(&,PQ!"rOAK/q8'j_aomLE[n-2+h+UnUR;2/f522sChbdMSSagnB4bfUO_=:%0kHVKOrcYk>k'l37g"C;j
%*W'!r:WVm`bl_XHk_DL4nQJ0pY&BZQkt9Y&9]iG:B8/GeXdLI8=^]!a^"JUO_3Ps:+rDAs@ZC>'](*-l*"Pe2>`9<NA@-%q#HA87
%:aHL-MXhkLqh_d(:Z_rR/*0-G&F[Z]*8hEu_k("$]$gBe',R9GDDE(&8PXI76mjr4S5`;G6FupP6$s?TDdn.Co(23?'Cj(tf4sTj
%R@]3`&j4Yf'PVjF=L6IaD4\5'?)59>?la@?8D)G`A&tStYe$,2?uU>@lsuRBKjpfh/KO]W^.[X_>$SF&^i'U+VdgR+S!M-cHHlRK
%l,Lp!%YRP#P09(OF1M:EVHCGs-hIKV:Yn`h$iZK&p=WM=CNU46F+Fk*4]1F\Z7B?s?sKHK17nr-1-oQLKk-7f;f"H*ess@eZ"8CY
%j(2i-C9>sEC"ibu4PP,]S%N80l6ROBU!IiJB5.XSI6V7op@=F_S^uSW\JPJJ>u)?#QuBBjS4!T!T"c4.1,X>n6[@S8%K4cMFRssg
%'=W<Zf,C9>nF+438((,Y$P8<E@/WL31NU`O7`GfW$RY.'C:4.<(8+kcdHr*3LV2_gq^uP'a]$:-Q@3EJ3_7e^)MJ"]=D@L3jS.jj
%ORX;+TBU\%.Eao7V#.-91$\m8qCNg#aq#B9a.\j&*u]Ue.;B9&)Ydm3U.<T9B$0UslL)TSQ0]t7H61iR:]&HPnSD@j_4P_%GkR*F
%bbqAa@g%0o-bsYQ'`OS7P!O"O1jIIMqrY4rP3(Qu"eVlY.e=;M3er7e`'E(=TO"i-55jW2->_]OMh^[CCkVsXBU1Y-%'9@()c-'F
%NpR>*-eLK`"`sg>@7H,>_JWL4FlkUu)B'DY"(.BmM=7ecCH9[<#Jah=o9mO'J(du`TN*cSrd:S_C*NSADMfZLr!akP6dcM:.gMo?
%(5N@GLhBA0ISZLCa\2tR]Z("C0@3_-rF^^,Q&$VX45h^-1l-Q&lJkVfNCM7$TJ8-m30<K*d9"C.BPnO:6\RH_N+IBA!l#`($U$ag
%jQOPk(D2:p#W?GM=I-+G6*O4m1_b`m*B8;#7EE@XG6_?Sb^_nk,-2=sK=.7Xer;@pii-M1#=1-4!AWZ$%(e:RCN(<PXGUuqZ?$*e
%S4[ZnVEn1"1P<S)NLtXX-"];8Z=bm:RML(^%+3FjL=iWE$MOi9#nDV+X8,D)'AClof(4bmRAgD["+InmreR@O5^Q8KAH/J>-&jf!
%<,2UoN.s>#^hElD9Q$GJ^M?TMZYhF]+3h8*N,HOLN530-m-`f?M#A@)44%1FHT\7-\V\e(A8K+tand;34cqrugne1d9-cS^e37p!
%ceAjlUeHhAf2fFSWnsS-d(!AWQ6%b!4)upIYJd.OGP9.doVq`=q?\.leg<V%1u+Ll_s>6G92B.Za\fKo;)#PB!VLPj#de$BZ`e<O
%oBpS@!r/tG!KJ_PoabQ@*<BjN_/%?(qka"OL)kmN'X6[$+."r?3]n3h5[ETdkjVh:F-($6-QF,d=Go<&mTf6h_@%/cAETY35A/6<
%p/;/u\,rW4;#fi$&*.YM*`qk^pRDPY!=%jDo9T6[A_ujipW-;\SdM'N%&n2I"`]#9q!?.gIR=3gEmX?,`+,\f]deb?MfL%JBg)X-
%#Kr@j;5#@04pOI'6ni<7f0LRd#YmRGDZJ,im_NmEWCj<I^Sek.H],f2`s@'5ljK<;@3f<Cq-V*[b6gF,grp+p6Fsm%ftm!<X_1U+
%<kPE/0uCN.%3#K72>:kh#J;/M]Bo15(^3(jof*`^G(B\+TG5Jk?gPR*WW)\gKbB)g6T6gq4rT+[4O4\gnT$q2WHo2&d_Q>0c[WKM
%-m>nnD7_%aWrlUuhYYALbj^t:jSfRC7cgPl>;]FR>!'o/[]>2/IJW?=hL[@?pYc#%a-(`H5_S9T@?i6Z>`6J%6I?Fqh"$\;^G]hW
%L?D5c7FT__5PjrB6l9B$1=h3j@$^SEA4md/asL'2p^\7Zj(Rk>U3ZP#VB`?Y-i]juhn!E6``pVJ;Y9?TOgJ73INZ5YJHOsMYCO3a
%O^udQSAMQ-;Xn1>Q$Rqd5=DFCq@%&Ta=h"H9NE6h3f;5<'5d'AS9E+8`dEAPb-,=f1k!R")b`I=Q&&m-=tA8R`$s6'1"I#JN.JIJ
%rlNH/ZQKT>3'VskOl'as+E^'S0Xu$jTZjrXm.1pscO85Jl3SD:TbO_SWr)F0a"q>io'uNuS/X++%ZU]E\%nP1'"MiKN_rQs[5$WL
%!X;?*mJSaNV>:]:9<)IOSQWI;*WWR]6FI.b_r,oZL;3>nmenNsrkt2XB"AaaKhZj\"#;iL\d-00Pb8MTjG3/aRFnf2o(s*2poFfU
%:S7_'H@OVt`VQ*=)N+F_<5)QSp41*pK<j[\RNL4>YI*1"Glsf14j;O`/:QJ^.\:H?j@[VKB-tu?]@(W+l6KYNf\p8-L&8`2-o:UV
%C#"5I'[3=6=8FK&TES4\9n9=*fB'RcDEO<OAFJr[PPYA+b:LLW8++K.[31Z'O93M9R,$!gB1-WI5Gn9V#-/iEe_2Wo[fq8#I0\qN
%e&ui3/^o0pUFq15Sf!+W1'sMg9VC?bMOp5q7-V#hB4:9Z(WCN(IXcg@1\9?/Yk8uM1=mu/j9?uH(U*uuZ1%AKQWgGU/bD)]<?t:J
%<7a0$EOY/t,W<h-efPqU-3Ki]4[=H4Q@#)=[eo0?bn2Vbm=9)"R53o!1>"3i?aHl1KL+8(&)-db9^6I(b]ITXR>iaG_?D@c%M(on
%q^4/jhuX;Z3>d,h\&ET0;%<j91-:WS4(I]VhHso.\#'/`Dgs(H8sInIN.g<tnm5ljg-f7rgn&U6RX\)O1)o""BDWIRUhFE%!$u_:
%*Vphlk'eM&GQ*6K5=e<`q5)=F?jh'<l1MDmK1$BZ$u\S.Y?sWj6+<"'N)^LO6(]-`7-<`],9;ZkO?M:?rOhNjP%LKogY_!2R8&0,
%aD>Th/".MBV0'X=:Wk[ggO<)'7VP--F*juM5VCsMVP<P/,Sf1_4VZ&'6'M%HD.pW`03+ora3*%a@OUc`ialh"KF1/HDmgam%R4/]
%+>raP(ug#I4S&B2CAft!)"9r_l&]u:`m.QUollF!mbgkcGY>3Fm+)W\DRX=5gks0(JNacBJU-4G;VaN,DT\#=Uf]Y<MV[)@k89BX
%\CG]Y"<?+JAsS]Mi0\68DLjj<IinhCk-4o[kJ%6[>f3-0C!aX;,^u'3;Cq4Lqh9CFpme)I])1:/RWcgBD$9(MM%sn<[E7c2dO-Rj
%cG+oG6O8Eb):OL#[=;hB2_^ld$Aj*:fH$(s'=f-k5'B'D(hkFYhk:/K"f4XL8&`*eOZ:ts+-GG-o%>SFE.Et^"(S>"S$$uk52_DJ
%kG`]8F,)D@c8l$!`bp`s`6Rlb9Jl_DFMR_M#"=8:"q>=$]%SID%9Y!"99rZT;.'Q(4'bl)HC<6Uq?mVlTi4[hdm"TO1k>GK@3la+
%?rR`%k_n7%FDKpQW,'M4\=]<2V$4ZTm>3u.cAbhmn0Z79^fl.15O-UH>cP<eEfD)TB]oU;DCTa+$aflRR2kq@ViN3a5X5d,B,72*
%$$dHUL1h.d9S@3e-ou*?k>.W1a,7ne?A_c-ZWM&?&jIJu1ea/Fo0X^>`pJ*gA<;(u?486lVf;r#H\cc\?/F`aQ0jqpT]QKngEM&u
%cogAZ\&!"@knn+i+0H?T(<Epd.jK7!p9T-k!8dZm:b\#BXF_62^[j'7i=M!+Tb2XtgFHktTOHHOeh6Iof&O(CTI*rbVu[eXqg0g,
%+K`/)/qm>-?@ZuHDmQYC8098tHXc^]&HjBoST%PhQ8`RaH8)Pjfj-G[g:CN>ZF=cXJ\V[H;PEe0T+2Z\Hao4+,V;g;<n>`)mUB/f
%@0oD/Zf7nsgEeU.Ob?Ji.'_tuUr1*p"OdoQr-l9fMSKL&'="/378!gSg6QeiDt&+tLiZsgA*]!$JMCIYaj^GIHi;;.CU8!lH,bXQ
%cqATa4S8%F7S<S)?$E*[ge;N7&K8T_q9e00QOZ)_\'S(_8sg%NV\PKecc>'RX81QYLQ^>"G5=55KeD"p.fSSrk+84*\,<tHoJL<[
%Ob8F:.e_[$(2<!W:3[f6&J4d\F.e8;2X/p>n1G?qK6D!BD;XKIT6u1dmkPhBl,k:Q<'N^/hI-T*G4iK6@r;nbhSpRkY?<Qa[H2t/
%AD<8eEl9^Z0<9=P`JGsCVX7KXU\\AJ9SIA*-lE'Xj?"<\O4SAbWc(R:V[sH"NlRnae2sm71CL+Y;.tHd=(#q>)'T""1jSHu%qP_;
%0SLAaB&l'7=,r"W9a3f?"?O5ZR?8T#o,Z&(dun#H-TbY[M*Q6t9;E<-]F>J.(9hSd#=-2P4V2UO#N7,TC%(:U1XluW(R_1Mb@'h_
%G>X_@;S)l<FOl3!V2>!5"q.4NH=b=j7a<o5O5c2FF!_oNPT[Vo)&s)h[Ci'+7"&s)=OSo6Coki/?$S'>IFh$q;SjsLe(ZJ$("?l4
%n@nmU0!7;9HV`cKlWLsVSi2/dEHYmHpOg`5k:\?%b2em5E72=YXn/<\23<*g>%aO/l-55.G%hfj%G1_8U`"-Zkp,Z`KI7Z;]?c>=
%^oZjhU`6k8/\$3M,ThRBD#rKpg`o;06a8ekFYf!%+*6>Gc5joB4<W_a"!+aJK&M(":/bY8Y-c9a9?[CQqt>/&>+RP>_Mr[1_m.3P
%+GufsGo8>h5&)3)Cub\MQkZ7nJAsusN$@(_0]aO2_Cruop(:eSHmY:(oR@nG<ROtqqj).R>SLPU-fY^\FH?U]lc)P^@P&F62htct
%'Zo'hJDjV@nO1.m0spt^!5fTok7:&N^3+!="X6*Vrl#oZX3^26CT4S^NtOk]WqikR7@O$J;e5G/4_`9P,)kcu]'74V["l?mmt?d*
%.*es<Teg"sATCs<98gai'e$.t_Z^d6Z8pu"kHUI#Hi1,T\f3TZ)jOZ%3+COI^)sGr"'Vh"K7cc+G5HJu#cl^jbf.Sdg;+.D.)UL+
%);'g5_iDD=_sjiY[5.(QJ&Cde<X,'h0O*3afYO26oLJ='&=9*$6Qj3P0sH/Y#K(-S?<XN@e9D1i+Ogh0a^DQ/e_(c`LB/OX?X3]D
%)"q_N@RM)GW0DX:=:G1[#EK9OS&K3^S/nqg-ZF_+Pu]nEqBg`$YcRoi&"n.4*s)=VB/m!Tn9f&=qWr:1#G=TZCnm+kc]Pt39jV3f
%L\dg@VHL@[+\f!P8dVU9CHA4f1F$A2RRT.@f3!>+KL.='0cDmA5G'($#*i<u1Y#H7d+47Kba'sK*a2$2^oZ/rGc=A.]m>NNg7W(O
%]i2tBUOoaiT&K;-@)Et`18@gl5>F2`8\Qm3lcRCs[2r',oodGuSn:_J4$LSKAP/@hRG`WFk_:Ip8>*JnY/)mRML)pAKeWk7.:>Yi
%XJCVe^=Xg3okmeYqg"d8FI$*OrF\o>s$rj,>RBBD@=TAKU\8;N*rI7A''lL5oOo7?UrML2<"r#XBh^D8pG>i"os@K.dRd&c'sd/U
%(_s$9`df@I5;Uiq!hMFao3b?OVMF8P24,t=3bBIs<.=C<(H#.`%i9!`4-i^P3!\bkE3.S)(C8B.#\*ri=7sb&@,[#AAO4DhD^d68
%UW%U!j64hk?A>Cll'GEq+OU6FdJ?p%3#K)>@#''-<#"?7%nqT=oI8$r/%bZ-M()c<8$k\)>H9!&=1[@5+D3:&F'_$Ca_/l586%.(
%5jCS(:RtgRfFi3Rbc1=+HYU3NX^Mg2H;lb5r@io#=g.NVpo=<'WZ4R,Xr,.%G9dCj]%"=(HrM=$X5[OGk0ZfP;K.M^;5l<VC-K=h
%NkmceJl!Xk^iQC,8uHjq%(#S^?4R9fk(5m(:rkH-T#3,0d)m57fOUP]@PRlp35(sk6\-fWNCnkE]iE-2El*l2d2Vkgc'Q<CKr4'O
%),+mV:uKb55N+oE1R"2!d:==SpL?g2o=uSq[cB55Y@QLi:4=IBYi*S"EX3X$1_DJR=+G&h($lU*!"+]t]ApG2#6dou',+.)+EVDH
%iI@?5d6URpl\scS$^bEZ!=%o=,0>6nE2&bYF<D=/LGs]+%`!RW0+>38!r\3Dfc%F.\,F9`:JUXJprVi_^I<SKK/`cCH4]Zo)uE=s
%-W6<JmqRmc\@%^^T6fmc[G]PJobAR.::D,'()ZFqH/*(]rJ2:2di!D]s)AqDLM5N-G\Q?":?'5c\0!dJKKikg>2T6>n*UAO/iWMP
%/,b,S'D@-4+2R%D9!glm.H)^Qlqt!CL8GWF_mEqFqNQ;dlk88dr7sfE5Q%WGrUiJ;50-KOHqZbb4LT?F7CXjIe"5cNH\nY8/P?fT
%!OoOV/64kCo<b@H'7`PBB4s>?4Cn:ALR3*;33#@g<\mr'Y^]5q::0:8pRWM&hj)tXd]Ya]i8(:W0n/?IGcWU.J=VY>Nh<"[B"`P&
%5-^;KhU/\p2^@,FGt?Wl:'(;Nq"21Gjm^*X-l=%ZJ[jLIE5?nboS3h_'G`6C!H)`*VSB7D(W,RC1XdNV%_QWXnDAPe2Xm/J"oDN?
%Y^SN`3=/^j%?!48k*sgl=SqabG2H97RN2TJ"/f39lRr)F04S!#DUBQ::XA.-`burBB%)&NLQt'q>pdbA<;R<4!]0sfJg?M!"g#O%
%;`OIaOiQbUHkBm6o-QQM>B0fVb.Oq%?>=Mu,mnk^Z6E?@;q_2F7,]Kk2=`psXB(#I#*fE$7)"*Dh$<Xcn>:\`1pp1ZK#LnNRjAL)
%DhJH*KGCSl@:"m--CiQBX^Oph/A`=m"e+J.>8D#+fm$N8)KPl-blUqQDQp)t>3T>B^6?T@%<_X:C"XYbF_=Hk4:50mE+@R9c;4]?
%iVGVVJrC8EZ<2%e8]Xk8H7O#<$1dt_'X5Hb&PqfmI.`Y&_E&eHNdaVBCOo$G.8-TaLDA+Zrm$X:&U0`\al5n+qB*HhXSK%[.Dkon
%-d!U1#@b(]@4bAmDTRX+9Tosqr:r'D^`'inc,X?r$#>QGZ$f.'YQ?YngX8!KqP@P7#dG(Z4_FC:@XY-=5!f;9Vj"(RXLAHc-_^(h
%4r:3McO['F(2M++RODXI:Z)"93NPcRq*,6TlZj/1-Z[mah]u.j7sV2*VcuTkX^9t0O0A[B1;g4*n&aa_4P#ie^=Rf1rg(P"?(%&?
%YX/X*&c["U@o@m!?X_r@[rBK"IJqtQ/!7&3(2L,7>Tp1>h]*/n^9?:N$<TAa,!T9qa^P^o3cC"WDeC,!NG\p$&.Oe!LL-q"%X7-C
%8f!K\UHGb(XBotb;A>2"9_<2L1rSZ=dQG5#m=XT$f)TIai^`i9jfKUG=fhLr>r#G*;#XK"CSp,@M1q[VhDGs9Lt*eZKkOQp<H<,t
%c0cl[mBPYfOMRCX4?Fj0dBW5Vp(:>t.@PZ#@l;[+?jJ^i+_!c!>WPT]3Au=A8u6Oc2k"0[7c.G`$K&"cIY6$le=[VBRN-lfo:`dV
%8f@t24)^^%9Bk[T(l%bi`M[\2f[@;8Ka(p+*pd%\`hIp]OQ:+0m-/LQhp''eVlT'!Rp2J)%78TCoLn`IYh)qA.mKR7\n9&_N+g&>
%[.iNhV"f8h^.N^:T+3A90u^$j:$$OT/1NI^(E\P)k)O``A)9[#Y;bjTfJ!-OEuUB.*Br"T4OI[XZuU?8rfh^)IQqonQ(NNeU5tJ8
%,,4c!]-3BtlbE>^VPs93hXY:8'V>F`b;l!S.Q%3sG`)_>T0@Q!M72Emd:uc:Wt=[7pe^gm.D>_B:VR;e`MZMgjK1q+BPF6nA;r(O
%*[hZs7iODPW$Nd9C2^cPP3gZ!.kZ)ScntS&>?\#Be7M<nVR#"+j@?5%5P7*QXAe==^"K_e>F$+q5I5qNh7m;>s,D0XaBh-NH1UGu
%cnircSPP@Xn;Mi9n;dtV7N*;X=r.*_#@]>q6E_Q[Bn'QE%?#1%bA]e4^@dp:X%l\UGj]R*Ogt"NOe9`T6bmub<gEP.]J9RbZ[G*a
%&E?7Y`-J9\c96Lo>(N3UbsR!%.2(Gr<dWU`GuMKs]Xqrs(7udT!(ZDEHmiG-.d>Q[Lm9*4?L*JN!?.n*8+ORjGK)UCJ),cd%DQN?
%(tS5p_ju=#G;l@54B<P5BG$@?>LS`WDIF^*C@*EY"VcFX.Un)_!*os5Z"1Ak[HK)Jm<gFFop4D/`O::60lei[YsR&O.ZZH)F=CZf
%VE.j<.h3BK.>h6$OjXfc.i%%4UJL5M5]87O0ja-YC@*(./'W7R]59LaY"78d_%]bq^m*qE<chlf^q\<@/6jI%i4`b/#unh%D@,l!
%ZZ>3%T&M$&n0ZAIFU3I0)p>b-L'40&Joj_'XRQ`1dXkjP,"9s6l9lgopria^2TS885!_ZC_WD<Y*oF;R*%u(C"#@#>$po0Ri#XgN
%'2c[Z$,DLH9',L:5;e;X_1oZRI/=mO;o")ms!c'4\lf2D+/$T!Y]0eT49APC@l18N_!E]d)0+pT:P&CioETF!47464ok>Hr.JAV'
%TatbN_(Q;%3D#Hgn;\c_L^<JJ5%L62KKl1lr586!ES]MK>X1>@ZVeaKd3$UnXP]a!=>30e)XmG5g([$_D;qGh*3qu]0o]s/7TH3"
%%LO9e"3k?!r/t71o^I7P.?L.-CsM1H_Uhh8"[TPnL\eeqqRC&>#uUcMbFA<`4Io%sYnXK9U_#cnHIU2tkLXqGN9%`G1epE@a#Bs:
%%3sm8,DbF&f?Nn$<p5PgmpQ.!jC@2VZHKT71eQi=f()4+8(k_$Us"soO])JI9=>`l>-onE5HplgVU1a$?-g$ZWp>4IJKpc4"#MTS
%esbBYSMVVU/[hoZn=i`'D#2]fd(sm#?I!X4)pc<10']*h,%2=rQ6R)Xj.<F@NuSDp%#puOnmqI8JO6-Z#>Mi2D9$8(J5fd%8>_r`
%!!g"#KBd:0GoTP>"9/,'o,AEL86*kT5YPAPcg%jZrW,qI7)+d#"H3o76dAFgL/rT[]7oneN+QFYm9$):gaN[gKjlt;VYeFq;jeEu
%n[+5_l:MSH7R7S+Z1^;m;`#-:9h@pd)mfi.cKAM6;oqe?$m?"?-:Nc2/(%>-NN-ta/@CPh'OY;3Hh+aMV-EiXPCiM0eCa2fong!Y
%Qu4A-HMmF"R_sqQ15@'7J2K1549EnMY3tu.Tk(K3Na@G)nm[VePr+.p?X8T)J:`o6icfCgJ_!\BE_[mKL;A'Xd<bH8LaJF*V\<p"
%ZWfX^+*k?mKWI;qeCl@;F7Br_Z)/eq1@;&<L\6X-]_q?U-Z?2t4>ZB,8Zt5#E>lGD/46)+kIGsQJW@=j6.*LV$'a*4RTeC,@+6)O
%1usY9U:,<ndhB*<UXolQmYQZ\J>:N>)6q_;7SaTCZikotFgimbd7Fqi]KbNQL%3aTr't@C<!\Q:"H_L/h9^kp_83#^AGj)d0L^kM
%NIXRA#>@NKi=AV@n>esIQG@U#1Iq(_c,tIGdu4[u('WUmHQ<KTj0Y8T-n(W1$=lZJ`s'7$c"@[gM!E%3_i_Zq0X$Y9s'(*0MXPj]
%aFq/?V_P[TjM,mBrK.Tof,_kI^3<N5e`\<odZ:+B]',utfG-Du>rT'Ih.MVhh;ZEQ,[KcBDVT4_8g]o,R.p=&TYls=ONXkY\4=,Y
%NocJW\5rqQY\Hm"C3Z>p(Cq!Y2USuM9s7\O&<cZJ*Q4CM3\DR.TG@n9bcpbH1*i0ZT8jWQ)*t"Y'AR*ca:Un9ehh*9'ciME"jZL"
%[Q5R_JiX0j#mF0s6>U83%`lj0LV!RCk_VN=S(Z+#1L"bQkTF7)m9[If'"u@g2Y*lqQY_E#g2*HM00UVTM,iS=K<qQg%MDKW&O.?d
%`)G?[@HbtB<#;,`,bnHH.Rs_D77"5)+#m15i3pGmOn+^6NOG5_W$Bl@M@?W5b_>q"As=!]N=5Y2jbREE;!.n5PmX\%?FIX:WoAT=
%ldDoZZdiEpNmM#[8dd\WZij0ecuAO=h;XOcX*AO?jJf1G*K6&PLcnJ)A4,o%5Y=[H%Z4XZaT/noT*%AF%)V.LSu)m,To!q1Pt_`o
%q])i#_-mp[U03^TX1g^tir]):A6G-CH`$X"ni\-QYNs,t6:GYg;Dpp;*HQjMR]B&ih;!<%h0*j$k!iWe?=X(R;Hn9YZ7`;[RFc=_
%/D[Pg4b.]5l.2(i\+:"V(skH<\g^5P0R6`]D?($,DE9aO)j%LMA'@555ZcUW7=\?\PT1PK^CfOm>s[IAPOl+8:;_8uj_YelO,V8)
%"<Prf<#trbZ^#l<7MjiXf-QK&MbSX:2[`Z679rUPh3ied>"2fn!]k/sXH67%#Ds6S3[@Jd&s$7a)`W,+S>gSJ",(]2ojaM8![-m3
%$4.EW";h84_=Kjq4'YOEib#Hq]e5#9)>B<VVlAoN0LEBN5D%d_3`_>U:Kgmc%W6'>3=#DO_Y3m"XT*K)jXA;dHM$7p8Ii6i#`2@E
%fCho(?SZ[BRYq2<XT.nA)?P#<ork1B&>4r`IgAJ?3AOf`-gA[TXkJ)c=,mn0=/m?ha1KXd\!%I7Pmf&`NHAcX$)nr&j6sfPAX-uG
%WMs8Ii+o<o\B"hL>5pX%T5Fe4KHJpZf!uhFNejQJZ"lFo?oD;Jk-/)/S:'ZU$V8ullXL;C!FjP1SSTIaaJ<Q#lZ+2i6_^Qc0',j#
%jMlI$mI<Ig9/WOj2,;p]jW+Il:"_?_7@"hZY*doNU$:A3dFe>ITR<WhF87<%'L9$e^,WLJ`e&G%H[>Si#*cD@h)WWs;Ig/@IDXW'
%SC`$a>-+CT&qQC7XQ.,l!aCfUh+`jReQ^A`BQ`o9BA1sk7==opb5'P&q+u\C29PaEC\]6mk596`oiaQ1\@oPF:VE(_7U3NLIQ=$H
%/`2P`FRe^<54r)CJEAoSI-S+e2j2V.Zci0oC\co"\OnlSH7^3`"g1\IGME\3j^T<lbKK_2'<mPl4jP\BP9`Cd<4I>"-3l>089O)t
%D"&lT+sEif=)3,n-/U*Cj=F[n$Ftd-F^(Xu^\+CQ'YY`YPM4$FUf)5`5BFmI&/Qph8Ld:s8qp:HSSn3Y;rgU,Ca-TYa^]Z;>'*`>
%ToeOme[c5l.;!karf'Vo1W5f]O&-*H8BUA=JM's>X7jXeh,l\,n61AqNHM"&^Se,WO(2?W;-AHgo?p>#1ZF'.`u[m]dZn:9QsYH^
%c+3tp3l9/;1\46b;P<'_4"2R2:Zg^8')@2RXg5R&o1S0"-s1Y:Bk.Seb.6%bJeMgmS6mK5;L!psE)cDnKjrb"cUO(`d.\Muq@(&A
%/U#_j-jJ`A<`sg=F*og@6_ACj-D(C:\*eBXq]]5HW?,_O$kNMeWFQq2#dfEiNJIc#iJf+W!a]eOXW.Su@M4DZ[2t<C4>*Q[1s6)%
%P\UU:>)Mp9R_kbErQUl]`hcobG:Sp[qF_iiq_Yubl;L<28@'`i>19F4H%/Fi_RL_KHHMW)]'#0@eE"\SSL6\OE^<f(R$(L$VH'@c
%feHo^'ggA?k!*:AP)>e<M5FFcH4nW4:2<\n(nWS#Qg\J=*N(lXWi07<UY!_DqM(%HCG1$gau$634m'Ng%2e\@NDB,Z>n?k^='Xg&
%Y'TVQrnsS#nH\/r3I$$M&VcUEO9^:BRn6KC-l6=':G(8;.os#i\jtt,e.e_Z/@O#j!a6jLFRnL?:M#DsQ0Tpfkt$I:(m=$=(I\d4
%8dM.Q_7[Dm._Tm";`nUP=sH&U.l"D#$']$Q85bbMY`%iGhX)&#r(2'8#q^O947/iOs'(XjqbfLM+/r"l"\FYl;*Hh<?uo\1%jZTK
%b-O+%>N.hlp%F4O6E6<fSJ8b70D>!EM,`3:\8'h47rMYQd@96]HLs[]dhJN8:R=If"C^>92I.\Vj"j,tT<BK^Td+mTFHto4!5ii2
%qF*#_,JV.!^E--_oEHmC[<f?@UGoCecEA+odmk@ZlCaW]F;>.uJjJq\4!dbcL-IeY09&[ap4V([Ib$!.eMO(?fE3pWaeo#3IGgP6
%Z$B@Ys'We^qRd`>FEA8(MShXc8fA*jC:SS.JgJW5JTDYcft:CH77k!',q:F3paIRXkT1@/ckW#iB9r=,-Nn1]-plWm;TpV2URkI1
%Vj_aWdTjSfF@2?3%JX)heqL-d;m+?^r>QcFjQBS+amMX7Ek:R;k$?,D3\0fDe9G5n1(S4m*Z+"1OUS9oR4$)se-:#$DXPbHl/J+2
%l>h:cr(D1[H*tdWEPB61FWu,^o5=2jR<!RaSn)`Kik0&.k"3p=`H`9f$c.G+.hqtMI<X--&q`Y&bR'tK-2!E52QaC>h`eAuc)4*O
%nYVYA%@]N+\N$cl*W^:dC/S]*'-n9-fX1`cVkAuEO-&t9:HDhtXV)>'<XbXlSmlQng5ba)c!,t#J"q'J[ab9B)uf=Xc%;rgG'bN$
%8-nTdWR.2qYSb\FeKN39="r12=#oO_6#g5I`C5;6Q4Ycd1]ci4qU[d!-`_^QZ!P>?#N_(!D$=@C0;*0)*/D17$/Df?NU:uShnjsW
%_p`:t,h(%#3*?8]n+PmY7C%R#TlOQ"7X(!]qj!%L^UD`BP(c`8;BuY9euhmr$NXO>,R^:c(!.pGFKJh<p+CP'X<`9%-2;8Q0_+JV
%.C1)M3l5;$;L:&Lb*/j5*rSTdnmpqGqF,[]/YM4`?W<869XI#^Pc)Fn]LGa>003+FF`C9M.*2P@jdf_BVo)tS[Y\DbQ*Se^g?J@b
%URV_6`ldNlI`d,'AB.3-)hh!.#Yio2A#ag0>Z;_1]0)n2'!65UD`::8B*-W3krBpTNna;-:`%$?g)eUT\t[)edU.lEpukIs'p^Se
%8'dljRDR5O\j8/MR2-R?5qdF@530hA.Ff^`M/#69hOCi^,8od>/)YIjGrh3C"rg@kN,+[&B&(`%g4fBX;bm(FUW>#+U(S8rW>*.e
%NM"@[fnJ=X<LdEm`I@O5W:GP\XYHo.WU2le>UpQ)[FMG,)nRC&Q]eYd7Rjr@&)K]<:r:pf0D6nU,8aJG"`I98NlNV$]7[S6o+sS_
%lHjEW7D;sYS]@R_eK0c'Q&>NlGB_g"iCg`6YOe_o!4PoXp00HoMHBnJLGC_-.i%qYC5%XcD.TgEf?]&!p#bJ06IX'nlR?7j4(9VB
%DHZo$'?ff@3>R]p)Uel<s&IXtmKVL-D65Qffa(83-tB)o/!rFMU^C/i1q46kg8jh:"8h@33PYEper^2XU[(Z.?0BaJ!>a3I]s]u5
%V5I*E-eGD2FIdWhSt'5JHd^>[SU%p*ObTs+NRF3=fq_Nl`71DlPLFO+MTGEh^C0LnS+S&"":!s>S$VfeF#kpW5pO>17]fl5[ju.c
%M7!M-V^?8\oLU[nI-/!h:`>ZT8b-W,F`YO=5.N<*`pK#uqrB;JhGh6r@@pePlipbiIau;!dGWZW5&>0)>(qBF=XF![VnB)lVm&t"
%WXfa0b(Y7VLV$>4m$%&&,Rf*\_EL`FiDk;X'Y%=TTA2Vk<7kHLYYWQV7V_>%Kmeij\CW>!PH3tY]X=dUp;r^b9[)Y!KmdttX;Da5
%^T^M&SdhasDD^d@3hroT]&h+iL9=h7-T?f>dY"#B0C0A7n0g`qRY?01TPh8ccg)>>l.@Q$7U_oo<SoZiVJ.TQ6o;T2IJSbCEFGJE
%<?JBpY#O%$=4ML/lb'm7:C_ob@c](nI<&>9EYU)@(A>l'e]KN4fnFhU!+?sL+PP?QqrD?\+hRW7_EPN15&K1UOWqC&IhXj40.Q=P
%%-csYs-!fe`-p))&T?`gAApa,bhh`*l(g,5<8=F8ehs&1/&JaClj&M!cuk8=**]"DEp10T:Y/kaR^`(V-.Uk4?(]&]"Qtms\(@uF
%Uk\rL>]4h.BCG)56H`<J"b(d`9bm*]`=r/lP=ikYeWN,<$_*;oHH(eiJe:qP_FDpa8p[(P&sp^QMJT)F9e*T%9%`LkbQ$X[-GBHJ
%r"KS5nirXXB4jAB?iHrRb40TDjaW)"ReQjHXQ`YI\lXAFoL5,H@2W?#p]'J2Pu>-i:D-@KQec]YjaU*RC>]&HpK-tW5M]u,D4WDa
%nk:r)pC_mqG+.HthVtE%^U,T`c1Ap=s#9Emo&c_?nsVbmoL>D)h5I4>K"@fuTrdlmG7q;eZ(l\M#d->`eN7fnN@-$OaWt+X!pM2O
%d94msm,+5M.3iY7TLD!bYA_=W:gG.<2eNo+Bj=2L8u`VVVCVCD?`FikVC.4*4f9;l_<VeESok47.&i70FE+!-JqE;RH-rT)OE-*,
%Bm3*SkoNU^%`tbPqppi"0YhTcf/qh#5Z=b-\ImG?l7$rYrRE.FnCWorne7Od%@u"eSP:E:K$cMXgTfoPlN/_%]RVZO\kZ[moN:9d
%@B5[=,DK6"0??-7E_#W#WaiqLlXiMhEIW%Q+m)?B'[#[8&CADn`9:sK.i`'7!7J7D=bbK1,[QPcQOtZ.*b_6\<Df8a6=CZG,EAXD
%V=c6Xn))Amoq!Pgqo:Ctb12!n.;;+_$#3QAl!08fp\sD6eM"W1:[gL^Y5UM*)9Le5LN2#sJ55dIAP@7:eUR,jcVs<2'+::nTLl24
%eaEB79BX]*mJF%2F\7]gqq>@mr*Z$!TO"VPpM2;L]d<QIHE2HW\#8%80-;3foo:\,.%1B;>Z]#16@e\f=V-Q>TZd9a-3Eia/^[S"
%V:$jlJ[YobAjW(qI35jVNn.^i,$QcRaW8m=*o!S/;B:JY`0G%B75OPB67Or50N.#"lUe';&<q"l7mo2IB=L<BHBtI$XA_g"Q&bEI
%*PNn2Fe2E&V'*^&[!El1mWdrr'KrLY$C>H>UJ^1;7oVs$NlB)5&XV<Z.?tD]b:!`gEF\+K]%`8ANmA/UbHKd6gWl4bC<8rq+g`b*
%L,n%_N"@#A;7\@kFK9<[#uM2_]%a"0%[FV0m?<`A\#sZf-6"Rh1JnW*KQ<J0S4s9)mu!0cgt\+<\=_W!GLTPSQaG?`O6aMC#X0!'
%9V#VhM]@)gM;'#FLgWUf%lar39iMc#R]PIM7?r/1]2khe8%-?;dm^U8*P'>*)l>Mc\Km8#oV3HrX9;,IPc>:IGG\3]qCQ`-`H>Zt
%C5%H_T/,!7h+(BR.mV!W9ii7E-;%@g=]K4tWWD5(]U_(T5i^PR5"X.ueWTi8.+H=@<Nk@#aAsHNU+o&bNXJc9/IB)a^ZPAbQ$GM-
%X9DO!]PaP>s1R6:-t!K#7AZSRX>N#>9KE\nj6)^PObnJ"8W'Fs"J7aM:M`Vd_=m)YCNm[\/rH+oZ@i^L7,JbSlY'plY4m3B6?B!D
%Nubtl%t`^-O\quY(&s0CHto!-L^dKPf76l6SWl2b47br?>.7#pqPp;uMGjBbMro]2/`f0-PnW=upeuN^eQ;.`b[3TCCl[Mj-R<S$
%80t3\*=8&NUoJ4l[H]E+e!mkDa9OXjH(7>ZW,Ac$b5j[XCBtXTSrs2q6jFI=-(bBbHCp4@UFrL1<65/&ES[]r$>8&[*9H-#*G,Aa
%R]qW;=8k7cBkD6T3qaRO0!8-6L%,KKHM.D%:5or,73>Z%fN]RNh9AS&h`33YG5@nVo's*b2>4esGp+A[UNCO>^61mtVsE4/a1'7@
%js$uub0W/>Y-X^!'UbLqFL0k)%_=!jkt)E,1LnLHHN^SH:W<;o.:=hPAbHC)4YKAHIdq?;1(r_X=rJNtUs?-F]YUQ4,R[ITU6[s?
%4N#SMQuPD^6']0!WX'qa3T!bX:IVh>:@5Pm4f5fh>KTA9_XshR+W"#[<1TM]<*Lhnl]5QamtA8?m0g]`:i$8,%@[,Nd/#eHK8O1_
%1khElcPWNiht'1/BiYn<6o9lDckD85Gpi4j_^t]"P_jQ_`N8:nSpo'0X)H988Q<"NQ',S%/4gOu6DY`c2q?5)8^pt*-l[rm?]qA'
%#=nHCE`V?0-&Ggn0c+dm9!p^^,Z/JCic,%D8L94>8Li8^-^H%#Ef!IQU4t%t<K_Ta-[f#e@Z'Eqn[N*_.hm'Y+1nUNQ(^'ma%j.G
%n4)NTN%848LdlH^Mb6u%.hlh6rOL)YO$2_lE`o*mYhb#"(#kp\5Bp<SYL`^>AVEVYP[75k<U=JM*?D%]ST3V^r_opO]'te7qie_\
%:m.5ere6-mn^e`AEpV7-4B*5hjU+"E:HB.GZqe$WJ)R)I!T;3;::3D)*aY]"o?oB&CjB?1iM"2YQeZb/,@'PXKfH<rD21%t(6kAX
%'.FTG3q'pQKu(%'*==.6=d=ZO%UmtFFe3^6U&&V]2gVX&cu\0>3eM/p_s4o(:f"df'eVW0#UEc^F2ZGg??iDtgS'e$G4L?BVjGG0
%W>H_lm8.;R5lZOnQZAP?$P2pd;g<:N^A;]%!Xn2pFIisVHdW^8GUS+eOlVCh?Dh+SW1HM',C`e5knbD@=3#8a&W5*nK['r9e[#rl
%@0<3/G2XT>c/[Og($>eUlHsb5+cb^[[R7HiNG=?[oYSN;bN#a+Di1pbeOhGnDEBsP$E.6TGiCl?k?`B]L*A5)3+d^t00D@0lhcVK
%&!`fteTM9q^[P(u[_j'H.'UlJ4Oj"AY&iR\$0?/.>E;:`*U8c$\h6*-hc)i)_F+"N%^CH.MZ@HB,@)q)SdQ)%hc"dIKnhc)g#EF#
%$Y.Jpn5.qr3/X`.Hf:[0gF\a)5<.iC6eP?.[iMKY\>NVWW,DOgr2%"d=T-*(h8`5qG2],k*%=r-/.&;IJ)R(^'Y->qZS"A)LVebK
%0?NDj?$LT6#KIL#n>Q1P(ETTCl:\Q0cG/jF4Uf=<RnGCsPa&FES2#k(49*/bFmgBDRu8m]<;5hNja#7-LD$?G9t3=Y_F#?Xk;=kS
%e5]Oqq1XUh[iHYLf=:<(TmGH:P5oZX$P2?Q!k1[P3:.V#*ie](YXH,$_F)%IZLQ/F//u,-&(PkNE&[',68("?AT'Z[Qe/5*&k8-1
%>nj_/nRNHFN3;qPdhS/1NTf4IQ&+r%k]BAfS+9ma.,SAOjcHU>'QFjT(*Vb(Ghh6/SMI&^Mp!;ACOOf<TFKk_:dL\QY9Jb0]VB30
%DJB;hk/h<:Ho2N(p,p8MJQ5uFdn?Fr+tP7>Hh=l=qrm8XR94i,TOlTZ=e&-c3O?sA`Q;olDL9G-NF.=C%t*Z?9]=VIs6rq>ecOTO
%k;*fkq+'B[ZL)s]dDeG^i9t;no4E#JIgNhb)q8Y2gTjX?VY@IJTDQ<=e=PjN73!)0YGn=/[I&[VpN1-bHo8XQ-I!m0V%C<>q(.f4
%L[!WmJ,Mf)dJT_:dmUN>D])jSDT_16Cg6VCc^Z3#b]AL]In!4%+o"m/l$gQ;n&"Oih-Ds!"DDt0iFeFZ95N6&h9L52Y8k+7$LiN#
%o^6K(Dr?Q/abpg0]kcu0gl%suD]?2cfF'I&Cca*SDcjZ]V,QJ'3I2j+J-#*\B\I)SWfD4:)47Dg?0e8J0Wf"Iq;CpAi:cHl@Vd%%
%o%#1k>h+(<D#CIj+mroq.O:!fZI-009[jpW<aCWcq2Jo&J\b?m=RdFOLM!n@Foa!&EH8ug"Ri[Pg]pEYdJ]fmmm=,sI*I[i;so)3
%.HTEG@q=Y<?Hp6_HsK"J<MH^2[D1//TQ/$YS(<mXb?Qc:n_!"J=BjJCVIF*]NQ.5iY04HLoD<m\So;#pn.QXXFl@qK`""+0QO%\H
%jB</`]`f`Ao_,pFm1-YMN.c?Z4;JWP#%S%B^t4YWPp6Ca;qcc*Nt1dsW3oD>I*K74f17igpV):]g`g1Q3URERV-#3m*9LrGoog9<
%ZP@s*fakSI4PTB2Ac%:5i5?^Z6PTR9NBc'+-TE"Tp8jA/_TIU7)ua'j1?8GK3q*@fs-S;o6<?BtMP_'g22'(MFHSi_^k9urY32Bc
%Z3Gf(_gr=GG"CLL#Ld3o$:S)h#36t=ZA`GWI.Y3$DHJp,oSeqZ8@^Yiqo2hR!G*q@N8HpigL8VgdSqQse`hk'5m*mAf:#CP+IX/&
%5-JN5Y)+`9*W;4DcR!(,?qYr9+Y/6>`@`dP'Ja!1Oc5n=;@Xa)eZEcO7il1fYcjLo_Y6QFP-,m#Zi%kR9#,Fl"?,t&+1eH<CuG!u
%mS;BS0j2DT%6^$dnbhtGjQ=IOHcnaXq!R8[^cMN[r.`hR]mEjk3:Mrm_]"!pnXo^fJ:)/N"CFB`bh(\Wc2NK&W:UFE&0.>RN9=RU
%mYpJZLC\lrS"&uDq)1RLkJ%%81`u)OUP./3-G595IGPR@K(VjF9TjFM^4kC6AVMK.@=s8MGV9[(FpV9!&(V)`lSnUfH+1Rb*r_?>
%[0(*pVCrTIr7NaPUGoL9l==u0Ya$L*0<Hq/AbX@J5n0STaJCM].3@rA4mV9dS4;[opP`!_c%$3Vq!<:W0]=914(*/%F#%9d5-2Hs
%r-N&1!i"/0ZUY)r3%%*Q8at[".<cV./)\5g9H59%VV4$,rH)+7Ce`*YoQ17[d[lc+quT#nQMBD3ablB'f;,g.r9])HL@k>r_5D1h
%TE#G^d4au^Ldn*PQ!U3uBp%V\q[mf2$uO\N&#>_o%NacJ"$=cT@YHU<%E02PqPP50PT6(,7tcB'W@o\.^^!]m\n0s(SIr-^Wqp>H
%Gp;R-?*njkG=1TOA/;X);ClA[bCj'<Ck&#t"(-27@@(FHC5!>nJdaV(TWj1p*tYM^0Z0(],?U'f"#;aLMGs!Z"sJOcFm#@UCB=L9
%&?lOCT.)ZiF248Op_tKN>uKgV`I0tD&oh]*Di&M5H[F0>NLXb/AmC!*n4i('mFVt!@'RA-\YMCXP]j-,<cn!n:rE7`9`O3;)p*k*
%N]c-WMNi5@P5o8="&=t1+>OlYP82FriD3,?49VsF>oN.SKRMh;h'SW9bg!2lS1A.,`Ma&*#GTR)%;h$2Edf\r]7<_jS_gS`56)oZ
%HsdB4qt5/6i`bQd)D0Q=d6';0bUo-iI'Ga(Upau])PG3;QEqU">Bhp)Q0ciAJAeGSTtUBH(l!mbKCMXbZ"I#'$_f'a*p;cWcF6dn
%ZeU'S8@RL^8PCAs3"%Z+T#&D,6U*-4[GM4`2L)^SgLhVWFJJM(T8_J3"I5l16-[s;8?a22IeVu0Y4t*3gOFQJZ);kA+M82a,8W;)
%GW:&qcfR(=A9YCP$!/n;lSgU)@BcY\]W@b+FCM8&f]?/%8i?99joU*_\e4hIj@Z%1GW-5MDRiK\PGF+DPZuq0l.PVT9t)+Y+fCku
%o=`i=0;b)-r)_^XA*Al7ej"JO6^P(tj5T>GrL$"XBXlH>77<^ZdY7$_b,I/(8HA]OI7H%Mp!_R3!1H%K4fec%_la=1mZa3tRkjqD
%D]Lf+JV9]5@u!XmO`C3]QIhY6'i*`j1cLaQHT`q$CjjLOK?46amIi'qbN=-87^i2:_Qns;k+!f8/sC?q1bte#+):`V^4F=!!KM6(
%SDaW+^0fuPXVZDL)u(_S#&*'%%KtP+Ugr)K`bCc2Go\(MH>=mDp=%PQkBL69_+8e\T_Th0N#\ad7IH?Dbc!Dp1!?iVRA^-)rA-%;
%^+SP)AB8%a`F4[`c%PHAEFA;@.XKR+X*K\"\,"Qfs0/;Xp4]+q3dTg6psj2&9Rjg:p5o_FICkIVSRH0MB\kR?7`T[NJRMk5ToBO8
%=Z8Cj^'+?i2EG0u7AH-F*CbghDh]Fn(6A:m9bm0<*pkZ8G0d8gr"lp*6cCI0Oiktj#<LBj\$r>ZOmYKlZf`anV(7aS):6BAb5K!?
%C<2Up)8FEVFrh\hmZ>]O9@LnNGgq%9UEjl14[8/nkGd"_h$75aFnFB)mcj](T`ZgF=?.;k>OLZ_EsDmH&E"Z':;FH8`FagcB61%D
%WPbZ$g@K[mY?/1fM.:QQA]B,o9Ig_qH#)SIPCL`*3`E0;TRsI"(_u<OKb,'q,DJ%1)C8X[.W;NNY^?*T\F[/BUG(bT)!*`.qGR6;
%8'RD@B58B[Xh36TbKY&qFha\@\-H6I9[56(/%?*.XfifYW(^+Y:BkQn=6?R.Hl%PVV$n)9)6/s7pqR'`:E=m1NRml?eECRgM*IeS
%UnRjX*%-VN>s>AYp-OMJ5lBn9c0T['9)]TkC-=eI^f"tcoDN'.Wa"$Q:[8rV?q,JaBtG$TlP_Il]aBEep!3eZ<:gW]nh!f.3-oVj
%d!8CXNdA-5ltb=u\S?ORqt%<9?I?&F9);MPHTJ(^Le\i`@m"sfN]OmjM<j([,]$4XB4h_L%%28NVk##6:1%NM1/7L:CFld_3:5cq
%-<N/]lO<4.TThBlaqnpW9g[7rl:WC.$jKYg:HXj*^YZYuYE=5-i%5'A*dG"ur]O15Vqh11F1N3%\oJm'Wt)iVAFs<$MrsHI6/pm3
%U$Ni:og:]4jS#ScNBaX;T\%mqg*=,CS\;t*^<j`OT(Eo/k,D,$c!U3H%,*2j^F4-'TCJcJ1`:B3)GUca4>\uJ/k6At>h.<uUQJbT
%s%\BJbp0['ib<#Yk^88p)1Mg7/g35F#5U7pqD)cj2db4YoO@<j\C+fC,/;dX-NM4_dYE93`,>J`[]Zshh/(3YN1X.qaK7^F+YhDZ
%V6a#WH)3[Vld`XqJj3/I*](4M:.*p':2=KXB<rEWbMQSY+,/Aa;)W5?i]3gcZr^M<B)>1ZR_N-6=pBC!HUdKR8tq+KQ_MR`;#Z%!
%(RZ7mDYDVhM68i8@]T*]bs%SBAo@V/m%^PpiQm)O;mVO^Ss'5*DYDK-6`]h)c9@\Ca9$j7p9jS<<G!=Ir=*!%$])(!_ddP.c+nsF
%Q7P\!BVI5c#KO3]1W^rr&,r\mnqEt!W;-$6/bKiSld'bW][=rWL%1<+.%rBgqCi7@@pMO<)>BF;&#4FR_f%%Jc]%IYei%p>a9@G_
%?aruHAA3=@OcE3[!L'C0T/#krp#t??7`PBN!:Z*;Jk*n["@IAbiTdagR47Q,U'WV,X)%IR&PXB[i-oHY\_fHTHWF;&q&E.S%b0gN
%BPAW%YemH0,"C_oRs8aP@lIGIguVCq46B[^d<roGRQRf?q*Y20CZhlnZDHDp")_h">c=:8G:4UnMRhLHc%@ZKRBqSThLe=#T(^g8
%ncF_6DII`Mi`i7\!n#`A[6)^!$.,*c-bmBg,-VJM[4fkaemDg2KJTfE_pb<;e%n+kj,*8V'*31[-c/!YiFEi,T(6<3\;qU+*$+rp
%JI\nGF6Rtjl9n04k:8q'``0G'Ms90\l+gb>b9bNBY]N\d_W.4l!XBqo!p:79rO^A\4j9"H<qe.pB<9EA&W5JKgYX>J"IE'($odrA
%:p@gibV<)HUVK\r0Q7$,PXQ&^5bfD*3`P7C:@LgjbX!*/Y71+[@>.H1EG3UJ0GgCR:X'iUVU0VA5g"PBH7,)&UH4KKe9sAni;gG<
%63q\("TtW2o;ndoa;GbT?frI8Z*NYFT`Q@B[p:Cu4HAdA?+(D%Cr+,bO,6`B4#CC(SN$\toJhQhi/HEc)&^A""W4u"KdVhsk_:or
%9/<=Dbu$\PO7#Zl#V8t",a@5CVK\#ES>MI)nVD&j`=1@Ti198!p2.'XL!8,j[Ng8b(ssW'"N%%t>FQt;WK!t*[+I*.4,Z"NY"P?Z
%A6>*ARZq"a'>O.5F^*Kd0eU:&:&dIdJ\t(FQ8L\lJJ=Y#ER@%/_6QRfe+BgA@^>.HkQIGqH[#NZs5):bMj1S]fY,mK/[\=^-[*+,
%-NG(XIc)n<*o3nDkldo[@3qQ;U:!4+5.VH-.4An1+Z9[>0+pM]bpZ^eiZO/E'`Rd-RE!!jHtG(]dqWnlnZP];%0%6)`^N:JFbu0(
%K-H`!^V5tspt(R1$NE/%Vt$sKDME9c"!.h*Jl15Z=5&@A)0Qogr`mn.CZc1[694rA"O!+M7D5(:OJpFF7Pah&Vn9*mF><PobRPsq
%T<)844[lpHG_9@[Z#C=478Rr@G`@,+1e_nI)oGe@):/KqHo]S.?$mB]nOiI`U'X`h!i#4F3&$-`HK(ZW43O9:4:7GB;diEfo@;W%
%XGCe&>(.W]ghVB*"ILt&9Y6)&Z(5-N.p&7^Q7`sK3ldtKn\'LS!c+Kf2Eh-Gp^Q`FYG-[JRWZ0nY-MuWq5V7a]DsYE\+'@o-H6fo
%P^<tL#nN+klUKpiZ]mh%ju"O0$17iY_B*)2^PO]h4HL7"U:NXD)PH&<:>#gAiM[-[;g8:UfVH?%AN*im=f;lcY[I3n,0N,UJ2l1O
%=9-mQSIIeCf\6+8aiO]s%Q63b=Y76^'6L>ppf\nMD5@L8)8iXp#-KW4!$4$sb&)0%fs:NN$-afL-L6M.<R2Br[REi3XZtKQOK;t.
%iO^ePVo-GRbb&#BRe64fm^+&9YN?VhHX6_`PJAB#c,XKUh0b%OZd[:m#3Bm$=7;7<,MpYBXimq'OR7FPFMfI?I,gDQ/.;A2@"VY#
%)KVnZ4T<XKHlCeKSEp_I,^eFfI*-j3MJ+4C0N>]<5-a]@S-73M@=qbTV@10fGehOWc0,0.T!g>F#,^`3gR\/UM_EC"^sGbqcR++T
%RQJ<GB';lG8U,doME-/GF7)?l+Z`boRq+YMs2>J6?o1iVrJ&TL]A_(kjpn6IO%Y>i9Y(1FUT/+Vo<aMQPlH'81S:nCmjC<k)cp^t
%FpDW$_&`bEQGl;\kC2#R`KP.gqRK<cSbX9+K&t7/(tJ@7]73)RbKL7sq(F4-f3(nocAeEYl:^EA\K,i6-.S@3;mT)":J(4*p!bqE
%TaZ6>Wm@WA?N2rds.P65BF"jU?A#k5=AX*nSkWfIKB)*tfZddkFNNQWY/Y7?VPj^lmsT(:3\78\h@MQSe+IOV'Fs3&d<\J(Qs8,D
%r=I<$G#g<$U'*\#8@0,V*!;?#M%o*k]@u9fpHs$8dZ&#5VQkg][V3_75'#JsD<ao/9A3;!3T/L!'8T*,(mp8XViVo$mFsF/m>3hD
%oFt6o-`+]\V*+imPWNCJ'd)D;Gn"B_`gKM/a)hM,oRC+8q]T-uS)ZN(PBcVl#e\Bt8f;0FEYbt[,7j]>G:)c1VU0#^WLme_'ie2,
%,7gU5*UkF+TJ./:#tYifO[ufd<X#?C/(BG^9's1<gFJ:)E-':GBW:IV'X9O5Da:8W+sCdb:<l3gcKNb^YS-n8AtA)!;JYbZC1iQc
%0gF6tBUpnc^NUB5QAi'&!12Yt?R^4a*Q4t=TC7@R[fWX9r[aCKr%&XlYk#6SZO;7:H2PJoV!u06.SVWSY?#hSQ#HJNC0pF_C'n5_
%J+1N0IS`aI'86[/]^hrP/&@bJ!j#$3'RfZFB-@9DQj<V&B3G=K'fp;P:7asMJ7U9.OhA6W,@c=.#j@7uf9Xh2KgT4\lj5EhT,u:X
%+RNhaYWdhKDhAWEcqi\9dr6b-5(^,;jQM^N.E^H,c($uGE*ihq&!)fgT"=B6EI0K2#89i3CHD)N[]i9QI+4-,)g=KZ]W1B-9]i`(
%`cM-d(^GMK9^r_K^@1t[(#I_9M)j2)Ri>@0UH>quHJ))LcRuQoRC<ZPlmM6)$Kh'_HXt>j$A/1p_/"eWhVP!NS0[1_*GQ!nLo,*-
%:\iIK]_H1qZ10LI^lMV5_J&f7`iP1VH?^mS*RjVqs,eAOj1@O?G^]8PAleh^\*7PmJCnLbrKJ8j(>QB[,F\(p[7j5?<67&4akYm!
%PccmXbk[qgL$ZW8\nd9_)>9OB@mPqTVVF*#NGnq8Im2Ei-ZDMh.r,M*U)E9KXodi+/8"I+X!)fk(OsF@Rp094e1tYe>.Gqc?*aWI
%cg@6PecePCr79u$h,YU7gQSkOG+?\6135/YFMp*NSW(P*Mb]r!IhRcj`g]KVV&$m,C%/JpGTi:Z=c6)tI5!jSbhW`PBSqHO$e-#=
%S(K*sJuE8A/.s<q`,=4&!uI!&D]!Jc.(P2Mn2VqRfGjN0+lnin7S0?6&Y(LdJf+BXn7^iO#QuZJAB)1`"*$(O'hL>,:>N!2AW8&E
%XrGB[.b$015W'Di^sPd-oUP6%MjU8,J<,^qW/3;6;L"Wq?qj8B"E(R1><YcS-'N(O'j![c3+dFB%"$QiABo*m8.u7CDf6<2Jmtar
%mZo-'49IP]l8IRd^hC3XBcb:<K&&eG@M?gp5^\[nME.@1n,QrWk<S!PFDrc,%C2f<rPm&Uc\H=`c7A2IV8qV(]B8JEKAS^KnJQOB
%]PSk!IgmWph[984p6B1g>&j/&gXn\^B';3T(WGQgb@tUGOPA<RH5))D?T9&9T,!q-D)!'tG$u'aPP,GG,+uG"7tg6L\B>K#`?ZR8
%FF]C;"s%M,C_K%$h6-9BI'>^dgcl&7C[OABUZ7*>U;:]u:?kYKB!>J*Wn@sY?BZQAX#^Z+!&cqekY)gQ7joqsG#qUVA['bd>gNeT
%G^5ka_kgicBG<Dh;?L&=mRmdOLd^EOXQ;I!2jqoh#n2U^oQ;bj@$:Ru,+5@F\:Ur)3##caSIpWU%KJjQ&SL&#OMYu$Qk<]jc!k)^
%%$D?>l+#bOeoD=Z!4\7VD&=<7e5T];N+M&=E\N)h_E-H-(7qiV>]-%XcF!/]Wbab;knU[kEesjqWK#)LL&dBWRTl(T:1/:T/=3#7
%3o+T/I4gjoSE;.N*Jh!$d`lKDmj4N436gj>??Sd;j%ItK^n;>AT;WE0%0=DF*iT^glaX;8:9fsGB1BNd*GhF3KBguso#M+l*WU2j
%P4j4??cAbTlOsbXAR+$?%\4`%LH-)mCIP.KibDS(G@*lHO_pbeOO^$RK#/7RrF0Fqb)pBHGA#3Vk.2ne0R\-SU0Tqd16Ul'U2eIr
%&W>Vb>pM?JVKhJ&nK$!^YFXRA_)?&M?B5Ja<7dYp>MjZFP=YgEWn<+Y$j`O,)A`s*1V6f>TP%[trDI<uhC<?jS%"L.MK\]/eDb$8
%bBsJ!ATu(]d6/:P.UcQEpnhIDA/-/Y!=8ScM+9Z$%,4'AA=_?_4gsmK.(QT'H>M2))Y@GK0.]6>YT8%KI"eX(H[qeBP[#ncC%Grj
%?YD+/lM]T<*`1pQg$@XM4p\q5F"DBn%B<E"'X=qM>F'5p&>iEl_a(G+J-0&Y\=$Y"9RCOV?^i*KS"A:bY($6Bn@;gaO.DDIE(dc@
%(221[d%%K'b?mJU[+u[0r0p^[MBG?A:tDQ6>9jUt%l.^n)S+;kdE$1j[lsY7lZcOc]'.si62#jOgS)ZTCfk[4S+B=V`3AJqglGQF
%fHr_uEleYPI<sP=l*0JJ6qUc>?c.GUq_\!k)!q1GCJJKn*o7G2^:(SnnbeU/5'9"J$OlPFPPNjdD;BDq^)e4ZJ(`\"8$Xe#-`(">
%GT*p-bl*[$7dSkrB$6"lQ[P4i'KdfPpb_JZT>n`c`J=u+mXP1UR2UX)MmQV#Yu&Vhqa1!`m[5YPha;;u,+]-b\,l+?AE1YQ:B&F/
%7gtm16pEJdXZ)!ZcHWn.CqIt02F)=T(gCneS!.Q!L9^EjY]k&q*_L.V-f<+N`qY!Fq"Z!/<2]EpP\a8*oJ4p,[OMgeU$.u\49jpi
%!rN0#L*?h_2f.sf!oQ]Or`TM$RUu6f,T%l@<^R`CdQMfChWJLGrG9.cd/OrWkdU7Y\QR&mU'@<6b[:I",'onBG[s7B!3"j,9FP<8
%PCoY$(kDPYEj5ZTS:gd3Sdc5-s4c>:p#^C%f678n%j+UN8<!E:gb3rZ=gpr<1dr(i2N#@Z84HK-M#p+MEIWE2>'nS`3?OO)U@Z/#
%;5D1Amb-2LF-rG@A)tu)mOfTi]6a#<eb.bC)f$/uTDdosrVSDL\Gu*dNW&X=0CJ;j,X-STrr)A84PnpXs"$,i@G0/6%\N]+VL7u_
%ht`&N=5Rr0nUl&#rl^;Y>eV7rD2Hj?+9+O:o7)145@Ff3s8$*:qnn>Yn%O0l!sSNmqfpIXIt0c/T"2c%pu@k<B@":VHhPuc:n[:V
%*7)Csj5mllq9,,^4\h&eW[OLN3qgp\-)]8S+MN0n&l39Ajq5=To=sas0&PO`qWcCV^"<5tGMW7i14K/hT`cIDn`u7in+BW4V@P:!
%@k*O#iu]@e`]lYTbobb3m/)jQGLnct[r3q'?J^1]c;-JbNP2r682[dnlXPtSs))a^5O.aGj3nRU58=+[UK-7;p=8Qda")[_HQmh:
%'E@Y9H[gD<r8sbu^3"Z>q[S\7G3n5EMp(G@pQ*bu[JSF7_V;g;SNeZ[CWl'/rVk'bqfe)6`T[q06QD_qa,&dSb;XI;T0=k5cH]3Q
%"Q"j),D>eEYO>ir*'r3W:I>s`9-54Aps./\6NlhP;PTe`HUNV\iVlV?'!K)PpdaGdhr!8+f5ZJaV98ZISq]L&D*Pp#?JN2@ro3q?
%fZ4ogam^)7DQdE]Q2gh%lb<AWjitiA$)bC[_Q8WrjbqmJ=8LtK]:7"@S*M_Vr6=Q:[s.S9H5cJ)&&8%miLBiMrLt:(4+-WErq3Jc
%\,R',rP?+`D\)m@hsPH3-9qEhZY,p$_k0oaiUtm1Q=At50@$0fo&"n=pk0WI48]S<4?n0.8itVdb9<1!PUa,8;^hU3SSo/M<BOF5
%<n4%V!9KS7lA$nS[UJjm;j(I.S9h91V8G'Z+]l5Z=+"AEeRPVeY!['I1>rAVZK=tnjUX6t*WIC5RlfaZJr3,8RA+T3p1#Vp:Cp'1
%4p]Ss]stRB65&?O3uV4^flugs6^;/B,oi3g%7/%sO4!'n2Y4u?g,d_OQ5Nb#(H.$eMgqs$gNsCMKFbt0Ce(*be@kaSr3]92k?0<g
%)+Dirq%]#jW'62N2_`E++Wm#Dd]mt=gh&Br*TJk4+4k,hkTba=LY@i4`XU]=[LKVrrcF40pC`L[(KkVKa&9TPKpMu;lmE(WKpmih
%<nCEkaeZA.%29+MkJCX;-&@T^`e4P$kotEi7A#S!0pf0UA&)ufJSe$u_ou\am`ou-_h9#W2]YNs]'B[bA*Qpe9g,I"`a"OTlO`G5
%'hU=p/4;>$\_,MGp#p_plVJO01Km9Nj09rpp)GP'`IcQ"UET!6/Sm85M]Y;Lf]1VrS.Y]tMT>/N[e85:L'7oj*"@E8\W.+*a5UZ'
%[LNDYr-G;sAL*XMa3(jd%(XeTeBn0J/0(DqFWG3aQ5M&0(,grR[@_>UloU&Za<ItM`"a#pE]Gl;;OAR<$mp:)CKUQVA6#er)@T5!
%cSA%S+37m:W>&_f3L<Y(dRZhY5-Ep^a?%uYDCaF1g=CY_[Gfbqk^lnESA!Ys><^&1g'$A!6=hqb==QBXLs,F=\/>DI0gO*,,^8n;
%UYdu'+m^Qta-F4oPOO+dYRNGg^!8O?D,&b=gU^1i2gh'XFlc#@./u!e`cuo@+\VH@U!T(E+?$\O&fW,?<V^R+*0^+NX>,mj?;1^O
%gO+aC/'JUAIPqiU>ZtB%R`I8C"NS+9:h/l'G,RM&jEk-_rY#K-iYt>0+OUfI/lDiFfN[bWKQ<?J1Hef`/Zjh&&ORX$W1[6lbnV-U
%L6?M=,dBAR)$b2Y6.EpnQY(8MWR1U)Tf-GPEIq\/gJHYa+7)jYi$\S&eri,-?][CJW=B3$P@?tn#dQ]RN.DQb"su1$E$9P1a(L_U
%41jeseU.s)HEKh,F::&?P'YJ'mk#RqaG-*J)q,Pfk!Yb#?UA;%Ct1nn5S=NR)9F/AYN.H=r.*$>R9sI1PbT.rcgV>u<:@@;*cCi0
%r.+PI(Ri?BR<8e18do:N'^9Q?M(L$N>2J@1=gZQ7D6p$JXm8SuE_1=/&RAd#$1a?%UPDc;!`F(adZG!0>Fn_S-S-r#Sk&MnpS7>K
%hs=Ej^839m@J<?X"B!FlPTF!UR(UWR7)F=K6p)WTj;As`q%I+XY5Y-DJd(I?oK(>TQ(YskPtWDUYXn&YPHiG(SjJQ.8OFC)Z,i4B
%A<Y(eLt-s4An&:0eJ2n,S#+D[9<dj^G=b68iD;OZ(9DcjGH0N6lQTQmk"]JAA0\G-%Kpu"hq+;9obb'<CK2#rEP;RW&eMh-\Oo/V
%;tW6nlb]M1/*o,j%jW=Qjs[Y'[TZ(^"+QoTDG)0QTGUVQMR4q&iOQMY$KiQ>'P'gYWNE*#p#Zu<3N6'c:dI1Qigab2%H^TOCkte"
%dEf_^.S#o+cum:l3bodIh\%k@Og2[O)G>+F7PLPX!n),27(d&A/Ctk7-%t2ene$dr:5uooUk@9:I\<YQ2C\7UWC2N"%r$-Mb,o`?
%/Kf@2[3dWQ;l7frN5!jUc9'0U"<D8=4;@b'Rmfk&#tH2_6j76>&MkSeM]*s@F,`^#gnpTWTaqi*1dW#!;TSucm[Bsg8NV`!fjO*4
%P"+usbUJAU<6pAPA<T$`82&D8_17Fbd=.cVD8k=rU8aJi\Rs8Y6le+JO^O:8U*0TqFEp`@(DDZX3:tcN9io"\:ND5hbJP%=g[_p5
%gJ.OHf(ZJhc5$1@Y9AC0a>3"V`N6h_Z]CDKMZ_0r0oZ=;Mn%"-`PZKTWf=G7d60M_nD+=$B1dip'G$h*heZ*2;\`8l[Bj?P?DZV[
%P,HJF%URF@ck,8_LOWrAd[Eb_H=gF(PlX6O<G_2@MpU9Pr184C*%O-b6p$PPiatif5`qUpQMm>>jl5J]Nes#;,(WKh[NWhlRCDP4
%p''g.qDB@:<O.5!iEP=L:3L-:7,SI:$>XS1.[Pm)4/aE-pJWAOg4H+9l'?&jR>@Z#EVP\8TeJGQ%lZe@%tDUjKg.s&/[XmfXrs[g
%bNs8NI]V/l`X]I'-L+K,D*d8R%jR_MP/&VSr`@"<W$mo7=LH3f`!^7ZP"gn[X&"?d(=lW]4HNbQ&m`j_&qRFofk#%?(aWn@E3-!/
%HXph?N[Pnhb&te;+AF_+*_*\>]4%uKm9JRS"`PV#$6s\qcPi*sY(ou@r./dg<@&$-$GfJ(LItqMCRHS^I2fI-eHjk[CGdH=XI6"T
%)Lj_Pj_ugi5Lr6<HRnRh'\u\!M%e*iKdDHi7>pI&IFb0P(7:eUfkIr/e[8@0Gss!QFJaj+!KX3YT.+5BN,r.aCRNF>[)AUO9eBjF
%,*+QJ3fXM>A#p5?lpZ3:i2VOn81s5E#'JsuI)RIIA4EcKSs;m7%Z1pt9P5_''g'a'$u@&%)Uh,(>#r\!;@J+O4HnJa:5gK^D?m:Y
%)$\bdIRr`9`OG]l+K?&K*IUp&A?LT78FMMe:s'Er`Zr]=As_cm`#U`g75C44r@50HD0/E2'.XZ*_4%r7q%;GbBR%s?Qu4B!V/gn2
%"Ogqc\O.oJ1C^XraMW?8\j$Gn`Te#uS'&W_HD00sR6],]P?4=Z]2.:N,HhK@gp%W#<Mns'8BJFe.Fb@<P9lFpL)>k'Wl@XGXtQjR
%\N^mI6A15lbOT0*7OA=G03XLi8lS#W,t6FG"j'usUd=`.=]qpHLO.rP1Ql_c4/M,F;A)\L*Rk6c<,5>;Ju$ndW!1'q\;Td18>Coa
%a=-6a2R7E.ekjn).YWS=&.3]9W-;(o^id8`?:!j%?"kDpO[/[r,!uZ'duKSNHdi?]=lkhee'r1Z.L`GGX@FG1O=h6u(QDtKV5d=4
%)H'!1E`K:f`M/O>XkRq8r(NT_)/c00<U&3T8]CBq[ZHB'frlR2[@/O%[DnqpVmHt@N@?.uet!a@,;tljQ5#=01f80'8O@.OMGjQU
%bDIOkd;U&MX7u<:B[tGWN;b6!4cYHJ6'*9^qH,3\9M-R6N0eolLQXf9"rhs<_b<5TEJ?)W?)m3bH%9#@j%=2flr:)l&sqOs)+O(:
%@3I%=R$;9[n(+h3H.6\g!HX#5X.,S0FCXOlMn.9-[@!-d7M4<Q*/>A9"EP`_W?)8r-Dq8u%=4J*/kCL4I2\-JJ[>Fp92LBeKtB69
%26&0?eDH)Y5+>\G`Q$n!_@F15"I0.Z+Is^.*BHYo0fb(2_gi,-P\jJ<<;1Z2K\^ijOZiT;AXIZgdYpdd',8cH8gEa3`G&=B\;M'D
%Y=(&C+U&TlcX%iPj0af;i5H&?@f6B?`<s81+Ga_3)@7'Y&N_=iPB>_sb0l/Wa^j5r\k54:a?ShN)e+^bf8^2)[S\UOiWKZt7-=8(
%F8UA96N;JJ8qTqbW<BF_4(3^R!PoUpeL(T7YTdNt8Oj_m**mCoY:b!+[)@2.In9IqTq%`/JfT00eYPlLV\r?q'V1K*O<9TunfrbY
%ZUlJ!ia2>A-&BP/qnh@a,5VP3ZCg&!q]/5\cgb#dEtOo.k@,1C3#uO!g,aA2MKRPdiU#a]9>Q;I<&sFUQ'ddqr<*hbFM1@%3n\>m
%8n'X^OUVm1(+6"TH@fNL:bZ<+K]R1r&!,q%+Z-[Yi4_Q`/^J?>pAcjiTS*D=\&W(^lTB^#fk-DP\-!Gk#_0"fKg`Gb,',OJ.'Cc=
%6g^h?g0D_:p!*^5Hdtcg;'b*-k!5c7V]uL=1OGT6e3E.W6ng]F5r:Q89U[*hDCEXc<#G^dRrKS7(aVAre<abR[:/^N:_QuDgq[c8
%gJHYa+7)kD5b"9.`&o^j$35?XRM`M2/N%E:P:!LbAciXC.O+U(#ch_pX_kY#E;'An6Wfdc'>.T*7bWrH_?nr%[ZT^p:\XV8M\L[9
%r2lsq;QkWBaEF1.RCd2?9"C2b"><f[,SX(4NSYboQHk!6eC*S2,e:*If$4=>k[,M_9UpFT@Q"]T')]0H!AkT:!NF7$QY4XmiO<I)
%9(?hDh*n;G8Wk>4.9c:1aQl1/8kVPbaIllZY0o0r$t)AO6o*FdQh@ol=Ns=HA2:*n2bR:VL(qJtnEEAH&9Pip#[bd'X@_"(SVI$#
%,Thi\+`5[n=0j,"p8%$F+_o';`!BLSJdSYOo6RUJJ>g,R*Y"^W.JFN3U*Kr(:1Y[GBH/$kp\']D#9?$J,*\3%]9)EehQ&YFFe&M(
%QBBlfg=/qLGGW4tW#J@0%_Ho,C-nlU(u:/:(S"7;dh<j%\j<3)o"^s"Aci_h@cVK["9idk#;<O%noGueVPH,[JrLg?&Do&GN1e:C
%Ut2$?;lu%>[5lJ?K1"0o_*>0h_ik["C=;s@WJIO5-90/>W,hPNeEu1X8Ou<m]5<'I9kV$k)Tb9e#%3[i]SgNH6X<b=afY7=q,F_e
%Xa1Tlm'B+q/f[E?b.g$uQSEs7bY<*KU,R8F#EiMobBO0qI3=dbq)+abVkTiQ7OYX_CXi]Q;TK;HEReZXXqI4I3DY=F!]?+Xg'llC
%)*KNgeuNZYRL/jW<^$)rfp4%'3Ju\\N<T^V"\@=,F@'r[E!*d%HfD\4*antn/YNIZ^mpC\.D.1NWiO\.$!0.:rh;,Ob,RR?b@c5X
%,M@WLdr"s,VpM(TR(&qbS[(&8Pc80>>LS*q#p-?-[^gs(#EhKB>-is_$'Ng&h$E&9!)7Cu`8\n>9LPC@88\"R5[YSQHhCDS=)gK7
%\'d7GD)t1%Jebf[BCSu;nq[ncLu^<03#tQiiH$i#MIK)>?<+ioj3GR?.Z<G?Qt;-#Lhee#&[<1$fZe^"rh&jEmWQg=V:a3*Gs:Ah
%,\XU4FKEGWU</@k9W'.Ec@[S2TO/7I)J8FO]3$fXDm#lV#0J+*0H2EqAF>oWX`43]\X[HE>3tohU3nI>F(M?lGQpaui?9e1`8O:,
%rt[2&+Z;nAn#G1O,hsaI.C$=<TV(;R_-=S$AqGgpYcpQMn$lgceS)I1@7O0o1;/bq[aT4NluY<$2f1s_7BP!3K0%lWFlNj4AcipF
%dY$?ehR)KPjT7&tn$je?nLoI72>eMj=hn/@M++g<8YM/Zck*C!gOMjEW'W#A&*2\5.Egkqh07rH?&bR)Mp?_R.-MosElT,NY"2rT
%ck2g?^),iWFU1O++D<;)dW+_dG!`&1#K[p?JX?Lp,KOXV3>ib`7b&bR'MOh;SG>K<b;>V/S]];W:g\1iNL0,-ckI;[lr];E9FWp6
%N&HJnp8YK]4%$QXoTQ?Y]0'/Yd`e[2WTBV+D9"Dk%bIGWNc'2:]\$G'cV,MVQJ+DoWU2_m-_oh8BMig>f\R1P;ZW'S8I9=L.:7U2
%A>s"PM_[rjFUZM-JV'em5ZE;#/LP,^!I!LN"5_*E(I>ZJPf-3i!0V)4-;re"fe)3$;'T_8W6AkM-4@tXoaXPZDZU\.+9U#'3E8_@
%E:!rWi-IlM[4%d\d)E/=WPYiHl-*?f8`QgT/l'UMJ@g_\h&nmX-0X9?\=mGO%8atqCI5_`F?1`uRUC:K0"FD*Q8[aFB0hXQqU'/t
%AD`6GA6M^J]5'HW,J=SbL>.G+QY9/=pr$*tBpr<mPOkkj<J*u,KcOP=%#&VkXo)e=^/JHtcY@7.ff`Dj$.\$>QdYm6h+QEPRFdoK
%E@:!dTE`R3I+@<Z?@5;[0:&US]Z6m!\D_hK"%@3,6=$N]GeLfGK<;&J,o.D'0a,fEBf=LTn#k!&JG!=GO,HaB7i[3=B_gurOiZ9#
%4>T]!TQn=Ym?.iV0EoNV)5KK%>S4]"#c$Da17M+^gJ(9.$7)\=-'97^!]>_3ACJ@@GL:Lg+GId@1_p0Z-"Irg>0GiE(;=mJas8R.
%4-D*9_"ic26P!tKnYTB[;,348]8(AO-2Y+Qoi0AX!469mBP>kS,te[SY#nC1UYbejZcfAPQ9c[HY`?,Z@s2!r2S)#aK9_AtYlL6]
%G^kdd6p9H3l#-:=%I>LN<ASs12\8Q96:of$%:Ik*P`34Dl.1_5<RSKLVr!9Nl(^9U+1!QLiTg\ph1Tm@dULiI_M1l5,;0]js3R2#
%,7D&Gj;8-]1s+?"\-jtWW&<[gH&%kW9Dia571e]L0./@COf[/iYf.PP?7>VK:O`CumX)?Yfrs%^5O%T4jQC[fU8lK8h?2N?4-dck
%@*+=M`mFIcg;)Oi,i-q=g^etJXdtJt11riiS_K/?P5HB83:CN($'NBCl_K5b7(uD:Zk*dg(N%2#V'*Js]4$+#7Y'Q>F%F/<8f)pB
%[IQWaRpX8]8MQ:R=WenA"JcIT*kW'"Y%3R_6;mE3_O!h%Xh\=u->'%b!*=35U_$%nj'G8"J@3qL#m&C(BQ-:'I*[)Y$"8<HgZ9tX
%+Ws?l?mC@RWm^a('S;]N2%GGD&5GnmYtS1(8C0HtaU4je3h>Z='XC%jAGS,cT`pjccjh<O"GF/1+GBgFQH,2rAg.t6<f<TG&.f^-
%9i?e)Pq:T.X:W1K`P8ZEOG$SZ@3^.B//R[<gfP`@fb2KUW1qkcP8+..3S.eq;J:<<g*\BRUa`-VX:PtM"YQkf-Br+j`sPZeoNd3V
%6I^g+hpSlTcule$@tapR3SGU0Yes`+_Y.rpcJD\7;@&F/?SYjE3sBsk6V`Gll0YUqi.PdYh)5C2#XI;_iuj&!Lp99.$op(u$$jrc
%4?V)l_$U3YfnINTES34FaU1oDM`pADZk0$rG]PWb+kip0,W0$:85[ND&jnW3&qbfQ!g'kRZ+2A_Oef+l:r5pm*7#11,BSoZnj3^>
%H(c5aN!$Uo-SL/K8ujHo"=RFk8QH+Dl/"B<Z9gf%o+*o`LcS!LB!=U$+!8q,Hg"IpiL6hZ&#'cQ2@FalQmO=OkM^1/YsL/6*:0(,
%=WnpE\%uTO(J_liSek#HJX-fCE"hd0Y4[4QM>0WgSi1>nM(#?L?G[.8B49o6L7:^`@O-I02j*!(/b]WN_FRYM$c7oJ/S6-3=[)EB
%QS$oZLtIUZ/_].;QrNVhD'CSom?O]+RhaW9blgPP_3^D.&.LT9gkEHQ3"Z\3@TjrcDNDGY(8;BGT5!lFcSa\f(cU!BS)a76p6nJr
%%]#A1fLMHfG;,<qC;bsRl4TD5'+nH']o@OeT\*.H!`!iib9$at,"o^S5n,f9:V5$fEFa#qL=71U-c,tE>@[NsLc5@;/J/6!jdY-t
%S;<sgod/Tc]J<ZCM$PX*h),=8UtADF[_XanMe3lHn6K":INNM3Cac5o^knf9_($rE3'_Meqg]?rc).]U3)BnXX?beToHCiV`>^GY
%MR4tl5T=H29>HZ!o&96M-.oLeVHa1_#Y#GuZo5hLf`Og*30DCBqhQJi4u")j#<#jk=<c%JN/4fLn1khMPG/Y/0O&ZI+Xa"l<S8:2
%,1m@*WAWa)HnSC853,-$LF"Jp#H!r*=@/#fTN(>r+*%LK9K+OX#No>j>@J(+H;8WFZ,I]qa7:k/R"Ho8hG.oBB-L!m=[C%I4S?"%
%=@5j%BD7][O-gSXSA_o?*U%0D6;GH0m">'bj?Un9.nds?I$rcU=9?h6NL/<b%Lurl4+Zu1jR'C;,?Dt2FH&8B^;V`;-\B^Qa6+@\
%*^l6VLkCJ)H53b#<?&I!:O'(b9B6V8CJjb4b`ecY%i4PlJs>7lkM/?"o`.7gZR:nNq-$B9<@lsh\Z*UH;CefVGC2=RUmeRYiH<#D
%\R_=bnAucJLR6lF.VbeU6(ZW*^+n*p6.VlP,9-9K@S50gWZVR09*A.>>&nPEcuG\)o*^D<B-S7EI^tWlIM7\lfYoSZLL<>7nR/m^
%*f)/SZ,+",C.uS)^+,2($7:5-V&c[G"+cMhMA_mHL3HpQWs'<jH_7ZUk%21H-uT*q6!b`e(BkA&I5nVlK;p>l.8`5Acu4CnT>'U,
%H&6GqMTDWAR*'rU(LIX_FlmGePSggmHZtQ/q?at@&bGN,(oQVhH%V.OZ&,)A=sY/Pre_/&_igXL&#BoR"&#*Hn0X(J-Y:%tGU9ko
%Pa6YNb0@>+6](gH;M(`u0lH"E,gikJ]E\ZcmPc^jh[o-.pT:3AGVs=f-2"O39Wpj/k@Q[Bp)?!$Y46)(LPg'<eQ[R@GFil6"#82&
%^#In;<BR2tOV@NtA?)U>Y/0c)/gS.S/li5:6-aL_pg==Mj2!0NI=O!b>OaoEh:9;Aa2BV5:9O$u5'e2U#7$J.4)ie,cJK!!&6tbH
%IZHs9-QWi*48U'R+a)Ul]9XiA\QGJ0iA]hf4a;<rn\ppq3peTX>k=:rIu=9tQXB[fjn"s+gg.XAL#9'3r8$HF2i#R8Df5"smr.]"
%[1:OODVj4,hVB1.]srJ$"J)t2^\Gd7^\d3#BE&KoPHSK~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial -300 -170 4500 4 v 1050 -90 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 1050 -90 a
1050 -90 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 1050 -90 a 1050 -90 a
SDict begin H.S end
 1050 -90 a 1050 -90
a
SDict begin 12 H.A end
 1050 -90 a 1050 -90 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 1050 -90 a 575 x Fo(Comparison)36
b(of)i(primary)f(glioblastoma)d(Single-cell)j(and)i(Tissue)1050
600 y(RNA-seq)g(co-expression)e(net)m(w)m(orks)g(-)i(Submission)e(to)h
(PLOS)1047 714 y(Journals)1050 914 y Fn(Brian)27 b(Arand)1509
884 y Fm(2)1545 914 y Fn(,)h(Ragh)n(u)f(Mac)n(hira)5
b(ju)26 b(Surname)2576 884 y Fm(1,)c(2)2687 914 y Fn(,)28
b(Kun)f(Huang)h(Surname)3507 884 y Fm(1,)21 b(2)1045
1113 y Fl(1)32 b(Departmen)m(t)g(of)g(Biomedical)e(Informatics,)i(The)g
(Ohio)f(State)h(Univ)m(ersit)m(y)-8 b(,)1050 1213 y(Colum)m(bus,)30
b(Ohio,)h(The)h(United)f(States)h(of)g(America)1048 1312
y(2)f(Departmen)m(t)i(of)e(Computer)h(Science)g(and)g(Engineering,)e
(The)i(Ohio)e(State)1050 1412 y(Univ)m(ersit)m(y)-8 b(,)32
b(Colum)m(bus,)f(Ohio,)f(The)i(United)g(States)g(of)f(America)1050
1611 y Fk(Y)p Fl(These)h(authors)g(con)m(tributed)g(equally)g(to)g
(this)f(w)m(ork.)1047 1711 y Fj(\205)p Fl(These)g(authors)i(also)e(con)
m(tributed)h(equally)g(to)g(this)f(w)m(ork.)1050 1810
y Fj(\244)p Fl(a)h(Insert)g(curren)m(t)i(address)d(of)h(first)g(author)
g(with)g(an)g(address)g(up)s(date)1046 1910 y Fj(\204)p
Fl(Deceased)1050 2010 y Fj(\231)p Fl(Mem)m(b)s(ership)e(list)h(can)i(b)
s(e)e(found)h(in)f(the)h(Ac)m(kno)m(wledgmen)m(ts)g(section.)1036
2109 y(*)f(Corresp)s(ondingAuthor@institute.edu)1050
2384 y
SDict begin H.S end
 1050 2384 a 1050 2384 a
SDict begin 18 H.A end
 1050 2384 a 1050 2384
a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 1050 2384 a Fi(Abstract)1050 2566 y Fn(Lorem)c(ipsum)h(dolor)e(sit)i
(amet,)f(consectetur)g(adipiscing)g(elit.)37 b(Curabitur)27
b(eget)h(p)r(orta)f(erat.)1050 2665 y(Morbi)g(consectetur)g(est)g(v)n
(el)h(gra)n(vida)d(pretium.)37 b(Susp)r(endisse)28 b(ut)g(dui)g(eu)g
(an)n(te)f(cursus)g(gra)n(vida)1050 2765 y(non)g(sed)h(sem.)37
b(Nullam)28 b(sapien)f(tellus,)h(commo)r(do)f(id)g(v)n(elit)h(id,)g
(eleifend)g(v)n(olutpat)f(quam.)1050 2864 y(Phasellus)f(mauris)h(v)n
(elit,)h(dapibus)f(finibus)i(elemen)n(tum)f(v)n(el,)f(pulvinar)g(non)g
(tellus.)37 b(Nunc)1050 2964 y(p)r(ellen)n(tesque)28
b(pretium)f(diam,)h(quis)g(maxim)n(us)f(dolor)f(faucibus)i(id.)37
b(Nunc)28 b(con)n(v)-5 b(allis)26 b(so)r(dales)1050 3064
y(an)n(te,)h(ut)h(ullamcorp)r(er)f(est)g(egestas)g(vitae.)36
b(Nam)28 b(sit)g(amet)f(enim)h(ultrices,)f(ultrices)h(elit)1050
3163 y(pulvinar,)f(v)n(olutpat)g(risus.)1050 3438 y
SDict begin H.S end
 1050
3438 a 1050 3438 a
SDict begin 18 H.A end
 1050 3438 a 1050 3438 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 1050 3438
a Fi(In)l(tro)t(duction)2554 b Fh(1)1047 3620 y Fn(The)28
b(isolation)e(of)i(individual)g(cells')f(transcriptome)f(profiles)h
(has)g(b)r(een)h(largely)e(a)i(theoretical)218 b Fh(2)1050
3719 y Fn(concept)27 b(to)h(bioinformaticians.)36 b(And)28
b(accordingly)-7 b(,)26 b(transcriptomic)g(inquiry)h(has)g(b)r(een)407
b Fh(3)1050 3819 y Fn(limited)28 b(to)g(those)f(questions)g(regarding)f
(tissues|)h(p)r(oten)n(tially)g(comp)r(osed)g(of)h(a)f(heterogeneous)
142 b Fh(4)1050 3919 y Fn(ho)r(dgep)r(o)r(dge)27 b(of)g(cellular)g(t)n
(yp)r(es,)h(subt)n(yp)r(es,)g(and)f(states.)36 b(But)28
b(with)g(the)g(adv)n(en)n(t)f(of)h(Single-Cell)160 b
Fh(5)1050 4018 y Fn(RNA)28 b(sequencing)f(\(RNASeq\))i(tec)n(hnology)-7
b(,)26 b(comes)h(the)h(p)r(oten)n(tial)g(for)f(refined)g(resolution)g
(in)234 b Fh(6)1050 4118 y Fn(transcriptomic)26 b(datasets.)36
b(And)29 b(exp)r(ectedly)-7 b(,)28 b(recen)n(t)f(publications)g
(suggest)f(a)i(p)r(eaking)416 b Fh(7)1050 4218 y Fn(in)n(terest)27
b(in)h(this)g(new)g(landscap)r(e)f(of)g(informatics.)36
b(It)28 b(has)f(b)r(een)h(sho)n(wn)f(that)h(man)n(y)562
b Fh(8)1050 4317 y Fn(bioinformatics)27 b(tec)n(hniques)g(that)h(w)n
(ere)f(dev)n(elop)r(ed)g(for)g(p)r(opulation-cell)g(tissue)g(samples)g
(can)230 b Fh(9)1050 4417 y Fn(b)r(e)28 b(effectiv)n(ely)g(applied)f
(to)h(single-cellular)e(datasets.)36 b(Ho)n(w)n(ev)n(er,)25
b(co-expression)h(net)n(w)n(ork)345 b Fh(10)1050 4516
y Fn(analysis)26 b(has)h(largely)f(b)r(een)i(an)g(unexplored)f(area)f
(of)h(analysis)f(in)i(regards)e(to)h(single-cell)375
b Fh(11)1050 4616 y Fn(RNASeq)28 b(data.)37 b(T)-7 b(o)27
b(fill)h(this)g(gap,)f(w)n(e)g(lev)n(erage)e(this)j(new)g(tec)n
(hnology)e(to)i(construct)f(and)335 b Fh(12)1050 4716
y Fn(analyze)26 b(gene)i(co-expression)d(net)n(w)n(orks)h(for)h
(primary)f(glioblastoma)g(single-cell)h(samples.)317
b Fh(13)1050 4815 y Fn(Glioblastoma)26 b(is)i(widely)f(kno)n(wn)g(to)h
(b)r(e)g(a)f(heterogeneous)f(cancer,)g(making)h(it)h(a)f(prime)403
b Fh(14)1050 4915 y Fn(candidate)27 b(for)g(single-cellular)f
(inquiries.)37 b(F)-7 b(or)27 b(instance,)g(w)n(e)g(h)n(yp)r(othesized)
g(that)h(the)469 b Fh(15)1050 5015 y Fn(a)n(v)n(eraging)25
b(of)i(single-cells')g(profiles)g(within)h(a)f(tissue)h(sample)f(ma)n
(y)g(mask)g(or)f(otherwise)407 b Fh(16)1050 5114 y Fn(confound)27
b(do)n(wnstream)g(gene)g(correlations)e(based)i(analysis.)36
b(Correlation)25 b(b)r(et)n(w)n(een)j(t)n(w)n(o)f(genes)126
b Fh(17)p -300 5493 4500 17 v -300 5610 a Fg(PLOS)4170
b Fn(1/)4159 5610 y
SDict begin H.S end
 4159 5610 a Fn(5)4200 5557 y
SDict begin H.R end
 4200
5557 a 4200 5610 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.5) cvn H.B /ANN pdfmark end
 4200 5610 a eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1042 -406 a
SDict begin H.S end
 1042 -406
a 1042 -406 a
SDict begin H.R end
 1042 -406 a 1042 -406 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 1042 -406 a -300
-203 a @beginspecial 0 @llx 0 @lly 216 @urx 35 @ury 1440
@rwi @setspecial
%%BeginDocument: PLOS-submission.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PLOS-Submission.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Richard Basset
%%CreationDate: 1/13/2015
%%BoundingBox: 0 0 216 35
%%HiResBoundingBox: 0 0 216 34.6541
%%CropBox: 0 0 216 34.6541
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-13T11:29:27-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-13T11:29:27-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-01-13T11:29:27-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J+btcm0Hytq+twWrX02&#xA;m2c91HZpUNK0MZcJUBiK08Dirzv8iPzqv/zB8t6vq+vWMGkR6TOsbXiOyWroycj8Up+Fo/2vi7jp&#xA;iqfzfnt+T0U7QP5t04upoSkvNK+zoGQ/OuKoz8sdB8paRod1/hbV5NZ03UL2e/N0959eVZLhuTIk&#xA;gLUA9zyJqWJJxV5J+V//ADlDrvnD81l8qXehw22lXr3Edi8fq/WoDBG8lbgsxRqiOh4ovE+OKve9&#xA;b17RNB059S1q+g06wjKq91cyLFGCxoo5MQKk9MVY0Pzr/KMmn+L9K/6Sov64qyjSda0bWLQXmkX9&#xA;vqNmxoLm0lSeMkducZZcVS3zH598leWp4YPMGt2Wlz3Cl4YrqdInZAaFgrGtK7VxVObW6tru2iur&#xA;WVJ7adFkgnjYOjo4qrKwqCCDUEYqq4qlPmDzd5V8uxLLr2r2elpJ/dm7njhL/wCoHILfRiqXaD+a&#xA;H5da/cra6P5k069u3/u7WO4j9Zt6fDGSHP0DFWT4qlPmPzd5X8s2gu/MGq2ul27VEb3UqxlyOoRS&#xA;eTn2UHFUm0P83vyw129Wx0rzNp9zeSGkVv6ypI5PZFfiXPsuKsvxVjfmnzVcaLrXlfT4oElTX9Qe&#xA;xmdiQY1W1muOS06msIG+KskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ8l/mx5G85WGqahoWo&#xA;etaaM5W/lkjeIIoUsJPjAqjKjEH2xV4pceXbv86dK1Tzj5n1e48s/lhprTvoemWqqhlhtuXq30/I&#xA;Fa1U0+E9wKUqyqSeTvyw1fStN078wtc8pWfm3y5Pb1i0IW8EWoWWnl2eG5+rQpFaXcrxMHkDKXO1&#xA;CN6KpJ5L03U9H81eePMX5S6q09j5eNpqcGlAl7a+0y7jaeW1kRvi9W3X4RUc6hhs4FVX09+Xf+Av&#xA;MGmW3n3y9pFna3euw+pcXsUESXJcsRNHLKqhmZZVIffcjFXmX/Oav/krNK/7blv/ANQd3ir5i/Ln&#xA;8m/O35hwX83luKCVNOaNLn15liNZQxXjXr9g4qq+UfNXnX8oPzBbkslpeafOINa0pmBjniB+ONwC&#xA;UaqmqOOmzDFWZ/8AOX9zDdfmlZ3UDcoZ9GtJYm8Vd5WU/ccVfUv5A/8AkmvKf/MCv/EmxVLf+cgv&#xA;zf8A+Vb+UEmsQknmHVWaDSo3HJU4gGWdh3EYYUHdiO1cVfG/lfyN+Zv5ta/d3Vkk2q3ZblqGrXkn&#xA;GKMtuA8r/wDCooJp0FMVTPz7/wA47/mf5H0o6zqVpDc6bDQ3F5YS+sIKmgMilUdRX9rjT3xV7L/z&#xA;it+e+r6rqK+Q/NF095O8bPoeoTHlKfSUs9vK53f4FLIx32IJPw0VeBfmL5o1nz/+Zd7d3d0K3l8b&#xA;TT1nfhDbwer6cKVOyIq0LmnWrHfFWX+bf+cUfzZ0FIZbO2g1+GYhS2mOzOhP86SrE1P8oVHjTFX2&#xA;L+Vmh+YdC/L3QtK8xXb3us2tqq3kshDMrElhDyFeXoqRHyrvxriqVfmT/wApf+XP/bcl/wC6bdYq&#xA;z/FWAeY/z3/K/wAvaxLo+o6vS+t39O6SGGaZYmHUO8aMtR0IUkg7HFaTq8/MfyhaT+XoXvvUPmli&#xA;uiSRI8iTU4ftKCF/vl+1TFUTc+dfL1t5vtPKM07Lrt7bG8t7cRuVMKlwWMgHAf3LbE4qwqL/AJyW&#xA;/J55AjaxJGD+29pc0Hz4xsfwxTTIPNP5u+QvLFjpd/qmo/6HrSPLps8Eck6SpGELMDGGp/er1xQq&#xA;+bvzT8leUrjT7fW74wzampezWOKSbkoIHImMNQEttXFUTF+YXlKTWda0g3oiu/L0Qn1Yyq0cUMRU&#xA;NyMjAIRQ9jiqQaJ+fn5V61rMOkWOsVvLlxFberBPFHI5NFVXkRQC3blSuK0ivN/50/lz5S1Q6VrO&#xA;qcNRUK0ttDFLM0YcVXmY1ZVJG9Ca03pitIu7/NXyLbaJpeuHUhNpes3C2mn3EMcjh5mr8DKF5IRx&#xA;NeQFO+KqXnL83/y+8nXqWGu6oIb91D/VIo5J5FU9GcRqwSvbkQT2xVEWX5oeR7/ypd+arHUludGs&#xA;FLXksaP6kVKVV4iokB3/AJd+2Krrr8zPJtt5Lj86PelvL0oQpdJG7mrv6VDGBzBD/CRTbFWK/mh5&#xA;U8v+U/yc87jytpkGlG9sppLsWkYTnzHByePYIzbdAMVSHzLFbN+RHkHyvZMIrPzTJoOjySRnf0Ll&#xA;UnuCCKV5xxPXxqcVeneTLvzfPHqcXmLSbbSYrS8kg0ZLWb1hLYoAIpGFPhJHy/1V7qvmzRPzDXyT&#xA;+bvnbzXa2UVx5V1XVptDksLXiLmW+t4meN7ePq4eYFXI2/eAntirNP8AnG3zRb+W/wAlde1nzCPq&#xA;Wm6Rq96SkSmQRx8YSUjROR/vpGUf5nFUN/zmBqlhq35MeX9U0+X17G+1e0uLWYArzilsrpkajAEV&#xA;B7jFXzn+WX51ecfy4t9Qg8vJaMmpNG9wbqJpSDCGC8eLpT7ZxVT8t+XvO35v/mG1S93qOpzibVdR&#xA;4Uit4js0j8QFVVRaIvfZRirNf+cvbWG0/NGytIBxht9Gs4ol8FR5VUfcMVfU35A/+Sa8p/8AMCv/&#xA;ABJsVfOn/ObU12fzA0OBv95E0kPDvt6j3Mok2/1UTFXun/OL1hpNr+SugyaeF5Xf1ie9kAAZ7j13&#xA;R+dO6hAg/wAkDFXqN1bW11azW11Gs1tOjRzxSAMjxuCrKwOxBBocVfnV+WhjtPzs8tppUjNbJ5gt&#xA;YreRTyLW7XaoTXuGiO58MVem/n9/zjZ5o03zDqHmbylZPqmhX8r3U1nbAvc2skh5SL6Q+J4uRJUo&#xA;DxGxG1Sqwj8vP+cg/wAzPIU0Vkl4+o6Tbt6cmjahydUVTQpE5/eQkb0APEHqpxV9wfl3580fz15S&#xA;svMmlckgugVlt3IMkMyHjJE9O6noe4oe+KpJ+ZP/ACl/5c/9tyX/ALpt1irP8VfMV5aXfq+dta8g&#xA;6/pt7oNzcTzeZPLOtw+i3qbvKo9YBmHItxIdN9q1GKVt95g0q/i/JHWorGLQ9MTULxZYFLC2hZbq&#xA;BXKvJ0RmRmFTt0rtirNNWura8/5yn8vNaSpcLbaFIlwYmDiNq3Ro/GvE0kXr4jxxV5X+X9l+YV3+&#xA;TGuxaTq+kWvl52u/rljfCly9IkMpR2VlWq04Hx7jriqI80WVh5t8l/lLpml28tulzb6xaQQytzf6&#xA;zCIkDcwEDBpk5bAeGKsS1bWL/wA4WNhrt0GEXlq30fQ46nZpGMrGT3J9Jq/7WKXq12+gL+Yv5wDz&#xA;BNJb6PLYW0N1cQo8rxiZYo1cIlWPF3B/XtihIri81nyrpXlKfWLnRfPHkgXEMeiIE9K/gR15BkRQ&#xA;sistNwxfeitvTFWS65p9zdfmR5r1P8u/Mtja6sFEPmbQtZh4RSekCj+nJMjh424VPGgH81CMVYnq&#xA;WvafrP5V+T5rPSoNINv5rS3ube05C3eZY+RliDlyAyuv7R3rirOPyrn8vQ/m9+Y48yPbx6+2oOdO&#xA;a+KCQ2XOX+5L/s+iY60/Zp2xVh9++lyar+cr+WPTPlY6bBva8fqxuax1KcPhpz9enHbFWJ+YJNc8&#xA;nfl1/ha853Og+b7HTdc0e4ptFckQy3MX9R7If2jil9V+Z9WF3r1v5Hu9Bvb3SfMFhdi+1eNV+qQp&#xA;x4NFKxNQXVvvK05VPFYvk7Xbzz9+Wt3ZeUNe1lRa+WNYtdX8rR39q8tpcQI7RCWO4iZZeEazlpIe&#xA;1DxIIoVXq/5oefvzh8t+X7a4l80aDFrGq+nHoelaDYS3dxePM1EeM3U0o4UI+PgR2AJO6rA9e8ie&#xA;TPLHkq08k6Varr/51eYTb/WJ7aQzzWMwuEuJHMgbjb+mF48hRmHxN8NcVfSf5afl/ZeTfy/07yo3&#xA;C6EMLDUHZapPNOS05KtWqlmIAP7NBiry3/nNNVX8qtJVQFVdctwqjYACzuthirz/AP5xE/L7yX5q&#xA;sfMk/mPR7fVJLKe0FqbheYQOspYAVpQ8RWuKvrDQ/LugaDZiy0TTbbTLQb+haQpChPiQgWp9zir4&#xA;w/5zJ/8AJuQ/9sq2/wCTs2Kpr5A/5y8/wj5N0ny3/hP67+i4BB9b/SHpepQk8vT+rScevTkcVTfz&#xA;zPN/zkN+XMvmjQNFksfMvlK4eKTTRKLg3NrMiuyxOEiLOvHkqlfECpYYq8v/ACg/PzzZ+WLT2ENu&#xA;mpaJPIZLjSrhmjKS04s8UgDGNjxAaqsNuld8VZb+ZH/OXnmjzToM+i6JpSeXoLxDFeXIuDc3DRts&#xA;yRv6cAjDDYniTToRiqN/5xK/KLUtT8zQ+e9Tt2h0XSuR0wyAj6zdMpTkgPVIQSeX81AK0aiqtrX/&#xA;ADl3570r8ytUK2kVx5YtriS1i0OeMQyhIWKep6wX1UlfjUhuSjpx74q82/PL80dD/MbzLbazpmhD&#xA;R5IoPSu5mZWmuXrVWk4BV+AfCp606mgACr6d/wCcQPL+raT+U5uL9Wji1e/lvrGJhQ+gY44Q++/x&#xA;mEke1COuKsw/Mn/lL/y5/wC25L/3TbrFWf4qwLzD+Rf5XeYNYk1fUtFVr6dudy8M00CysdyzpE6L&#xA;yPcgVPfFbTvWfy78laz5dg8uahpMEmjWvH6raoDEIStQDE0ZVkO5qQd++KobyX+VvkXyZLLP5e0t&#xA;bW6nT05rp3kmlKVrxDys/FagVC0BoK4qkI/5xx/JkEEeXenjeXx/XPim2Uyfl/5OebQ5v0ZHG/lo&#xA;udEWJpIktzLx50SNlRuXAfbB/XihLF/Jv8tl0y40xdGVbG6vF1GeET3I5XMYIR+Qk5AAMaKDx9sV&#xA;TNPIHlBNV1jVf0aj3uvxCDV3keSRJ4goXg0Ts0YHEU+FRirH9G/Ib8qtH1mLV7HRFF3A/qW4lmnm&#xA;jjcdGWOR2Wo6ioNO2K2ivNv5Mflx5r1M6prWkiXUGCiW5illgaQKKD1PSZA2wpUitO+K2jbj8rvI&#xA;U+jabor6RGumaROt1p9tFJLEI51rSQtG6s7bmvMmvfFVDzj+UX5fecLtb3XdKWa+VQv1uJ5IJWUd&#xA;A7RMnOnblWnbFUVZflp5GsfLF15Xs9Jjg0O9BF5bRvIGlrTd5uXrMdhuXrirtb/LTyRrnl7T/L2q&#xA;6WtzpOlLGmnwGSZWiWGP0kCyo6y/Y2NW371xVk2KvMv+ch9a8m6J+XkuoeavL6eZLT6xHBbWDt6R&#xA;E0oPxicBnhoqt8SCvbvirzf8svyE/J/z55X07zlYQ6xpIuvUUWAvg/omF2heNJTHzZPhNDUGh7Yq&#xA;yDzjpd/+TVpokX5S+RItVk1Od4dXuzFcXdwETgY0aVG9RfVLMQzHgvH7O+KvdELFFLDixAJWtaHw&#xA;rirHfPv5f+WPPeg/oTzFbtcWQmS4iMbtG8csYKh0Ze/F2X5E4qhfy7/K7yf+X1hdWXlu2eFL2QS3&#xA;Us0jSyOyjioLN2UE0A8cVZbirz/8wvyK/Lzz9qsGq+YLWY6hBD9XE9vM0RaMMWVXAqDxLGh98VYr&#xA;/wBChfk3/wAs19/0lt/TFXoP5e/lp5S8gaXPpvlu2eGG5l9e4klkaWR3oFFWbsAKADFUp87fkP8A&#xA;ld5yumvtY0ZF1GQ1kv7RmtpnPcyGMhZCfF1JxVIvL/8Aziv+TWj3SXTaXLqcsZqi6hO0sdQa7xL6&#xA;cb+FGUjFXrMEEFvCkEEaxQxKEjiQBVVVFAqqNgBirBfPn5G/lp54na71vSVXUmFDqVqxt7g0FBzZ&#xA;Phkp25q2Ksb8v/8AOKH5PaPqEd69lc6o8RDRw6hP6kIYGoJjRYlf5PUe2KvX4444o1jjUJGgCoig&#xA;BVUCgAA6AYqxPzr5e1XVPMXky9sow9vo+qSXd+xZVKRNZTwggEgt8cqigxVl2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KpP5u/wl/h+6/wAW/Uv0DQfW/wBJen9W6/Dy9X4a8qce9em+Kq3lz/Dv&#xA;6Ds/8OfVf0H6Y+ofUPT+renU/wB16XwUrXpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.805556</stDim:w>
            <stDim:h>17.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">rough-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:54570bd4-44fc-4daa-af13-191c026bfe24</stRef:instanceID>
            <stRef:documentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEE5A5CD5E72E311A5DAE32040218A44</stEvt:instanceID>
                  <stEvt:when>2014-01-02T13:33:25-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</stEvt:instanceID>
                  <stEvt:when>2015-01-13T11:29:27-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -34.654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 34.654 li
216 34.654 li
216 0 li
cp
clp
21.6844 2.60761 mo
22.4047 2.60761 22.9888 2.02407 22.9888 1.30352 cv
22.9888 .583607 22.4047 0 21.6844 0 cv
20.9648 0 20.3806 .583607 20.3806 1.30352 cv
20.3806 2.02407 20.9648 2.60761 21.6844 2.60761 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
33.4875 18.1845 mo
32.7669 18.1845 32.184 18.7681 32.184 19.4881 cv
32.184 20.2086 32.7669 20.7922 33.4875 20.7922 cv
34.2081 20.7922 34.791 20.2086 34.791 19.4881 cv
34.791 18.7681 34.2081 18.1845 33.4875 18.1845 cv
cp
f
25.355 29.5761 mo
24.4266 29.5761 23.6747 30.3283 23.6747 31.257 cv
23.6747 32.1858 24.4266 32.9383 25.355 32.9383 cv
26.2842 32.9383 27.037 32.1858 27.037 31.257 cv
27.037 30.3283 26.2842 29.5761 25.355 29.5761 cv
cp
f
15.1998 16.0573 mo
14.498 16.0573 13.9303 16.6255 13.9303 17.327 cv
13.9303 18.0282 14.498 18.5964 15.1998 18.5964 cv
15.9013 18.5964 16.4689 18.0282 16.4689 17.327 cv
16.4689 16.6255 15.9013 16.0573 15.1998 16.0573 cv
cp
f
3.1565 13.1063 mo
3.1565 12.2349 2.45011 11.5282 1.57809 11.5282 cv
.70677 11.5282 0 12.2349 0 13.1063 cv
0 13.9786 .70677 14.685 1.57809 14.685 cv
2.45011 14.685 3.1565 13.9786 3.1565 13.1063 cv
cp
f
3.91145 23.8113 mo
3.19154 23.8113 2.60768 24.395 2.60768 25.1149 cv
2.60768 25.8357 3.19154 26.419 3.91145 26.419 cv
4.632 26.419 5.21554 25.8357 5.21554 25.1149 cv
5.21554 24.395 4.632 23.8113 3.91145 23.8113 cv
cp
f
7.78818 6.86214 mo
8.90709 6.86214 9.81282 5.95609 9.81282 4.83782 cv
9.81282 3.71979 8.90709 2.81343 7.78818 2.81343 cv
6.67016 2.81343 5.76411 3.71979 5.76411 4.83782 cv
5.76411 5.95609 6.67016 6.86214 7.78818 6.86214 cv
cp
f
29.6443 2.67612 mo
28.2797 2.67612 27.1742 3.78213 27.1742 5.14648 cv
27.1742 6.51139 28.2797 7.61709 29.6443 7.61709 cv
31.0095 7.61709 32.1149 6.51139 32.1149 5.14648 cv
32.1149 3.78213 31.0095 2.67612 29.6443 2.67612 cv
cp
f
13.2783 30.4683 mo
12.1219 30.4683 11.1855 31.4045 11.1855 32.5606 cv
11.1855 33.7166 12.1219 34.654 13.2783 34.654 cv
14.4347 34.654 15.3712 33.7166 15.3712 32.5606 cv
15.3712 31.4045 14.4347 30.4683 13.2783 30.4683 cv
cp
f
18.3194 27.6162 mo
18.8034 27.2154 20.5164 25.6351 21.9182 22.3404 cv
23.3537 21.7262 24.4447 21.1135 25.2761 20.5363 cv
25.7488 22.2099 25.5369 23.362 25.2982 24.0092 cv
23.5878 26.032 21.1104 27.3846 18.3194 27.6162 cv
cp
8.91382 23.0564 mo
9.694 23.449 10.5398 23.7048 11.3998 23.8636 cv
11.5669 24.6206 11.8071 25.3925 12.1395 26.1616 cv
10.8501 25.3754 9.74835 24.3123 8.91382 23.0564 cv
cp
10.323 10.0407 mo
11.6741 9.16813 13.1957 9.18014 14.6654 9.6221 cv
13.6346 11.0175 12.5728 12.9749 11.8713 15.6458 cv
11.8713 15.6458 10.6909 18.8385 11.1931 22.6841 cv
8.32568 22.0502 7.68528 20.4494 7.68528 20.4494 cv
7.68528 20.4494 7.67855 20.4479 7.66842 20.4466 cv
7.36768 19.4825 7.20552 18.4576 7.20552 17.3955 cv
7.20552 14.513 8.40217 11.906 10.323 10.0407 cv
cp
23.3316 17.6354 mo
23.3316 17.6354 23.3955 17.3439 23.4741 16.8534 cv
24.097 17.7788 24.5476 18.6204 24.8652 19.3781 cv
24.093 19.9697 23.2475 20.4734 22.475 20.8779 cv
22.803 19.9159 23.0976 18.8388 23.3316 17.6354 cv
cp
19.969 7.47977 mo
19.7452 7.39593 li
19.8216 7.41316 19.8987 7.42945 19.9746 7.44907 cv
19.9709 7.46845 19.969 7.47977 19.969 7.47977 cv
19.969 7.47977 22.1258 8.60176 22.0856 13.2301 cv
21.8365 12.9739 21.6844 12.8323 21.6844 12.8323 cv
19.8468 10.9397 18.0433 9.81622 16.5386 9.14725 cv
17.487 8.19051 18.6241 7.53142 19.969 7.47977 cv
cp
15.404 8.70348 mo
14.2528 8.3143 13.3837 8.2068 12.9675 8.1773 cv
14.2086 7.56916 15.5889 7.20615 17.0475 7.14777 cv
16.6188 7.47549 16.0379 7.98199 15.404 8.70348 cv
cp
19.9003 22.0275 mo
16.5828 22.8949 14.1445 23.0552 12.3584 22.8709 cv
12.1788 21.502 12.1895 19.747 12.5578 17.4987 cv
12.5578 17.4987 13.5031 13.004 15.7729 10.0346 cv
18.7605 11.3574 21.2729 14.067 21.2729 14.067 cv
21.5256 14.3468 21.7593 14.6187 21.9845 14.8874 cv
21.8835 15.8435 21.7013 16.9127 21.4102 18.116 cv
21.4102 18.116 21.0477 19.9061 20.181 21.9228 cv
20.0044 21.991 19.9003 22.0275 19.9003 22.0275 cv
cp
17.2644 27.6494 mo
16.8356 27.6414 16.4139 27.6076 15.9993 27.5483 cv
17.2644 27.6494 li
cp
15.0916 27.3748 mo
14.8318 27.3127 14.5745 27.2418 14.322 27.1604 cv
13.8247 26.7528 13.0191 25.8419 12.5706 24.0227 cv
15.8991 24.3203 19.0765 23.4001 19.0765 23.4001 cv
19.2393 23.3473 19.3928 23.2935 19.5495 23.2404 cv
18.551 25.1084 17.1019 26.8827 15.0916 27.3748 cv
cp
27.7056 17.9791 mo
27.6291 19.3357 27.2873 20.6226 26.7326 21.7895 cv
26.657 21.0962 26.4985 20.415 26.2786 19.7565 cv
27.0818 19.0458 27.4943 18.4269 27.7056 17.9791 cv
cp
27.5625 15.6003 mo
27.4489 15.0972 li
27.5348 16.4081 26.8259 17.578 25.8124 18.5663 cv
25.2113 17.2364 24.4195 16.0425 23.6888 15.0923 cv
23.8461 13.2347 23.8322 10.7121 22.988 8.75782 cv
25.3517 10.2751 27.0541 12.7328 27.5625 15.6003 cv
cp
17.4643 5.49018 mo
10.8888 5.49018 5.55836 10.8199 5.55836 17.3955 cv
5.55836 23.9711 10.8888 29.3015 17.4643 29.3015 cv
24.0402 29.3015 29.3697 23.9711 29.3697 17.3955 cv
29.3697 10.8199 24.0402 5.49018 17.4643 5.49018 cv
cp
f
110.132 20.0839 mo
109.476 17.8999 107.385 16.464 105.444 15.5069 cv
104.722 15.1506 103.926 14.9347 103.221 14.5548 cv
102.655 14.2507 102.02 13.9737 101.488 13.6165 cv
100.768 13.1327 100.389 12.7669 100.493 11.8821 cv
100.627 10.7404 101.955 10.3604 102.921 10.6292 cv
103.579 10.8123 104.163 11.0294 104.785 11.3163 cv
105.32 11.5635 105.879 12.1382 106.422 12.3007 cv
107.076 12.4963 107.579 12.2666 108.124 11.9253 cv
108.627 11.6111 109.792 9.59291 109.766 9.00107 cv
109.736 8.32656 109.2 7.78818 108.652 7.45889 cv
107.653 6.85723 106.586 6.2718 105.461 5.9493 cv
103.245 5.31568 100.8 5.33047 98.6792 6.29054 cv
97.0625 7.02216 95.754 8.45162 95.1944 10.1356 cv
95.0218 10.6584 94.9444 11.257 94.8682 11.8013 cv
94.5402 14.1607 95.9954 16.4713 97.826 17.8304 cv
98.6706 18.4576 99.6099 18.9361 100.568 19.363 cv
101.504 19.7798 102.512 20.1067 103.344 20.7206 cv
103.949 21.1681 105.113 22.2996 104.365 23.2462 cv
104.105 23.5859 103.585 23.9862 103.223 24.0998 cv
101.317 24.6963 99.6406 23.0198 98.1178 22.2339 cv
96.9482 21.6295 96.2682 22.6617 95.7577 23.5543 cv
95.2134 24.5074 94.3916 25.6346 95.3977 26.6294 cv
95.7995 27.064 96.1994 27.3331 96.6613 27.5871 cv
98.1061 28.3798 99.643 29.0014 101.299 29.197 cv
102.727 29.3663 104.352 29.2545 105.709 28.7533 cv
106.887 28.3192 107.699 27.7631 108.607 26.9012 cv
109.527 26.0258 110.048 24.8182 110.417 23.6243 cv
110.731 22.6074 110.43 21.0806 110.132 20.0839 cv
cp
f
69.1452 23.7769 mo
61.863 23.7769 li
61.863 7.01693 li
61.863 6.37257 61.3408 5.84979 60.6958 5.84979 cv
57.5397 5.84979 li
56.8947 5.84979 56.3725 6.37257 56.3725 7.01693 cv
56.3725 27.7913 li
56.3725 28.4357 56.8947 28.9584 57.5397 28.9584 cv
69.1452 28.9502 li
69.789 28.9502 70.3117 28.4277 70.3117 27.783 cv
70.3117 24.9441 li
70.3117 24.2997 69.789 23.7769 69.1452 23.7769 cv
cp
f
46.0938 15.9547 mo
43.6096 15.9547 li
43.6096 11.2177 li
46.197 11.2196 li
47.8887 11.2196 48.9354 12.4705 48.9354 13.6297 cv
48.9354 14.912 47.6608 15.9547 46.0938 15.9547 cv
cp
46.1982 5.86734 mo
46.1982 5.86734 42.4916 5.84979 42.4425 5.84979 cv
39.2866 5.84979 li
38.6416 5.84979 38.1186 6.37257 38.1186 7.01693 cv
38.1186 27.7913 li
38.1186 28.4357 38.6416 28.9584 39.2866 28.9584 cv
42.4425 28.9584 li
43.0869 28.9584 43.6096 28.4357 43.6096 27.7913 cv
43.6096 21.3066 li
46.0938 21.3066 li
50.6124 21.3066 54.2883 17.863 54.2883 13.6297 cv
54.2883 9.34967 50.6579 5.86734 46.1982 5.86734 cv
cp
f
81.9155 10.9726 mo
78.3668 10.9726 75.4803 13.8594 75.4803 17.4078 cv
75.4803 20.9562 78.3668 23.8427 81.9155 23.8427 cv
85.463 23.8427 88.3501 20.9562 88.3501 17.4078 cv
88.3501 13.8594 85.463 10.9726 81.9155 10.9726 cv
cp
81.9155 29.1289 mo
75.4527 29.1289 70.1938 23.8707 70.1938 17.4078 cv
70.1938 10.9446 75.4527 5.68674 81.9155 5.68674 cv
88.3777 5.68674 93.636 10.9446 93.636 17.4078 cv
93.636 23.8707 88.3777 29.1289 81.9155 29.1289 cv
cp
f
119.955 31.7399 mo
118.848 31.7399 li
118.848 3.04441 li
119.955 3.04441 li
119.955 31.7399 li
cp
f
128.593 18.5605 mo
130.57 18.3682 li
130.689 19.032 130.93 19.5191 131.294 19.8302 cv
131.657 20.1416 132.148 20.2971 132.766 20.2971 cv
133.42 20.2971 133.914 20.1588 134.245 19.8818 cv
134.577 19.6051 134.743 19.281 134.743 18.9106 cv
134.743 18.6726 134.673 18.4702 134.534 18.3031 cv
134.394 18.136 134.15 17.9907 133.803 17.8673 cv
133.565 17.7847 133.022 17.6385 132.176 17.4278 cv
131.087 17.1578 130.323 16.8261 129.883 16.4326 cv
129.265 15.8789 128.956 15.2041 128.956 14.4077 cv
128.956 13.8953 129.102 13.4159 129.393 12.9696 cv
129.683 12.5237 130.102 12.1837 130.649 11.9502 cv
131.196 11.7171 131.855 11.6004 132.629 11.6004 cv
133.892 11.6004 134.843 11.8771 135.481 12.4309 cv
136.119 12.9847 136.454 13.7236 136.486 14.6478 cv
134.455 14.7372 li
134.368 14.22 134.181 13.8483 133.895 13.6217 cv
133.609 13.3953 133.18 13.282 132.608 13.282 cv
132.018 13.282 131.556 13.4033 131.222 13.6456 cv
131.006 13.8014 130.899 14.0096 130.899 14.2704 cv
130.899 14.5084 131 14.712 131.201 14.8813 cv
131.457 15.0966 132.079 15.3205 133.068 15.5539 cv
134.057 15.7873 134.788 16.0287 135.261 16.2781 cv
135.735 16.5275 136.105 16.8685 136.373 17.3009 cv
136.641 17.7334 136.774 18.2678 136.774 18.9036 cv
136.774 19.4804 136.615 20.0203 136.294 20.5234 cv
135.974 21.0271 135.521 21.4012 134.935 21.6457 cv
134.349 21.8905 133.619 22.0131 132.745 22.0131 cv
131.473 22.0131 130.496 21.7191 129.815 21.1309 cv
129.133 20.5431 128.726 19.6862 128.593 18.5605 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
138.47 11.7718 mo
140.502 11.7718 li
140.502 17.222 li
140.502 18.0869 140.527 18.6474 140.577 18.9036 cv
140.664 19.3154 140.872 19.6462 141.198 19.8956 cv
141.526 20.145 141.973 20.2697 142.541 20.2697 cv
143.117 20.2697 143.552 20.1518 143.845 19.9162 cv
144.138 19.6803 144.313 19.391 144.373 19.0479 cv
144.433 18.7045 144.463 18.1348 144.463 17.3387 cv
144.463 11.7718 li
146.494 11.7718 li
146.494 17.0573 li
146.494 18.2653 146.44 19.1189 146.33 19.6174 cv
146.22 20.1165 146.018 20.5372 145.722 20.8806 cv
145.427 21.2237 145.032 21.4971 144.538 21.7007 cv
144.044 21.9043 143.399 22.0063 142.602 22.0063 cv
141.641 22.0063 140.913 21.8951 140.416 21.6734 cv
139.92 21.4513 139.527 21.1632 139.239 20.8085 cv
138.951 20.4537 138.761 20.0821 138.669 19.6929 cv
138.537 19.1164 138.47 18.2653 138.47 17.1397 cv
138.47 11.7718 li
cp
f
150.674 17.4483 mo
150.674 20.1392 li
152.555 20.1392 li
153.287 20.1392 153.751 20.1186 153.948 20.0775 cv
154.25 20.0225 154.496 19.8886 154.686 19.6757 cv
154.876 19.4632 154.971 19.1782 154.971 18.8213 cv
154.971 18.5193 154.898 18.2632 154.751 18.0525 cv
154.605 17.8421 154.393 17.6888 154.117 17.5927 cv
153.84 17.4966 153.239 17.4483 152.314 17.4483 cv
150.674 17.4483 li
cp
150.674 13.4466 mo
150.674 15.7735 li
152.006 15.7735 li
152.797 15.7735 153.289 15.7621 153.482 15.7394 cv
153.829 15.6983 154.103 15.5782 154.302 15.3788 cv
154.501 15.1798 154.6 14.9181 154.6 14.5932 cv
154.6 14.282 154.515 14.0289 154.343 13.8345 cv
154.171 13.6401 153.917 13.5222 153.577 13.481 cv
153.376 13.4583 152.797 13.4466 151.841 13.4466 cv
150.674 13.4466 li
cp
148.642 11.7718 mo
152.665 11.7718 li
153.461 11.7718 154.055 11.8053 154.446 11.8713 cv
154.837 11.9379 155.187 12.0762 155.496 12.2865 cv
155.805 12.4972 156.062 12.7774 156.269 13.1275 cv
156.474 13.4776 156.577 13.8702 156.577 14.3048 cv
156.577 14.7762 156.45 15.2087 156.196 15.6021 cv
155.942 15.9956 155.598 16.2907 155.164 16.4876 cv
155.777 16.6661 156.248 16.9704 156.577 17.4004 cv
156.907 17.8307 157.071 18.3363 157.071 18.9174 cv
157.071 19.375 156.965 19.8201 156.752 20.2525 cv
156.54 20.685 156.249 21.0305 155.88 21.2888 cv
155.512 21.5474 155.058 21.7065 154.518 21.7661 cv
154.179 21.8027 153.362 21.8254 152.068 21.8346 cv
148.642 21.8346 li
148.642 11.7718 li
cp
f
158.76 21.8346 mo
158.76 11.7718 li
161.801 11.7718 li
163.627 18.636 li
165.432 11.7718 li
168.48 11.7718 li
168.48 21.8346 li
166.592 21.8346 li
166.592 13.9135 li
164.595 21.8346 li
162.639 21.8346 li
160.648 13.9135 li
160.648 21.8346 li
158.76 21.8346 li
cp
f
170.436 21.8346 mo
170.436 11.7718 li
172.468 11.7718 li
172.468 21.8346 li
170.436 21.8346 li
cp
f
173.889 18.5605 mo
175.865 18.3682 li
175.985 19.032 176.226 19.5191 176.59 19.8302 cv
176.953 20.1416 177.444 20.2971 178.062 20.2971 cv
178.716 20.2971 179.21 20.1588 179.541 19.8818 cv
179.873 19.6051 180.039 19.281 180.039 18.9106 cv
180.039 18.6726 179.969 18.4702 179.829 18.3031 cv
179.69 18.136 179.446 17.9907 179.098 17.8673 cv
178.861 17.7847 178.318 17.6385 177.472 17.4278 cv
176.383 17.1578 175.618 16.8261 175.179 16.4326 cv
174.561 15.8789 174.252 15.2041 174.252 14.4077 cv
174.252 13.8953 174.398 13.4159 174.688 12.9696 cv
174.979 12.5237 175.397 12.1837 175.945 11.9502 cv
176.491 11.7171 177.151 11.6004 177.924 11.6004 cv
179.187 11.6004 180.138 11.8771 180.777 12.4309 cv
181.415 12.9847 181.75 13.7236 181.782 14.6478 cv
179.751 14.7372 li
179.663 14.22 179.477 13.8483 179.191 13.6217 cv
178.905 13.3953 178.476 13.282 177.904 13.282 cv
177.314 13.282 176.851 13.4033 176.518 13.6456 cv
176.302 13.8014 176.195 14.0096 176.195 14.2704 cv
176.195 14.5084 176.295 14.712 176.497 14.8813 cv
176.753 15.0966 177.375 15.3205 178.364 15.5539 cv
179.353 15.7873 180.084 16.0287 180.557 16.2781 cv
181.031 16.5275 181.401 16.8685 181.669 17.3009 cv
181.937 17.7334 182.07 18.2678 182.07 18.9036 cv
182.07 19.4804 181.911 20.0203 181.59 20.5234 cv
181.27 21.0271 180.816 21.4012 180.231 21.6457 cv
179.645 21.8905 178.915 22.0131 178.041 22.0131 cv
176.769 22.0131 175.792 21.7191 175.11 21.1309 cv
174.429 20.5431 174.021 19.6862 173.889 18.5605 cv
cp
f
183.265 18.5605 mo
185.242 18.3682 li
185.361 19.032 185.602 19.5191 185.966 19.8302 cv
186.33 20.1416 186.82 20.2971 187.438 20.2971 cv
188.093 20.2971 188.586 20.1588 188.918 19.8818 cv
189.249 19.6051 189.415 19.281 189.415 18.9106 cv
189.415 18.6726 189.345 18.4702 189.206 18.3031 cv
189.066 18.136 188.822 17.9907 188.475 17.8673 cv
188.237 17.7847 187.695 17.6385 186.848 17.4278 cv
185.759 17.1578 184.995 16.8261 184.556 16.4326 cv
183.938 15.8789 183.629 15.2041 183.629 14.4077 cv
183.629 13.8953 183.774 13.4159 184.065 12.9696 cv
184.355 12.5237 184.774 12.1837 185.321 11.9502 cv
185.868 11.7171 186.527 11.6004 187.301 11.6004 cv
188.564 11.6004 189.515 11.8771 190.153 12.4309 cv
190.791 12.9847 191.127 13.7236 191.159 14.6478 cv
189.127 14.7372 li
189.04 14.22 188.853 13.8483 188.567 13.6217 cv
188.281 13.3953 187.852 13.282 187.281 13.282 cv
186.69 13.282 186.228 13.4033 185.894 13.6456 cv
185.679 13.8014 185.571 14.0096 185.571 14.2704 cv
185.571 14.5084 185.672 14.712 185.873 14.8813 cv
186.129 15.0966 186.752 15.3205 187.74 15.5539 cv
188.729 15.7873 189.46 16.0287 189.934 16.2781 cv
190.407 16.5275 190.778 16.8685 191.045 17.3009 cv
191.313 17.7334 191.447 18.2678 191.447 18.9036 cv
191.447 19.4804 191.287 20.0203 190.966 20.5234 cv
190.646 21.0271 190.193 21.4012 189.607 21.6457 cv
189.021 21.8905 188.292 22.0131 187.418 22.0131 cv
186.145 22.0131 185.169 21.7191 184.487 21.1309 cv
183.805 20.5431 183.398 19.6862 183.265 18.5605 cv
cp
f
193.094 21.8346 mo
193.094 11.7718 li
195.126 11.7718 li
195.126 21.8346 li
193.094 21.8346 li
cp
f
198.744 16.7963 mo
198.744 17.9358 199.007 18.7998 199.533 19.3876 cv
200.059 19.9755 200.727 20.2697 201.537 20.2697 cv
202.347 20.2697 203.012 19.9779 203.531 19.3944 cv
204.05 18.8111 204.31 17.9358 204.31 16.7689 cv
204.31 15.6156 204.057 14.7556 203.552 14.188 cv
203.046 13.6208 202.375 13.337 201.537 13.337 cv
200.7 13.337 200.024 13.6241 199.512 14.1982 cv
199 14.7725 198.744 15.6387 198.744 16.7963 cv
cp
196.65 16.8651 mo
196.65 15.8402 196.803 14.9799 197.11 14.2842 cv
197.339 13.7716 197.651 13.3118 198.046 12.9045 cv
198.443 12.4972 198.876 12.1953 199.347 11.9984 cv
199.974 11.7331 200.697 11.6004 201.516 11.6004 cv
202.999 11.6004 204.186 12.0602 205.076 12.9801 cv
205.966 13.8996 206.41 15.1789 206.41 16.8169 cv
206.41 18.4416 205.969 19.7126 205.086 20.63 cv
204.203 21.5474 203.022 22.0063 201.544 22.0063 cv
200.048 22.0063 198.858 21.5499 197.975 20.6368 cv
197.091 19.7239 196.65 18.4668 196.65 16.8651 cv
cp
f
208.017 21.8346 mo
208.017 11.7718 li
209.994 11.7718 li
214.112 18.4917 li
214.112 11.7718 li
216 11.7718 li
216 21.8346 li
213.961 21.8346 li
209.904 15.2726 li
209.904 21.8346 li
208.017 21.8346 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Richard Basset) ()
%%Title: (PLOS-Submission.eps)
%%CreationDate: 1/13/2015 11:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;B6uBoZKV6Lcf>$*2DuGA*)3:2)]MI+30;mFaUQJ^S.Fel?V-g<9ddf)mbY:VirN=h-'_)f<$gAXB@_jgGda&Of)LaK]`+#/
%kOTSh6,15P%,^u*Ip\_rW1C;XMhm$KYbd6`q>HtsO8U@AEeV/75C>2p*Z^QrC1!gh,AO^2Xqtl"(H#b')6=6"K*ccX0Qa84@f7rI
%Ahb.I_)pmZTL[9C'Y1*-K>#)g\-V`-a4ncWArH3F@6(.IW57p5U>LA^"LYcBhuI<_)>tWAQ'U@+3jmjt:'7:'b^K2]o8Iktr9Oao
%#d4L22].DT_`m^Dn9Ve+6\Oq/,$7$Ee7?#Bdt@U8^&#0XB^,2%3M>O8[*og:$r/J72akH.*l@)QgGGkjAhhq:/Bn7!!$E*ZraMM1
%VI7WHR5<o]":[PU+V9UJ:SC=4D'Df?qKk^1.r)"pRDCgS,fu3%:%.DSrrSGSq#(?3r+-u#%L\/3Y%E$H)!OqOH2V;;VAA)!!<fqM
%+HiFJ4MkI67:SSYW'0'qp#5sc&iG>f/7<qLK7>:/boRWlAOER<lPAck1E>ld$MhSi]Rd<'j7@U++^`US%3c5;0YeClnX)Jp?PY[*
%"T`Tk6?#i'@%Jn@Cbf3`\NYao"aW'B-9pQKKUG&<*3M!hDhS"Sm4K7RIS[)UrWC0`^0kbF\6eG3COS.dY*X)kG498OnAks@em^dN
%T*erP1B?F=@>BD_ke4.8$aUQNI.Pr?o.8[t/e6fJJR0EVV:EogjtBAR]H0t*nn^`4R"kn<e7u4\hZi`P?Yart^6Zdg5Zg+N_/*W3
%!*Z!nqpA@MQMpIh^t$8M$J%&A)XkK=b\t^,()cE9h\>[O/r3oP2q2LO?BY"`ZN9bj&#pCY\u*;!)B10D?gn5^!(mnlK-#ueFFin.
%)a+2-K>h:XTa.(OCh1W6LY^J,=K`Ngf4CQF<5P9$8+96D;m<1`<Fs.n`A(E%JJ980s3*S)_:\Olj=l.?s$'rN#a6@V!(SL-[VD<.
%^BS)ZQ=iQj$`X-OEk#H"G"Wl;r_"!-qUoOJec4=iWMLY\5[Mm'5Qp_Eqld1%N6pMDBInVNUL8R8M9>iS=E;n%&<Rf"TO7;k^T#1u
%K+WrSVi*VPK@PL<YX9;M\,jqs!_Ct*g:,U@6K\36Xi=bUottTA#ngpbgcttf:nJ4U']K4tAR,9RkQ/AOlRf#5LIPcQ,O,X]:AM^\
%'Rp-.S:DY\BRn@-p!B?];Vg:"!U-]Ha)7ro`HDM:B2NmP^sJ<65%pV=6hh',4'qQ/BY4q1!W2'VrJrYYTZt"HB0cP[`r3PRs(d>&
%)5<ccT7BcDLW08IC2gotQB]2dg=0cNWhoJ[KV8JI#UZ%]clTu0C>b/MFj7SM:;[l1gp_dk[jU\0(]<t[5R>8ciU`NmN,QL!!#FN1
%K<?nD+Em@C_$t\t5G2Ec;IG.*VG;9<!!XL`%&5l5hf#K4J1/eD01\+&dnh'9IksE0Gat[+;AfHL:!E-hR3lS;KSNqV1-,GfqENd(
%!1<C[,n+Uf3KGIFfE7/Dn%#tN+Q'u<ZOnJ/JGt?&U&@l<"l>'Pj-[[Rn)\!^)E<:]VJ!faSc\&N"#Wj&o\b35ba#D?m7(%4i6p,4
%D<3Xb97U">A,'^:&!YB'Z/oE%lg90#'a&6X%M5]gihh29('hQ*I'?O_\,m&-D9$g3-iWs,7;ug9Ggo<YK)iO&CddN^JE-Z^\HhcJ
%!,\GchVidq?SBUPc^o-9Fj9mT96uEaa%,G(7JoH(]1*7Z7f71Qm/8"]-;Vtne;DhEr\YY`Vn0me[f"GgRkNu_GQZYu2Pk#Ll!E!:
%\>K9<"6?5K=p+[mf@^'_;;D.j3E]]2kRiLm^A::\+77V)^](]uDPX`@*mhP!I(fLYS5dBDg2c]HTbJV`S_Ch&Rckk1hY]T)VH?mb
%Pu?4&"'quuF)%dlOBg97D8mQ_]\-]&ptoT-+e^SNm""d%#K=Q0`$eCpIF5h&NtSo"O3s_P7s>%P-@r<Q&2aD)C6Vp]TL8`nrV=b^
%d$!)n`aHfhd$_toS[f]Gd1T_X!,IRC$3f&l^t=Y*LY:1QBELEMm4$cb2ql#%$jV^,C;cnFI%eQd_pT[omD?qOF#=m;Hs@`n5`^JW
%jIgoq"3JHadaX<2)_fP%#nWW#S1[5=0@XlSW1dPArX4G#0Q`h99o*,T*;5l>?L&n()":E&b(J7*!-dq4lO=8uF"]4R1jC7$O_CuQ
%cO>HFCp4QiMf4F#EdcRni"kZs:TrroL^A>)hD!iR#i%ojXp=UO0S6q(#-VG`9JYH.O+Ece_[HrjYbs`Z$<]Wan</ZF+7E]V#%LEU
%LH%"NhTT5&4CD8]UY9S9HYL+R?oM_Jo<[@?pM#39dNq9WY[@!cU+rD<$J6PQ?A8cmP9Fc^0l.%55gnJ)GutKZ=nQ6ggs^o+DDM9N
%D"J5<1`M)04CX?qa^ocF2iE%Jh]*McJUfDH4G=gYc'q_%9d_d:$O+ep(i*fjOjF?XVKa38a911a>:8+?lL2Ql/g;Z$O(_PBIoD(+
%+;3C_*"6J<g&<(E[L=6i()/W\&Z!uC`8q7FbaD&Oe0'aZi\_M'L-rNNS"_hq^9"^^7uQ%)$lQ)$Ifnt0!#+aa<fY*.W)JW6?k8%o
%qFT)2g^ZK5[i+tLjn3;kJ:^PG)K4#Rg'se="KX!7,$Y6td-'X+GuuW-BkUB9%Wi@Hjear[P8;>NJCuNf)N9L5s1K4Z^.Mlp-).j-
%)9\\o+$O<sO[Fm"@0>\&B6^&oJ6]*n;^+RPMm-jUE=qDa-prmh%.g7(cOm>sI^Cm!&PNrTqbSCJ7ol400PZN$d9(>V0j$QsLs&9k
%r*I7u$\r"R^Rt#m0^@7o"dI)n=oZ+iiEkMj8f[L,]`8_-n/'#K5dM[&"IO:L3)#!XnsG>[BFD3@\pWIm-R_F,[XQ6uI5-P'[&1mn
%=GG'0maq,<r*6%T4^J4%iWXW^Sj<ZG=H-J>XK%8J[nu3!9S%_4+dm<AQ5Gt/OK[528&i3="5Cr?hh16deQS%iL=ln?OnB3$OK06g
%Qpl\,U1ORcN=DgLTp:ap<ed:*nO83UAt_c=Z6HCt&nsjQ/$'emMl[LWWEDSbGIXc2g+Z.Tbp5:e1*Rsj,ACAEMJ$d80sdmP>-PCM
%\JU\pl,>L1-CD<6!l^Nr3_@=XPgW6@iH";P(*$NPms=19cM#E^Pg#;u-e!H!=jC;?.&,9W5H_na!ilGq/?TMr/U?t(b&`8T0cNMY
%\YkBTe6\A6+Rpn"&AVs^:l$%"'-T0+h1"<$1E[8a.8FS\e.KLjfG?4`9$^/"nIdrjXRu7&1Y*).#lk:8aA"]l_e_EBW<S@7%WHIs
%euIMAJVNsF;(/0k9XFi\$+U>V;TfqOQ#nU._83N["NiRWY;r9rM"kE(ZYF7olUN?Sc\-[U0`qLV"7(2J)#e$ddD.N3e`R'e=c$\;
%0rgA#KZ^Db'N>);(=%rgDE!ih4(8<A%/ERHNM$t';nL^n-0KDB>G>[bA2f6B@A9(RT@lQr"NWJ@lki<kDm@+0`"R2Sp''i8CK7.O
%BY=I`Y_O:(g43R0hEVpp;?aJJo[pRKTp[]u0i4YtIt5P-Y3GuG<e*LmA<)J=afkq84E7@,,27n]Q?ihUAinr-:cpSZL4<utF>qo)
%7fTEC/Z-p/[8UXOctEqp:Yl@R*[R2X`F,Hn*,J!M!?f'FXe7nV.\:(T*R)CKa2t8C,L<WkU?<i,#55C:Ye")rJ>,43\c<X&&i$4l
%+_W_OdHccmRgkIoZdmB*Wu[0Gb%]jhnVlFWhPj5KfEB%_OH.n=HsBj7ED<7HGf"d$UUAG^*KBT\aK;P9e_W/iBZNQ<d>%X'Y>g3!
%CpuJ7q,Q^DS#m\JmbcM\bt-LglP1>NC6QAQXf0>AM\[bKJdr`Y:MB5/C^@Dr8d!ea"5s^a!Qn&!cu:oaN%(2nUD@Z7m9u)k"o9Un
%6Pc8h=\):,r-RH:8*s1JjI4K:IR-5ml/\eB6:4d^@^/hA\J6#<TlH'h5R"/tKb=-3f_8<X\_`:p,S"Ro;k&6c@XMQf#];0LL*"f*
%D(C"@`%;NndoCT0hPhZ;:Bu5SKRR(hn!31)eaU%L_]N%`)[X!LjGYnA#Wae/85>jK>Z>jQr(#:l&R)@3;i4UiMMNG,N;E71,ZNAL
%kRa2T_eQ!UKU>5F>_-6O)X8$M1g$mT9op26oS2=t1tU0+"`cI&D5tVD@_kLsF`nA2b.RlCq2(D3%:/26?E4eM,W*30eu5rB^#-Ht
%C]j%\eQeji2a5dRK,VV,%W!D"RQmp0Y[Rd63$+@l#SFf9m,-<e9$olQ8BUbi_/>lWM,qbjUHm6-H$qQ3fp8WKrha"P)a2q,W3g*\
%66U@(%!:3"fg)^m)6f)7Y)k#$Z>hL1\uhBDdMO/<!maT`bW&?jf<_;O309mXX.ZBiAEDe!*e/Yr`s-D$POG4)bbXI>EZ1LMN)-7s
%@52D-"4tg4C_lWY]4e3I8A+_]dINY",t/nF+YrM7$/^+-r]>_ajaM7a#@U6D\h72:mb$l(]4\;dTLm,F7[e,c[*MF'DrjsR:XueX
%a2BChEg\:F\B<hA5T%Y+pX.>X@A!GqcM0VoNq@?th>u?uVtNOJmQfq4VYA='_YanjjF2o_Te&$!..S$d]mY@+)d-68)(XPrqONMi
%amW2Nk??S\Nr&om.?&`V)FQ6ahl@`;5Mtq'bTaH.7t3;CI<HP*n;&L@J&mU3j_ZK=1qths5c8hZm\IH!T,tGOd^Wi335`M.FPV5O
%@QMmXN"5n_jO[i_j[Xk\96TUh`T$-/hh+)`lKHu$=`]eN;?pF#olN-PNCJO\r%tbCJ'([o[>/]36M/LOO3Y=4j36LHBm.quY=#m+
%J(VU==AuK&W=PX.``h9!oP.oCg)j[2ma1OjE>AnlG<`eu4XtaDo;IEL3QaMP>(CW:1DP61&``(+lQ1RJp:NLkS.7$T#Z[58(cpdU
%<43LUHd=bt!E_jU.t%Wj&u"['CQGsET2G(HmMiu:XR<od&jb7mS<hLZHgkkU8X7B@X[+>XTWN4%n9j-,jP5C_")5,lck&n_53O1=
%W!P^V$u\dfoYmCEj6W]=HiBFIT695l$oDnC>65f"-L?RWhVl^*-]]gOpW%Mpr;52:ZcVqY^oLuI*#d0Ro>Gk3>Ng[ZnlUOH-pRP[
%@*I\XLtk"*Qh1MIK"n(&,PQ!"rOAK/q8'j_aomLE[n-2+h+UnUR;2/f522sChbdMSSagnB4bfUO_=:%0kHVKOrcYk>k'l37g"C;j
%*W'!r:WVm`bl_XHk_DL4nQJ0pY&BZQkt9Y&9]iG:B8/GeXdLI8=^]!a^"JUO_3Ps:+rDAs@ZC>'](*-l*"Pe2>`9<NA@-%q#HA87
%:aHL-MXhkLqh_d(:Z_rR/*0-G&F[Z]*8hEu_k("$]$gBe',R9GDDE(&8PXI76mjr4S5`;G6FupP6$s?TDdn.Co(23?'Cj(tf4sTj
%R@]3`&j4Yf'PVjF=L6IaD4\5'?)59>?la@?8D)G`A&tStYe$,2?uU>@lsuRBKjpfh/KO]W^.[X_>$SF&^i'U+VdgR+S!M-cHHlRK
%l,Lp!%YRP#P09(OF1M:EVHCGs-hIKV:Yn`h$iZK&p=WM=CNU46F+Fk*4]1F\Z7B?s?sKHK17nr-1-oQLKk-7f;f"H*ess@eZ"8CY
%j(2i-C9>sEC"ibu4PP,]S%N80l6ROBU!IiJB5.XSI6V7op@=F_S^uSW\JPJJ>u)?#QuBBjS4!T!T"c4.1,X>n6[@S8%K4cMFRssg
%'=W<Zf,C9>nF+438((,Y$P8<E@/WL31NU`O7`GfW$RY.'C:4.<(8+kcdHr*3LV2_gq^uP'a]$:-Q@3EJ3_7e^)MJ"]=D@L3jS.jj
%ORX;+TBU\%.Eao7V#.-91$\m8qCNg#aq#B9a.\j&*u]Ue.;B9&)Ydm3U.<T9B$0UslL)TSQ0]t7H61iR:]&HPnSD@j_4P_%GkR*F
%bbqAa@g%0o-bsYQ'`OS7P!O"O1jIIMqrY4rP3(Qu"eVlY.e=;M3er7e`'E(=TO"i-55jW2->_]OMh^[CCkVsXBU1Y-%'9@()c-'F
%NpR>*-eLK`"`sg>@7H,>_JWL4FlkUu)B'DY"(.BmM=7ecCH9[<#Jah=o9mO'J(du`TN*cSrd:S_C*NSADMfZLr!akP6dcM:.gMo?
%(5N@GLhBA0ISZLCa\2tR]Z("C0@3_-rF^^,Q&$VX45h^-1l-Q&lJkVfNCM7$TJ8-m30<K*d9"C.BPnO:6\RH_N+IBA!l#`($U$ag
%jQOPk(D2:p#W?GM=I-+G6*O4m1_b`m*B8;#7EE@XG6_?Sb^_nk,-2=sK=.7Xer;@pii-M1#=1-4!AWZ$%(e:RCN(<PXGUuqZ?$*e
%S4[ZnVEn1"1P<S)NLtXX-"];8Z=bm:RML(^%+3FjL=iWE$MOi9#nDV+X8,D)'AClof(4bmRAgD["+InmreR@O5^Q8KAH/J>-&jf!
%<,2UoN.s>#^hElD9Q$GJ^M?TMZYhF]+3h8*N,HOLN530-m-`f?M#A@)44%1FHT\7-\V\e(A8K+tand;34cqrugne1d9-cS^e37p!
%ceAjlUeHhAf2fFSWnsS-d(!AWQ6%b!4)upIYJd.OGP9.doVq`=q?\.leg<V%1u+Ll_s>6G92B.Za\fKo;)#PB!VLPj#de$BZ`e<O
%oBpS@!r/tG!KJ_PoabQ@*<BjN_/%?(qka"OL)kmN'X6[$+."r?3]n3h5[ETdkjVh:F-($6-QF,d=Go<&mTf6h_@%/cAETY35A/6<
%p/;/u\,rW4;#fi$&*.YM*`qk^pRDPY!=%jDo9T6[A_ujipW-;\SdM'N%&n2I"`]#9q!?.gIR=3gEmX?,`+,\f]deb?MfL%JBg)X-
%#Kr@j;5#@04pOI'6ni<7f0LRd#YmRGDZJ,im_NmEWCj<I^Sek.H],f2`s@'5ljK<;@3f<Cq-V*[b6gF,grp+p6Fsm%ftm!<X_1U+
%<kPE/0uCN.%3#K72>:kh#J;/M]Bo15(^3(jof*`^G(B\+TG5Jk?gPR*WW)\gKbB)g6T6gq4rT+[4O4\gnT$q2WHo2&d_Q>0c[WKM
%-m>nnD7_%aWrlUuhYYALbj^t:jSfRC7cgPl>;]FR>!'o/[]>2/IJW?=hL[@?pYc#%a-(`H5_S9T@?i6Z>`6J%6I?Fqh"$\;^G]hW
%L?D5c7FT__5PjrB6l9B$1=h3j@$^SEA4md/asL'2p^\7Zj(Rk>U3ZP#VB`?Y-i]juhn!E6``pVJ;Y9?TOgJ73INZ5YJHOsMYCO3a
%O^udQSAMQ-;Xn1>Q$Rqd5=DFCq@%&Ta=h"H9NE6h3f;5<'5d'AS9E+8`dEAPb-,=f1k!R")b`I=Q&&m-=tA8R`$s6'1"I#JN.JIJ
%rlNH/ZQKT>3'VskOl'as+E^'S0Xu$jTZjrXm.1pscO85Jl3SD:TbO_SWr)F0a"q>io'uNuS/X++%ZU]E\%nP1'"MiKN_rQs[5$WL
%!X;?*mJSaNV>:]:9<)IOSQWI;*WWR]6FI.b_r,oZL;3>nmenNsrkt2XB"AaaKhZj\"#;iL\d-00Pb8MTjG3/aRFnf2o(s*2poFfU
%:S7_'H@OVt`VQ*=)N+F_<5)QSp41*pK<j[\RNL4>YI*1"Glsf14j;O`/:QJ^.\:H?j@[VKB-tu?]@(W+l6KYNf\p8-L&8`2-o:UV
%C#"5I'[3=6=8FK&TES4\9n9=*fB'RcDEO<OAFJr[PPYA+b:LLW8++K.[31Z'O93M9R,$!gB1-WI5Gn9V#-/iEe_2Wo[fq8#I0\qN
%e&ui3/^o0pUFq15Sf!+W1'sMg9VC?bMOp5q7-V#hB4:9Z(WCN(IXcg@1\9?/Yk8uM1=mu/j9?uH(U*uuZ1%AKQWgGU/bD)]<?t:J
%<7a0$EOY/t,W<h-efPqU-3Ki]4[=H4Q@#)=[eo0?bn2Vbm=9)"R53o!1>"3i?aHl1KL+8(&)-db9^6I(b]ITXR>iaG_?D@c%M(on
%q^4/jhuX;Z3>d,h\&ET0;%<j91-:WS4(I]VhHso.\#'/`Dgs(H8sInIN.g<tnm5ljg-f7rgn&U6RX\)O1)o""BDWIRUhFE%!$u_:
%*Vphlk'eM&GQ*6K5=e<`q5)=F?jh'<l1MDmK1$BZ$u\S.Y?sWj6+<"'N)^LO6(]-`7-<`],9;ZkO?M:?rOhNjP%LKogY_!2R8&0,
%aD>Th/".MBV0'X=:Wk[ggO<)'7VP--F*juM5VCsMVP<P/,Sf1_4VZ&'6'M%HD.pW`03+ora3*%a@OUc`ialh"KF1/HDmgam%R4/]
%+>raP(ug#I4S&B2CAft!)"9r_l&]u:`m.QUollF!mbgkcGY>3Fm+)W\DRX=5gks0(JNacBJU-4G;VaN,DT\#=Uf]Y<MV[)@k89BX
%\CG]Y"<?+JAsS]Mi0\68DLjj<IinhCk-4o[kJ%6[>f3-0C!aX;,^u'3;Cq4Lqh9CFpme)I])1:/RWcgBD$9(MM%sn<[E7c2dO-Rj
%cG+oG6O8Eb):OL#[=;hB2_^ld$Aj*:fH$(s'=f-k5'B'D(hkFYhk:/K"f4XL8&`*eOZ:ts+-GG-o%>SFE.Et^"(S>"S$$uk52_DJ
%kG`]8F,)D@c8l$!`bp`s`6Rlb9Jl_DFMR_M#"=8:"q>=$]%SID%9Y!"99rZT;.'Q(4'bl)HC<6Uq?mVlTi4[hdm"TO1k>GK@3la+
%?rR`%k_n7%FDKpQW,'M4\=]<2V$4ZTm>3u.cAbhmn0Z79^fl.15O-UH>cP<eEfD)TB]oU;DCTa+$aflRR2kq@ViN3a5X5d,B,72*
%$$dHUL1h.d9S@3e-ou*?k>.W1a,7ne?A_c-ZWM&?&jIJu1ea/Fo0X^>`pJ*gA<;(u?486lVf;r#H\cc\?/F`aQ0jqpT]QKngEM&u
%cogAZ\&!"@knn+i+0H?T(<Epd.jK7!p9T-k!8dZm:b\#BXF_62^[j'7i=M!+Tb2XtgFHktTOHHOeh6Iof&O(CTI*rbVu[eXqg0g,
%+K`/)/qm>-?@ZuHDmQYC8098tHXc^]&HjBoST%PhQ8`RaH8)Pjfj-G[g:CN>ZF=cXJ\V[H;PEe0T+2Z\Hao4+,V;g;<n>`)mUB/f
%@0oD/Zf7nsgEeU.Ob?Ji.'_tuUr1*p"OdoQr-l9fMSKL&'="/378!gSg6QeiDt&+tLiZsgA*]!$JMCIYaj^GIHi;;.CU8!lH,bXQ
%cqATa4S8%F7S<S)?$E*[ge;N7&K8T_q9e00QOZ)_\'S(_8sg%NV\PKecc>'RX81QYLQ^>"G5=55KeD"p.fSSrk+84*\,<tHoJL<[
%Ob8F:.e_[$(2<!W:3[f6&J4d\F.e8;2X/p>n1G?qK6D!BD;XKIT6u1dmkPhBl,k:Q<'N^/hI-T*G4iK6@r;nbhSpRkY?<Qa[H2t/
%AD<8eEl9^Z0<9=P`JGsCVX7KXU\\AJ9SIA*-lE'Xj?"<\O4SAbWc(R:V[sH"NlRnae2sm71CL+Y;.tHd=(#q>)'T""1jSHu%qP_;
%0SLAaB&l'7=,r"W9a3f?"?O5ZR?8T#o,Z&(dun#H-TbY[M*Q6t9;E<-]F>J.(9hSd#=-2P4V2UO#N7,TC%(:U1XluW(R_1Mb@'h_
%G>X_@;S)l<FOl3!V2>!5"q.4NH=b=j7a<o5O5c2FF!_oNPT[Vo)&s)h[Ci'+7"&s)=OSo6Coki/?$S'>IFh$q;SjsLe(ZJ$("?l4
%n@nmU0!7;9HV`cKlWLsVSi2/dEHYmHpOg`5k:\?%b2em5E72=YXn/<\23<*g>%aO/l-55.G%hfj%G1_8U`"-Zkp,Z`KI7Z;]?c>=
%^oZjhU`6k8/\$3M,ThRBD#rKpg`o;06a8ekFYf!%+*6>Gc5joB4<W_a"!+aJK&M(":/bY8Y-c9a9?[CQqt>/&>+RP>_Mr[1_m.3P
%+GufsGo8>h5&)3)Cub\MQkZ7nJAsusN$@(_0]aO2_Cruop(:eSHmY:(oR@nG<ROtqqj).R>SLPU-fY^\FH?U]lc)P^@P&F62htct
%'Zo'hJDjV@nO1.m0spt^!5fTok7:&N^3+!="X6*Vrl#oZX3^26CT4S^NtOk]WqikR7@O$J;e5G/4_`9P,)kcu]'74V["l?mmt?d*
%.*es<Teg"sATCs<98gai'e$.t_Z^d6Z8pu"kHUI#Hi1,T\f3TZ)jOZ%3+COI^)sGr"'Vh"K7cc+G5HJu#cl^jbf.Sdg;+.D.)UL+
%);'g5_iDD=_sjiY[5.(QJ&Cde<X,'h0O*3afYO26oLJ='&=9*$6Qj3P0sH/Y#K(-S?<XN@e9D1i+Ogh0a^DQ/e_(c`LB/OX?X3]D
%)"q_N@RM)GW0DX:=:G1[#EK9OS&K3^S/nqg-ZF_+Pu]nEqBg`$YcRoi&"n.4*s)=VB/m!Tn9f&=qWr:1#G=TZCnm+kc]Pt39jV3f
%L\dg@VHL@[+\f!P8dVU9CHA4f1F$A2RRT.@f3!>+KL.='0cDmA5G'($#*i<u1Y#H7d+47Kba'sK*a2$2^oZ/rGc=A.]m>NNg7W(O
%]i2tBUOoaiT&K;-@)Et`18@gl5>F2`8\Qm3lcRCs[2r',oodGuSn:_J4$LSKAP/@hRG`WFk_:Ip8>*JnY/)mRML)pAKeWk7.:>Yi
%XJCVe^=Xg3okmeYqg"d8FI$*OrF\o>s$rj,>RBBD@=TAKU\8;N*rI7A''lL5oOo7?UrML2<"r#XBh^D8pG>i"os@K.dRd&c'sd/U
%(_s$9`df@I5;Uiq!hMFao3b?OVMF8P24,t=3bBIs<.=C<(H#.`%i9!`4-i^P3!\bkE3.S)(C8B.#\*ri=7sb&@,[#AAO4DhD^d68
%UW%U!j64hk?A>Cll'GEq+OU6FdJ?p%3#K)>@#''-<#"?7%nqT=oI8$r/%bZ-M()c<8$k\)>H9!&=1[@5+D3:&F'_$Ca_/l586%.(
%5jCS(:RtgRfFi3Rbc1=+HYU3NX^Mg2H;lb5r@io#=g.NVpo=<'WZ4R,Xr,.%G9dCj]%"=(HrM=$X5[OGk0ZfP;K.M^;5l<VC-K=h
%NkmceJl!Xk^iQC,8uHjq%(#S^?4R9fk(5m(:rkH-T#3,0d)m57fOUP]@PRlp35(sk6\-fWNCnkE]iE-2El*l2d2Vkgc'Q<CKr4'O
%),+mV:uKb55N+oE1R"2!d:==SpL?g2o=uSq[cB55Y@QLi:4=IBYi*S"EX3X$1_DJR=+G&h($lU*!"+]t]ApG2#6dou',+.)+EVDH
%iI@?5d6URpl\scS$^bEZ!=%o=,0>6nE2&bYF<D=/LGs]+%`!RW0+>38!r\3Dfc%F.\,F9`:JUXJprVi_^I<SKK/`cCH4]Zo)uE=s
%-W6<JmqRmc\@%^^T6fmc[G]PJobAR.::D,'()ZFqH/*(]rJ2:2di!D]s)AqDLM5N-G\Q?":?'5c\0!dJKKikg>2T6>n*UAO/iWMP
%/,b,S'D@-4+2R%D9!glm.H)^Qlqt!CL8GWF_mEqFqNQ;dlk88dr7sfE5Q%WGrUiJ;50-KOHqZbb4LT?F7CXjIe"5cNH\nY8/P?fT
%!OoOV/64kCo<b@H'7`PBB4s>?4Cn:ALR3*;33#@g<\mr'Y^]5q::0:8pRWM&hj)tXd]Ya]i8(:W0n/?IGcWU.J=VY>Nh<"[B"`P&
%5-^;KhU/\p2^@,FGt?Wl:'(;Nq"21Gjm^*X-l=%ZJ[jLIE5?nboS3h_'G`6C!H)`*VSB7D(W,RC1XdNV%_QWXnDAPe2Xm/J"oDN?
%Y^SN`3=/^j%?!48k*sgl=SqabG2H97RN2TJ"/f39lRr)F04S!#DUBQ::XA.-`burBB%)&NLQt'q>pdbA<;R<4!]0sfJg?M!"g#O%
%;`OIaOiQbUHkBm6o-QQM>B0fVb.Oq%?>=Mu,mnk^Z6E?@;q_2F7,]Kk2=`psXB(#I#*fE$7)"*Dh$<Xcn>:\`1pp1ZK#LnNRjAL)
%DhJH*KGCSl@:"m--CiQBX^Oph/A`=m"e+J.>8D#+fm$N8)KPl-blUqQDQp)t>3T>B^6?T@%<_X:C"XYbF_=Hk4:50mE+@R9c;4]?
%iVGVVJrC8EZ<2%e8]Xk8H7O#<$1dt_'X5Hb&PqfmI.`Y&_E&eHNdaVBCOo$G.8-TaLDA+Zrm$X:&U0`\al5n+qB*HhXSK%[.Dkon
%-d!U1#@b(]@4bAmDTRX+9Tosqr:r'D^`'inc,X?r$#>QGZ$f.'YQ?YngX8!KqP@P7#dG(Z4_FC:@XY-=5!f;9Vj"(RXLAHc-_^(h
%4r:3McO['F(2M++RODXI:Z)"93NPcRq*,6TlZj/1-Z[mah]u.j7sV2*VcuTkX^9t0O0A[B1;g4*n&aa_4P#ie^=Rf1rg(P"?(%&?
%YX/X*&c["U@o@m!?X_r@[rBK"IJqtQ/!7&3(2L,7>Tp1>h]*/n^9?:N$<TAa,!T9qa^P^o3cC"WDeC,!NG\p$&.Oe!LL-q"%X7-C
%8f!K\UHGb(XBotb;A>2"9_<2L1rSZ=dQG5#m=XT$f)TIai^`i9jfKUG=fhLr>r#G*;#XK"CSp,@M1q[VhDGs9Lt*eZKkOQp<H<,t
%c0cl[mBPYfOMRCX4?Fj0dBW5Vp(:>t.@PZ#@l;[+?jJ^i+_!c!>WPT]3Au=A8u6Oc2k"0[7c.G`$K&"cIY6$le=[VBRN-lfo:`dV
%8f@t24)^^%9Bk[T(l%bi`M[\2f[@;8Ka(p+*pd%\`hIp]OQ:+0m-/LQhp''eVlT'!Rp2J)%78TCoLn`IYh)qA.mKR7\n9&_N+g&>
%[.iNhV"f8h^.N^:T+3A90u^$j:$$OT/1NI^(E\P)k)O``A)9[#Y;bjTfJ!-OEuUB.*Br"T4OI[XZuU?8rfh^)IQqonQ(NNeU5tJ8
%,,4c!]-3BtlbE>^VPs93hXY:8'V>F`b;l!S.Q%3sG`)_>T0@Q!M72Emd:uc:Wt=[7pe^gm.D>_B:VR;e`MZMgjK1q+BPF6nA;r(O
%*[hZs7iODPW$Nd9C2^cPP3gZ!.kZ)ScntS&>?\#Be7M<nVR#"+j@?5%5P7*QXAe==^"K_e>F$+q5I5qNh7m;>s,D0XaBh-NH1UGu
%cnircSPP@Xn;Mi9n;dtV7N*;X=r.*_#@]>q6E_Q[Bn'QE%?#1%bA]e4^@dp:X%l\UGj]R*Ogt"NOe9`T6bmub<gEP.]J9RbZ[G*a
%&E?7Y`-J9\c96Lo>(N3UbsR!%.2(Gr<dWU`GuMKs]Xqrs(7udT!(ZDEHmiG-.d>Q[Lm9*4?L*JN!?.n*8+ORjGK)UCJ),cd%DQN?
%(tS5p_ju=#G;l@54B<P5BG$@?>LS`WDIF^*C@*EY"VcFX.Un)_!*os5Z"1Ak[HK)Jm<gFFop4D/`O::60lei[YsR&O.ZZH)F=CZf
%VE.j<.h3BK.>h6$OjXfc.i%%4UJL5M5]87O0ja-YC@*(./'W7R]59LaY"78d_%]bq^m*qE<chlf^q\<@/6jI%i4`b/#unh%D@,l!
%ZZ>3%T&M$&n0ZAIFU3I0)p>b-L'40&Joj_'XRQ`1dXkjP,"9s6l9lgopria^2TS885!_ZC_WD<Y*oF;R*%u(C"#@#>$po0Ri#XgN
%'2c[Z$,DLH9',L:5;e;X_1oZRI/=mO;o")ms!c'4\lf2D+/$T!Y]0eT49APC@l18N_!E]d)0+pT:P&CioETF!47464ok>Hr.JAV'
%TatbN_(Q;%3D#Hgn;\c_L^<JJ5%L62KKl1lr586!ES]MK>X1>@ZVeaKd3$UnXP]a!=>30e)XmG5g([$_D;qGh*3qu]0o]s/7TH3"
%%LO9e"3k?!r/t71o^I7P.?L.-CsM1H_Uhh8"[TPnL\eeqqRC&>#uUcMbFA<`4Io%sYnXK9U_#cnHIU2tkLXqGN9%`G1epE@a#Bs:
%%3sm8,DbF&f?Nn$<p5PgmpQ.!jC@2VZHKT71eQi=f()4+8(k_$Us"soO])JI9=>`l>-onE5HplgVU1a$?-g$ZWp>4IJKpc4"#MTS
%esbBYSMVVU/[hoZn=i`'D#2]fd(sm#?I!X4)pc<10']*h,%2=rQ6R)Xj.<F@NuSDp%#puOnmqI8JO6-Z#>Mi2D9$8(J5fd%8>_r`
%!!g"#KBd:0GoTP>"9/,'o,AEL86*kT5YPAPcg%jZrW,qI7)+d#"H3o76dAFgL/rT[]7oneN+QFYm9$):gaN[gKjlt;VYeFq;jeEu
%n[+5_l:MSH7R7S+Z1^;m;`#-:9h@pd)mfi.cKAM6;oqe?$m?"?-:Nc2/(%>-NN-ta/@CPh'OY;3Hh+aMV-EiXPCiM0eCa2fong!Y
%Qu4A-HMmF"R_sqQ15@'7J2K1549EnMY3tu.Tk(K3Na@G)nm[VePr+.p?X8T)J:`o6icfCgJ_!\BE_[mKL;A'Xd<bH8LaJF*V\<p"
%ZWfX^+*k?mKWI;qeCl@;F7Br_Z)/eq1@;&<L\6X-]_q?U-Z?2t4>ZB,8Zt5#E>lGD/46)+kIGsQJW@=j6.*LV$'a*4RTeC,@+6)O
%1usY9U:,<ndhB*<UXolQmYQZ\J>:N>)6q_;7SaTCZikotFgimbd7Fqi]KbNQL%3aTr't@C<!\Q:"H_L/h9^kp_83#^AGj)d0L^kM
%NIXRA#>@NKi=AV@n>esIQG@U#1Iq(_c,tIGdu4[u('WUmHQ<KTj0Y8T-n(W1$=lZJ`s'7$c"@[gM!E%3_i_Zq0X$Y9s'(*0MXPj]
%aFq/?V_P[TjM,mBrK.Tof,_kI^3<N5e`\<odZ:+B]',utfG-Du>rT'Ih.MVhh;ZEQ,[KcBDVT4_8g]o,R.p=&TYls=ONXkY\4=,Y
%NocJW\5rqQY\Hm"C3Z>p(Cq!Y2USuM9s7\O&<cZJ*Q4CM3\DR.TG@n9bcpbH1*i0ZT8jWQ)*t"Y'AR*ca:Un9ehh*9'ciME"jZL"
%[Q5R_JiX0j#mF0s6>U83%`lj0LV!RCk_VN=S(Z+#1L"bQkTF7)m9[If'"u@g2Y*lqQY_E#g2*HM00UVTM,iS=K<qQg%MDKW&O.?d
%`)G?[@HbtB<#;,`,bnHH.Rs_D77"5)+#m15i3pGmOn+^6NOG5_W$Bl@M@?W5b_>q"As=!]N=5Y2jbREE;!.n5PmX\%?FIX:WoAT=
%ldDoZZdiEpNmM#[8dd\WZij0ecuAO=h;XOcX*AO?jJf1G*K6&PLcnJ)A4,o%5Y=[H%Z4XZaT/noT*%AF%)V.LSu)m,To!q1Pt_`o
%q])i#_-mp[U03^TX1g^tir]):A6G-CH`$X"ni\-QYNs,t6:GYg;Dpp;*HQjMR]B&ih;!<%h0*j$k!iWe?=X(R;Hn9YZ7`;[RFc=_
%/D[Pg4b.]5l.2(i\+:"V(skH<\g^5P0R6`]D?($,DE9aO)j%LMA'@555ZcUW7=\?\PT1PK^CfOm>s[IAPOl+8:;_8uj_YelO,V8)
%"<Prf<#trbZ^#l<7MjiXf-QK&MbSX:2[`Z679rUPh3ied>"2fn!]k/sXH67%#Ds6S3[@Jd&s$7a)`W,+S>gSJ",(]2ojaM8![-m3
%$4.EW";h84_=Kjq4'YOEib#Hq]e5#9)>B<VVlAoN0LEBN5D%d_3`_>U:Kgmc%W6'>3=#DO_Y3m"XT*K)jXA;dHM$7p8Ii6i#`2@E
%fCho(?SZ[BRYq2<XT.nA)?P#<ork1B&>4r`IgAJ?3AOf`-gA[TXkJ)c=,mn0=/m?ha1KXd\!%I7Pmf&`NHAcX$)nr&j6sfPAX-uG
%WMs8Ii+o<o\B"hL>5pX%T5Fe4KHJpZf!uhFNejQJZ"lFo?oD;Jk-/)/S:'ZU$V8ullXL;C!FjP1SSTIaaJ<Q#lZ+2i6_^Qc0',j#
%jMlI$mI<Ig9/WOj2,;p]jW+Il:"_?_7@"hZY*doNU$:A3dFe>ITR<WhF87<%'L9$e^,WLJ`e&G%H[>Si#*cD@h)WWs;Ig/@IDXW'
%SC`$a>-+CT&qQC7XQ.,l!aCfUh+`jReQ^A`BQ`o9BA1sk7==opb5'P&q+u\C29PaEC\]6mk596`oiaQ1\@oPF:VE(_7U3NLIQ=$H
%/`2P`FRe^<54r)CJEAoSI-S+e2j2V.Zci0oC\co"\OnlSH7^3`"g1\IGME\3j^T<lbKK_2'<mPl4jP\BP9`Cd<4I>"-3l>089O)t
%D"&lT+sEif=)3,n-/U*Cj=F[n$Ftd-F^(Xu^\+CQ'YY`YPM4$FUf)5`5BFmI&/Qph8Ld:s8qp:HSSn3Y;rgU,Ca-TYa^]Z;>'*`>
%ToeOme[c5l.;!karf'Vo1W5f]O&-*H8BUA=JM's>X7jXeh,l\,n61AqNHM"&^Se,WO(2?W;-AHgo?p>#1ZF'.`u[m]dZn:9QsYH^
%c+3tp3l9/;1\46b;P<'_4"2R2:Zg^8')@2RXg5R&o1S0"-s1Y:Bk.Seb.6%bJeMgmS6mK5;L!psE)cDnKjrb"cUO(`d.\Muq@(&A
%/U#_j-jJ`A<`sg=F*og@6_ACj-D(C:\*eBXq]]5HW?,_O$kNMeWFQq2#dfEiNJIc#iJf+W!a]eOXW.Su@M4DZ[2t<C4>*Q[1s6)%
%P\UU:>)Mp9R_kbErQUl]`hcobG:Sp[qF_iiq_Yubl;L<28@'`i>19F4H%/Fi_RL_KHHMW)]'#0@eE"\SSL6\OE^<f(R$(L$VH'@c
%feHo^'ggA?k!*:AP)>e<M5FFcH4nW4:2<\n(nWS#Qg\J=*N(lXWi07<UY!_DqM(%HCG1$gau$634m'Ng%2e\@NDB,Z>n?k^='Xg&
%Y'TVQrnsS#nH\/r3I$$M&VcUEO9^:BRn6KC-l6=':G(8;.os#i\jtt,e.e_Z/@O#j!a6jLFRnL?:M#DsQ0Tpfkt$I:(m=$=(I\d4
%8dM.Q_7[Dm._Tm";`nUP=sH&U.l"D#$']$Q85bbMY`%iGhX)&#r(2'8#q^O947/iOs'(XjqbfLM+/r"l"\FYl;*Hh<?uo\1%jZTK
%b-O+%>N.hlp%F4O6E6<fSJ8b70D>!EM,`3:\8'h47rMYQd@96]HLs[]dhJN8:R=If"C^>92I.\Vj"j,tT<BK^Td+mTFHto4!5ii2
%qF*#_,JV.!^E--_oEHmC[<f?@UGoCecEA+odmk@ZlCaW]F;>.uJjJq\4!dbcL-IeY09&[ap4V([Ib$!.eMO(?fE3pWaeo#3IGgP6
%Z$B@Ys'We^qRd`>FEA8(MShXc8fA*jC:SS.JgJW5JTDYcft:CH77k!',q:F3paIRXkT1@/ckW#iB9r=,-Nn1]-plWm;TpV2URkI1
%Vj_aWdTjSfF@2?3%JX)heqL-d;m+?^r>QcFjQBS+amMX7Ek:R;k$?,D3\0fDe9G5n1(S4m*Z+"1OUS9oR4$)se-:#$DXPbHl/J+2
%l>h:cr(D1[H*tdWEPB61FWu,^o5=2jR<!RaSn)`Kik0&.k"3p=`H`9f$c.G+.hqtMI<X--&q`Y&bR'tK-2!E52QaC>h`eAuc)4*O
%nYVYA%@]N+\N$cl*W^:dC/S]*'-n9-fX1`cVkAuEO-&t9:HDhtXV)>'<XbXlSmlQng5ba)c!,t#J"q'J[ab9B)uf=Xc%;rgG'bN$
%8-nTdWR.2qYSb\FeKN39="r12=#oO_6#g5I`C5;6Q4Ycd1]ci4qU[d!-`_^QZ!P>?#N_(!D$=@C0;*0)*/D17$/Df?NU:uShnjsW
%_p`:t,h(%#3*?8]n+PmY7C%R#TlOQ"7X(!]qj!%L^UD`BP(c`8;BuY9euhmr$NXO>,R^:c(!.pGFKJh<p+CP'X<`9%-2;8Q0_+JV
%.C1)M3l5;$;L:&Lb*/j5*rSTdnmpqGqF,[]/YM4`?W<869XI#^Pc)Fn]LGa>003+FF`C9M.*2P@jdf_BVo)tS[Y\DbQ*Se^g?J@b
%URV_6`ldNlI`d,'AB.3-)hh!.#Yio2A#ag0>Z;_1]0)n2'!65UD`::8B*-W3krBpTNna;-:`%$?g)eUT\t[)edU.lEpukIs'p^Se
%8'dljRDR5O\j8/MR2-R?5qdF@530hA.Ff^`M/#69hOCi^,8od>/)YIjGrh3C"rg@kN,+[&B&(`%g4fBX;bm(FUW>#+U(S8rW>*.e
%NM"@[fnJ=X<LdEm`I@O5W:GP\XYHo.WU2le>UpQ)[FMG,)nRC&Q]eYd7Rjr@&)K]<:r:pf0D6nU,8aJG"`I98NlNV$]7[S6o+sS_
%lHjEW7D;sYS]@R_eK0c'Q&>NlGB_g"iCg`6YOe_o!4PoXp00HoMHBnJLGC_-.i%qYC5%XcD.TgEf?]&!p#bJ06IX'nlR?7j4(9VB
%DHZo$'?ff@3>R]p)Uel<s&IXtmKVL-D65Qffa(83-tB)o/!rFMU^C/i1q46kg8jh:"8h@33PYEper^2XU[(Z.?0BaJ!>a3I]s]u5
%V5I*E-eGD2FIdWhSt'5JHd^>[SU%p*ObTs+NRF3=fq_Nl`71DlPLFO+MTGEh^C0LnS+S&"":!s>S$VfeF#kpW5pO>17]fl5[ju.c
%M7!M-V^?8\oLU[nI-/!h:`>ZT8b-W,F`YO=5.N<*`pK#uqrB;JhGh6r@@pePlipbiIau;!dGWZW5&>0)>(qBF=XF![VnB)lVm&t"
%WXfa0b(Y7VLV$>4m$%&&,Rf*\_EL`FiDk;X'Y%=TTA2Vk<7kHLYYWQV7V_>%Kmeij\CW>!PH3tY]X=dUp;r^b9[)Y!KmdttX;Da5
%^T^M&SdhasDD^d@3hroT]&h+iL9=h7-T?f>dY"#B0C0A7n0g`qRY?01TPh8ccg)>>l.@Q$7U_oo<SoZiVJ.TQ6o;T2IJSbCEFGJE
%<?JBpY#O%$=4ML/lb'm7:C_ob@c](nI<&>9EYU)@(A>l'e]KN4fnFhU!+?sL+PP?QqrD?\+hRW7_EPN15&K1UOWqC&IhXj40.Q=P
%%-csYs-!fe`-p))&T?`gAApa,bhh`*l(g,5<8=F8ehs&1/&JaClj&M!cuk8=**]"DEp10T:Y/kaR^`(V-.Uk4?(]&]"Qtms\(@uF
%Uk\rL>]4h.BCG)56H`<J"b(d`9bm*]`=r/lP=ikYeWN,<$_*;oHH(eiJe:qP_FDpa8p[(P&sp^QMJT)F9e*T%9%`LkbQ$X[-GBHJ
%r"KS5nirXXB4jAB?iHrRb40TDjaW)"ReQjHXQ`YI\lXAFoL5,H@2W?#p]'J2Pu>-i:D-@KQec]YjaU*RC>]&HpK-tW5M]u,D4WDa
%nk:r)pC_mqG+.HthVtE%^U,T`c1Ap=s#9Emo&c_?nsVbmoL>D)h5I4>K"@fuTrdlmG7q;eZ(l\M#d->`eN7fnN@-$OaWt+X!pM2O
%d94msm,+5M.3iY7TLD!bYA_=W:gG.<2eNo+Bj=2L8u`VVVCVCD?`FikVC.4*4f9;l_<VeESok47.&i70FE+!-JqE;RH-rT)OE-*,
%Bm3*SkoNU^%`tbPqppi"0YhTcf/qh#5Z=b-\ImG?l7$rYrRE.FnCWorne7Od%@u"eSP:E:K$cMXgTfoPlN/_%]RVZO\kZ[moN:9d
%@B5[=,DK6"0??-7E_#W#WaiqLlXiMhEIW%Q+m)?B'[#[8&CADn`9:sK.i`'7!7J7D=bbK1,[QPcQOtZ.*b_6\<Df8a6=CZG,EAXD
%V=c6Xn))Amoq!Pgqo:Ctb12!n.;;+_$#3QAl!08fp\sD6eM"W1:[gL^Y5UM*)9Le5LN2#sJ55dIAP@7:eUR,jcVs<2'+::nTLl24
%eaEB79BX]*mJF%2F\7]gqq>@mr*Z$!TO"VPpM2;L]d<QIHE2HW\#8%80-;3foo:\,.%1B;>Z]#16@e\f=V-Q>TZd9a-3Eia/^[S"
%V:$jlJ[YobAjW(qI35jVNn.^i,$QcRaW8m=*o!S/;B:JY`0G%B75OPB67Or50N.#"lUe';&<q"l7mo2IB=L<BHBtI$XA_g"Q&bEI
%*PNn2Fe2E&V'*^&[!El1mWdrr'KrLY$C>H>UJ^1;7oVs$NlB)5&XV<Z.?tD]b:!`gEF\+K]%`8ANmA/UbHKd6gWl4bC<8rq+g`b*
%L,n%_N"@#A;7\@kFK9<[#uM2_]%a"0%[FV0m?<`A\#sZf-6"Rh1JnW*KQ<J0S4s9)mu!0cgt\+<\=_W!GLTPSQaG?`O6aMC#X0!'
%9V#VhM]@)gM;'#FLgWUf%lar39iMc#R]PIM7?r/1]2khe8%-?;dm^U8*P'>*)l>Mc\Km8#oV3HrX9;,IPc>:IGG\3]qCQ`-`H>Zt
%C5%H_T/,!7h+(BR.mV!W9ii7E-;%@g=]K4tWWD5(]U_(T5i^PR5"X.ueWTi8.+H=@<Nk@#aAsHNU+o&bNXJc9/IB)a^ZPAbQ$GM-
%X9DO!]PaP>s1R6:-t!K#7AZSRX>N#>9KE\nj6)^PObnJ"8W'Fs"J7aM:M`Vd_=m)YCNm[\/rH+oZ@i^L7,JbSlY'plY4m3B6?B!D
%Nubtl%t`^-O\quY(&s0CHto!-L^dKPf76l6SWl2b47br?>.7#pqPp;uMGjBbMro]2/`f0-PnW=upeuN^eQ;.`b[3TCCl[Mj-R<S$
%80t3\*=8&NUoJ4l[H]E+e!mkDa9OXjH(7>ZW,Ac$b5j[XCBtXTSrs2q6jFI=-(bBbHCp4@UFrL1<65/&ES[]r$>8&[*9H-#*G,Aa
%R]qW;=8k7cBkD6T3qaRO0!8-6L%,KKHM.D%:5or,73>Z%fN]RNh9AS&h`33YG5@nVo's*b2>4esGp+A[UNCO>^61mtVsE4/a1'7@
%js$uub0W/>Y-X^!'UbLqFL0k)%_=!jkt)E,1LnLHHN^SH:W<;o.:=hPAbHC)4YKAHIdq?;1(r_X=rJNtUs?-F]YUQ4,R[ITU6[s?
%4N#SMQuPD^6']0!WX'qa3T!bX:IVh>:@5Pm4f5fh>KTA9_XshR+W"#[<1TM]<*Lhnl]5QamtA8?m0g]`:i$8,%@[,Nd/#eHK8O1_
%1khElcPWNiht'1/BiYn<6o9lDckD85Gpi4j_^t]"P_jQ_`N8:nSpo'0X)H988Q<"NQ',S%/4gOu6DY`c2q?5)8^pt*-l[rm?]qA'
%#=nHCE`V?0-&Ggn0c+dm9!p^^,Z/JCic,%D8L94>8Li8^-^H%#Ef!IQU4t%t<K_Ta-[f#e@Z'Eqn[N*_.hm'Y+1nUNQ(^'ma%j.G
%n4)NTN%848LdlH^Mb6u%.hlh6rOL)YO$2_lE`o*mYhb#"(#kp\5Bp<SYL`^>AVEVYP[75k<U=JM*?D%]ST3V^r_opO]'te7qie_\
%:m.5ere6-mn^e`AEpV7-4B*5hjU+"E:HB.GZqe$WJ)R)I!T;3;::3D)*aY]"o?oB&CjB?1iM"2YQeZb/,@'PXKfH<rD21%t(6kAX
%'.FTG3q'pQKu(%'*==.6=d=ZO%UmtFFe3^6U&&V]2gVX&cu\0>3eM/p_s4o(:f"df'eVW0#UEc^F2ZGg??iDtgS'e$G4L?BVjGG0
%W>H_lm8.;R5lZOnQZAP?$P2pd;g<:N^A;]%!Xn2pFIisVHdW^8GUS+eOlVCh?Dh+SW1HM',C`e5knbD@=3#8a&W5*nK['r9e[#rl
%@0<3/G2XT>c/[Og($>eUlHsb5+cb^[[R7HiNG=?[oYSN;bN#a+Di1pbeOhGnDEBsP$E.6TGiCl?k?`B]L*A5)3+d^t00D@0lhcVK
%&!`fteTM9q^[P(u[_j'H.'UlJ4Oj"AY&iR\$0?/.>E;:`*U8c$\h6*-hc)i)_F+"N%^CH.MZ@HB,@)q)SdQ)%hc"dIKnhc)g#EF#
%$Y.Jpn5.qr3/X`.Hf:[0gF\a)5<.iC6eP?.[iMKY\>NVWW,DOgr2%"d=T-*(h8`5qG2],k*%=r-/.&;IJ)R(^'Y->qZS"A)LVebK
%0?NDj?$LT6#KIL#n>Q1P(ETTCl:\Q0cG/jF4Uf=<RnGCsPa&FES2#k(49*/bFmgBDRu8m]<;5hNja#7-LD$?G9t3=Y_F#?Xk;=kS
%e5]Oqq1XUh[iHYLf=:<(TmGH:P5oZX$P2?Q!k1[P3:.V#*ie](YXH,$_F)%IZLQ/F//u,-&(PkNE&[',68("?AT'Z[Qe/5*&k8-1
%>nj_/nRNHFN3;qPdhS/1NTf4IQ&+r%k]BAfS+9ma.,SAOjcHU>'QFjT(*Vb(Ghh6/SMI&^Mp!;ACOOf<TFKk_:dL\QY9Jb0]VB30
%DJB;hk/h<:Ho2N(p,p8MJQ5uFdn?Fr+tP7>Hh=l=qrm8XR94i,TOlTZ=e&-c3O?sA`Q;olDL9G-NF.=C%t*Z?9]=VIs6rq>ecOTO
%k;*fkq+'B[ZL)s]dDeG^i9t;no4E#JIgNhb)q8Y2gTjX?VY@IJTDQ<=e=PjN73!)0YGn=/[I&[VpN1-bHo8XQ-I!m0V%C<>q(.f4
%L[!WmJ,Mf)dJT_:dmUN>D])jSDT_16Cg6VCc^Z3#b]AL]In!4%+o"m/l$gQ;n&"Oih-Ds!"DDt0iFeFZ95N6&h9L52Y8k+7$LiN#
%o^6K(Dr?Q/abpg0]kcu0gl%suD]?2cfF'I&Cca*SDcjZ]V,QJ'3I2j+J-#*\B\I)SWfD4:)47Dg?0e8J0Wf"Iq;CpAi:cHl@Vd%%
%o%#1k>h+(<D#CIj+mroq.O:!fZI-009[jpW<aCWcq2Jo&J\b?m=RdFOLM!n@Foa!&EH8ug"Ri[Pg]pEYdJ]fmmm=,sI*I[i;so)3
%.HTEG@q=Y<?Hp6_HsK"J<MH^2[D1//TQ/$YS(<mXb?Qc:n_!"J=BjJCVIF*]NQ.5iY04HLoD<m\So;#pn.QXXFl@qK`""+0QO%\H
%jB</`]`f`Ao_,pFm1-YMN.c?Z4;JWP#%S%B^t4YWPp6Ca;qcc*Nt1dsW3oD>I*K74f17igpV):]g`g1Q3URERV-#3m*9LrGoog9<
%ZP@s*fakSI4PTB2Ac%:5i5?^Z6PTR9NBc'+-TE"Tp8jA/_TIU7)ua'j1?8GK3q*@fs-S;o6<?BtMP_'g22'(MFHSi_^k9urY32Bc
%Z3Gf(_gr=GG"CLL#Ld3o$:S)h#36t=ZA`GWI.Y3$DHJp,oSeqZ8@^Yiqo2hR!G*q@N8HpigL8VgdSqQse`hk'5m*mAf:#CP+IX/&
%5-JN5Y)+`9*W;4DcR!(,?qYr9+Y/6>`@`dP'Ja!1Oc5n=;@Xa)eZEcO7il1fYcjLo_Y6QFP-,m#Zi%kR9#,Fl"?,t&+1eH<CuG!u
%mS;BS0j2DT%6^$dnbhtGjQ=IOHcnaXq!R8[^cMN[r.`hR]mEjk3:Mrm_]"!pnXo^fJ:)/N"CFB`bh(\Wc2NK&W:UFE&0.>RN9=RU
%mYpJZLC\lrS"&uDq)1RLkJ%%81`u)OUP./3-G595IGPR@K(VjF9TjFM^4kC6AVMK.@=s8MGV9[(FpV9!&(V)`lSnUfH+1Rb*r_?>
%[0(*pVCrTIr7NaPUGoL9l==u0Ya$L*0<Hq/AbX@J5n0STaJCM].3@rA4mV9dS4;[opP`!_c%$3Vq!<:W0]=914(*/%F#%9d5-2Hs
%r-N&1!i"/0ZUY)r3%%*Q8at[".<cV./)\5g9H59%VV4$,rH)+7Ce`*YoQ17[d[lc+quT#nQMBD3ablB'f;,g.r9])HL@k>r_5D1h
%TE#G^d4au^Ldn*PQ!U3uBp%V\q[mf2$uO\N&#>_o%NacJ"$=cT@YHU<%E02PqPP50PT6(,7tcB'W@o\.^^!]m\n0s(SIr-^Wqp>H
%Gp;R-?*njkG=1TOA/;X);ClA[bCj'<Ck&#t"(-27@@(FHC5!>nJdaV(TWj1p*tYM^0Z0(],?U'f"#;aLMGs!Z"sJOcFm#@UCB=L9
%&?lOCT.)ZiF248Op_tKN>uKgV`I0tD&oh]*Di&M5H[F0>NLXb/AmC!*n4i('mFVt!@'RA-\YMCXP]j-,<cn!n:rE7`9`O3;)p*k*
%N]c-WMNi5@P5o8="&=t1+>OlYP82FriD3,?49VsF>oN.SKRMh;h'SW9bg!2lS1A.,`Ma&*#GTR)%;h$2Edf\r]7<_jS_gS`56)oZ
%HsdB4qt5/6i`bQd)D0Q=d6';0bUo-iI'Ga(Upau])PG3;QEqU">Bhp)Q0ciAJAeGSTtUBH(l!mbKCMXbZ"I#'$_f'a*p;cWcF6dn
%ZeU'S8@RL^8PCAs3"%Z+T#&D,6U*-4[GM4`2L)^SgLhVWFJJM(T8_J3"I5l16-[s;8?a22IeVu0Y4t*3gOFQJZ);kA+M82a,8W;)
%GW:&qcfR(=A9YCP$!/n;lSgU)@BcY\]W@b+FCM8&f]?/%8i?99joU*_\e4hIj@Z%1GW-5MDRiK\PGF+DPZuq0l.PVT9t)+Y+fCku
%o=`i=0;b)-r)_^XA*Al7ej"JO6^P(tj5T>GrL$"XBXlH>77<^ZdY7$_b,I/(8HA]OI7H%Mp!_R3!1H%K4fec%_la=1mZa3tRkjqD
%D]Lf+JV9]5@u!XmO`C3]QIhY6'i*`j1cLaQHT`q$CjjLOK?46amIi'qbN=-87^i2:_Qns;k+!f8/sC?q1bte#+):`V^4F=!!KM6(
%SDaW+^0fuPXVZDL)u(_S#&*'%%KtP+Ugr)K`bCc2Go\(MH>=mDp=%PQkBL69_+8e\T_Th0N#\ad7IH?Dbc!Dp1!?iVRA^-)rA-%;
%^+SP)AB8%a`F4[`c%PHAEFA;@.XKR+X*K\"\,"Qfs0/;Xp4]+q3dTg6psj2&9Rjg:p5o_FICkIVSRH0MB\kR?7`T[NJRMk5ToBO8
%=Z8Cj^'+?i2EG0u7AH-F*CbghDh]Fn(6A:m9bm0<*pkZ8G0d8gr"lp*6cCI0Oiktj#<LBj\$r>ZOmYKlZf`anV(7aS):6BAb5K!?
%C<2Up)8FEVFrh\hmZ>]O9@LnNGgq%9UEjl14[8/nkGd"_h$75aFnFB)mcj](T`ZgF=?.;k>OLZ_EsDmH&E"Z':;FH8`FagcB61%D
%WPbZ$g@K[mY?/1fM.:QQA]B,o9Ig_qH#)SIPCL`*3`E0;TRsI"(_u<OKb,'q,DJ%1)C8X[.W;NNY^?*T\F[/BUG(bT)!*`.qGR6;
%8'RD@B58B[Xh36TbKY&qFha\@\-H6I9[56(/%?*.XfifYW(^+Y:BkQn=6?R.Hl%PVV$n)9)6/s7pqR'`:E=m1NRml?eECRgM*IeS
%UnRjX*%-VN>s>AYp-OMJ5lBn9c0T['9)]TkC-=eI^f"tcoDN'.Wa"$Q:[8rV?q,JaBtG$TlP_Il]aBEep!3eZ<:gW]nh!f.3-oVj
%d!8CXNdA-5ltb=u\S?ORqt%<9?I?&F9);MPHTJ(^Le\i`@m"sfN]OmjM<j([,]$4XB4h_L%%28NVk##6:1%NM1/7L:CFld_3:5cq
%-<N/]lO<4.TThBlaqnpW9g[7rl:WC.$jKYg:HXj*^YZYuYE=5-i%5'A*dG"ur]O15Vqh11F1N3%\oJm'Wt)iVAFs<$MrsHI6/pm3
%U$Ni:og:]4jS#ScNBaX;T\%mqg*=,CS\;t*^<j`OT(Eo/k,D,$c!U3H%,*2j^F4-'TCJcJ1`:B3)GUca4>\uJ/k6At>h.<uUQJbT
%s%\BJbp0['ib<#Yk^88p)1Mg7/g35F#5U7pqD)cj2db4YoO@<j\C+fC,/;dX-NM4_dYE93`,>J`[]Zshh/(3YN1X.qaK7^F+YhDZ
%V6a#WH)3[Vld`XqJj3/I*](4M:.*p':2=KXB<rEWbMQSY+,/Aa;)W5?i]3gcZr^M<B)>1ZR_N-6=pBC!HUdKR8tq+KQ_MR`;#Z%!
%(RZ7mDYDVhM68i8@]T*]bs%SBAo@V/m%^PpiQm)O;mVO^Ss'5*DYDK-6`]h)c9@\Ca9$j7p9jS<<G!=Ir=*!%$])(!_ddP.c+nsF
%Q7P\!BVI5c#KO3]1W^rr&,r\mnqEt!W;-$6/bKiSld'bW][=rWL%1<+.%rBgqCi7@@pMO<)>BF;&#4FR_f%%Jc]%IYei%p>a9@G_
%?aruHAA3=@OcE3[!L'C0T/#krp#t??7`PBN!:Z*;Jk*n["@IAbiTdagR47Q,U'WV,X)%IR&PXB[i-oHY\_fHTHWF;&q&E.S%b0gN
%BPAW%YemH0,"C_oRs8aP@lIGIguVCq46B[^d<roGRQRf?q*Y20CZhlnZDHDp")_h">c=:8G:4UnMRhLHc%@ZKRBqSThLe=#T(^g8
%ncF_6DII`Mi`i7\!n#`A[6)^!$.,*c-bmBg,-VJM[4fkaemDg2KJTfE_pb<;e%n+kj,*8V'*31[-c/!YiFEi,T(6<3\;qU+*$+rp
%JI\nGF6Rtjl9n04k:8q'``0G'Ms90\l+gb>b9bNBY]N\d_W.4l!XBqo!p:79rO^A\4j9"H<qe.pB<9EA&W5JKgYX>J"IE'($odrA
%:p@gibV<)HUVK\r0Q7$,PXQ&^5bfD*3`P7C:@LgjbX!*/Y71+[@>.H1EG3UJ0GgCR:X'iUVU0VA5g"PBH7,)&UH4KKe9sAni;gG<
%63q\("TtW2o;ndoa;GbT?frI8Z*NYFT`Q@B[p:Cu4HAdA?+(D%Cr+,bO,6`B4#CC(SN$\toJhQhi/HEc)&^A""W4u"KdVhsk_:or
%9/<=Dbu$\PO7#Zl#V8t",a@5CVK\#ES>MI)nVD&j`=1@Ti198!p2.'XL!8,j[Ng8b(ssW'"N%%t>FQt;WK!t*[+I*.4,Z"NY"P?Z
%A6>*ARZq"a'>O.5F^*Kd0eU:&:&dIdJ\t(FQ8L\lJJ=Y#ER@%/_6QRfe+BgA@^>.HkQIGqH[#NZs5):bMj1S]fY,mK/[\=^-[*+,
%-NG(XIc)n<*o3nDkldo[@3qQ;U:!4+5.VH-.4An1+Z9[>0+pM]bpZ^eiZO/E'`Rd-RE!!jHtG(]dqWnlnZP];%0%6)`^N:JFbu0(
%K-H`!^V5tspt(R1$NE/%Vt$sKDME9c"!.h*Jl15Z=5&@A)0Qogr`mn.CZc1[694rA"O!+M7D5(:OJpFF7Pah&Vn9*mF><PobRPsq
%T<)844[lpHG_9@[Z#C=478Rr@G`@,+1e_nI)oGe@):/KqHo]S.?$mB]nOiI`U'X`h!i#4F3&$-`HK(ZW43O9:4:7GB;diEfo@;W%
%XGCe&>(.W]ghVB*"ILt&9Y6)&Z(5-N.p&7^Q7`sK3ldtKn\'LS!c+Kf2Eh-Gp^Q`FYG-[JRWZ0nY-MuWq5V7a]DsYE\+'@o-H6fo
%P^<tL#nN+klUKpiZ]mh%ju"O0$17iY_B*)2^PO]h4HL7"U:NXD)PH&<:>#gAiM[-[;g8:UfVH?%AN*im=f;lcY[I3n,0N,UJ2l1O
%=9-mQSIIeCf\6+8aiO]s%Q63b=Y76^'6L>ppf\nMD5@L8)8iXp#-KW4!$4$sb&)0%fs:NN$-afL-L6M.<R2Br[REi3XZtKQOK;t.
%iO^ePVo-GRbb&#BRe64fm^+&9YN?VhHX6_`PJAB#c,XKUh0b%OZd[:m#3Bm$=7;7<,MpYBXimq'OR7FPFMfI?I,gDQ/.;A2@"VY#
%)KVnZ4T<XKHlCeKSEp_I,^eFfI*-j3MJ+4C0N>]<5-a]@S-73M@=qbTV@10fGehOWc0,0.T!g>F#,^`3gR\/UM_EC"^sGbqcR++T
%RQJ<GB';lG8U,doME-/GF7)?l+Z`boRq+YMs2>J6?o1iVrJ&TL]A_(kjpn6IO%Y>i9Y(1FUT/+Vo<aMQPlH'81S:nCmjC<k)cp^t
%FpDW$_&`bEQGl;\kC2#R`KP.gqRK<cSbX9+K&t7/(tJ@7]73)RbKL7sq(F4-f3(nocAeEYl:^EA\K,i6-.S@3;mT)":J(4*p!bqE
%TaZ6>Wm@WA?N2rds.P65BF"jU?A#k5=AX*nSkWfIKB)*tfZddkFNNQWY/Y7?VPj^lmsT(:3\78\h@MQSe+IOV'Fs3&d<\J(Qs8,D
%r=I<$G#g<$U'*\#8@0,V*!;?#M%o*k]@u9fpHs$8dZ&#5VQkg][V3_75'#JsD<ao/9A3;!3T/L!'8T*,(mp8XViVo$mFsF/m>3hD
%oFt6o-`+]\V*+imPWNCJ'd)D;Gn"B_`gKM/a)hM,oRC+8q]T-uS)ZN(PBcVl#e\Bt8f;0FEYbt[,7j]>G:)c1VU0#^WLme_'ie2,
%,7gU5*UkF+TJ./:#tYifO[ufd<X#?C/(BG^9's1<gFJ:)E-':GBW:IV'X9O5Da:8W+sCdb:<l3gcKNb^YS-n8AtA)!;JYbZC1iQc
%0gF6tBUpnc^NUB5QAi'&!12Yt?R^4a*Q4t=TC7@R[fWX9r[aCKr%&XlYk#6SZO;7:H2PJoV!u06.SVWSY?#hSQ#HJNC0pF_C'n5_
%J+1N0IS`aI'86[/]^hrP/&@bJ!j#$3'RfZFB-@9DQj<V&B3G=K'fp;P:7asMJ7U9.OhA6W,@c=.#j@7uf9Xh2KgT4\lj5EhT,u:X
%+RNhaYWdhKDhAWEcqi\9dr6b-5(^,;jQM^N.E^H,c($uGE*ihq&!)fgT"=B6EI0K2#89i3CHD)N[]i9QI+4-,)g=KZ]W1B-9]i`(
%`cM-d(^GMK9^r_K^@1t[(#I_9M)j2)Ri>@0UH>quHJ))LcRuQoRC<ZPlmM6)$Kh'_HXt>j$A/1p_/"eWhVP!NS0[1_*GQ!nLo,*-
%:\iIK]_H1qZ10LI^lMV5_J&f7`iP1VH?^mS*RjVqs,eAOj1@O?G^]8PAleh^\*7PmJCnLbrKJ8j(>QB[,F\(p[7j5?<67&4akYm!
%PccmXbk[qgL$ZW8\nd9_)>9OB@mPqTVVF*#NGnq8Im2Ei-ZDMh.r,M*U)E9KXodi+/8"I+X!)fk(OsF@Rp094e1tYe>.Gqc?*aWI
%cg@6PecePCr79u$h,YU7gQSkOG+?\6135/YFMp*NSW(P*Mb]r!IhRcj`g]KVV&$m,C%/JpGTi:Z=c6)tI5!jSbhW`PBSqHO$e-#=
%S(K*sJuE8A/.s<q`,=4&!uI!&D]!Jc.(P2Mn2VqRfGjN0+lnin7S0?6&Y(LdJf+BXn7^iO#QuZJAB)1`"*$(O'hL>,:>N!2AW8&E
%XrGB[.b$015W'Di^sPd-oUP6%MjU8,J<,^qW/3;6;L"Wq?qj8B"E(R1><YcS-'N(O'j![c3+dFB%"$QiABo*m8.u7CDf6<2Jmtar
%mZo-'49IP]l8IRd^hC3XBcb:<K&&eG@M?gp5^\[nME.@1n,QrWk<S!PFDrc,%C2f<rPm&Uc\H=`c7A2IV8qV(]B8JEKAS^KnJQOB
%]PSk!IgmWph[984p6B1g>&j/&gXn\^B';3T(WGQgb@tUGOPA<RH5))D?T9&9T,!q-D)!'tG$u'aPP,GG,+uG"7tg6L\B>K#`?ZR8
%FF]C;"s%M,C_K%$h6-9BI'>^dgcl&7C[OABUZ7*>U;:]u:?kYKB!>J*Wn@sY?BZQAX#^Z+!&cqekY)gQ7joqsG#qUVA['bd>gNeT
%G^5ka_kgicBG<Dh;?L&=mRmdOLd^EOXQ;I!2jqoh#n2U^oQ;bj@$:Ru,+5@F\:Ur)3##caSIpWU%KJjQ&SL&#OMYu$Qk<]jc!k)^
%%$D?>l+#bOeoD=Z!4\7VD&=<7e5T];N+M&=E\N)h_E-H-(7qiV>]-%XcF!/]Wbab;knU[kEesjqWK#)LL&dBWRTl(T:1/:T/=3#7
%3o+T/I4gjoSE;.N*Jh!$d`lKDmj4N436gj>??Sd;j%ItK^n;>AT;WE0%0=DF*iT^glaX;8:9fsGB1BNd*GhF3KBguso#M+l*WU2j
%P4j4??cAbTlOsbXAR+$?%\4`%LH-)mCIP.KibDS(G@*lHO_pbeOO^$RK#/7RrF0Fqb)pBHGA#3Vk.2ne0R\-SU0Tqd16Ul'U2eIr
%&W>Vb>pM?JVKhJ&nK$!^YFXRA_)?&M?B5Ja<7dYp>MjZFP=YgEWn<+Y$j`O,)A`s*1V6f>TP%[trDI<uhC<?jS%"L.MK\]/eDb$8
%bBsJ!ATu(]d6/:P.UcQEpnhIDA/-/Y!=8ScM+9Z$%,4'AA=_?_4gsmK.(QT'H>M2))Y@GK0.]6>YT8%KI"eX(H[qeBP[#ncC%Grj
%?YD+/lM]T<*`1pQg$@XM4p\q5F"DBn%B<E"'X=qM>F'5p&>iEl_a(G+J-0&Y\=$Y"9RCOV?^i*KS"A:bY($6Bn@;gaO.DDIE(dc@
%(221[d%%K'b?mJU[+u[0r0p^[MBG?A:tDQ6>9jUt%l.^n)S+;kdE$1j[lsY7lZcOc]'.si62#jOgS)ZTCfk[4S+B=V`3AJqglGQF
%fHr_uEleYPI<sP=l*0JJ6qUc>?c.GUq_\!k)!q1GCJJKn*o7G2^:(SnnbeU/5'9"J$OlPFPPNjdD;BDq^)e4ZJ(`\"8$Xe#-`(">
%GT*p-bl*[$7dSkrB$6"lQ[P4i'KdfPpb_JZT>n`c`J=u+mXP1UR2UX)MmQV#Yu&Vhqa1!`m[5YPha;;u,+]-b\,l+?AE1YQ:B&F/
%7gtm16pEJdXZ)!ZcHWn.CqIt02F)=T(gCneS!.Q!L9^EjY]k&q*_L.V-f<+N`qY!Fq"Z!/<2]EpP\a8*oJ4p,[OMgeU$.u\49jpi
%!rN0#L*?h_2f.sf!oQ]Or`TM$RUu6f,T%l@<^R`CdQMfChWJLGrG9.cd/OrWkdU7Y\QR&mU'@<6b[:I",'onBG[s7B!3"j,9FP<8
%PCoY$(kDPYEj5ZTS:gd3Sdc5-s4c>:p#^C%f678n%j+UN8<!E:gb3rZ=gpr<1dr(i2N#@Z84HK-M#p+MEIWE2>'nS`3?OO)U@Z/#
%;5D1Amb-2LF-rG@A)tu)mOfTi]6a#<eb.bC)f$/uTDdosrVSDL\Gu*dNW&X=0CJ;j,X-STrr)A84PnpXs"$,i@G0/6%\N]+VL7u_
%ht`&N=5Rr0nUl&#rl^;Y>eV7rD2Hj?+9+O:o7)145@Ff3s8$*:qnn>Yn%O0l!sSNmqfpIXIt0c/T"2c%pu@k<B@":VHhPuc:n[:V
%*7)Csj5mllq9,,^4\h&eW[OLN3qgp\-)]8S+MN0n&l39Ajq5=To=sas0&PO`qWcCV^"<5tGMW7i14K/hT`cIDn`u7in+BW4V@P:!
%@k*O#iu]@e`]lYTbobb3m/)jQGLnct[r3q'?J^1]c;-JbNP2r682[dnlXPtSs))a^5O.aGj3nRU58=+[UK-7;p=8Qda")[_HQmh:
%'E@Y9H[gD<r8sbu^3"Z>q[S\7G3n5EMp(G@pQ*bu[JSF7_V;g;SNeZ[CWl'/rVk'bqfe)6`T[q06QD_qa,&dSb;XI;T0=k5cH]3Q
%"Q"j),D>eEYO>ir*'r3W:I>s`9-54Aps./\6NlhP;PTe`HUNV\iVlV?'!K)PpdaGdhr!8+f5ZJaV98ZISq]L&D*Pp#?JN2@ro3q?
%fZ4ogam^)7DQdE]Q2gh%lb<AWjitiA$)bC[_Q8WrjbqmJ=8LtK]:7"@S*M_Vr6=Q:[s.S9H5cJ)&&8%miLBiMrLt:(4+-WErq3Jc
%\,R',rP?+`D\)m@hsPH3-9qEhZY,p$_k0oaiUtm1Q=At50@$0fo&"n=pk0WI48]S<4?n0.8itVdb9<1!PUa,8;^hU3SSo/M<BOF5
%<n4%V!9KS7lA$nS[UJjm;j(I.S9h91V8G'Z+]l5Z=+"AEeRPVeY!['I1>rAVZK=tnjUX6t*WIC5RlfaZJr3,8RA+T3p1#Vp:Cp'1
%4p]Ss]stRB65&?O3uV4^flugs6^;/B,oi3g%7/%sO4!'n2Y4u?g,d_OQ5Nb#(H.$eMgqs$gNsCMKFbt0Ce(*be@kaSr3]92k?0<g
%)+Dirq%]#jW'62N2_`E++Wm#Dd]mt=gh&Br*TJk4+4k,hkTba=LY@i4`XU]=[LKVrrcF40pC`L[(KkVKa&9TPKpMu;lmE(WKpmih
%<nCEkaeZA.%29+MkJCX;-&@T^`e4P$kotEi7A#S!0pf0UA&)ufJSe$u_ou\am`ou-_h9#W2]YNs]'B[bA*Qpe9g,I"`a"OTlO`G5
%'hU=p/4;>$\_,MGp#p_plVJO01Km9Nj09rpp)GP'`IcQ"UET!6/Sm85M]Y;Lf]1VrS.Y]tMT>/N[e85:L'7oj*"@E8\W.+*a5UZ'
%[LNDYr-G;sAL*XMa3(jd%(XeTeBn0J/0(DqFWG3aQ5M&0(,grR[@_>UloU&Za<ItM`"a#pE]Gl;;OAR<$mp:)CKUQVA6#er)@T5!
%cSA%S+37m:W>&_f3L<Y(dRZhY5-Ep^a?%uYDCaF1g=CY_[Gfbqk^lnESA!Ys><^&1g'$A!6=hqb==QBXLs,F=\/>DI0gO*,,^8n;
%UYdu'+m^Qta-F4oPOO+dYRNGg^!8O?D,&b=gU^1i2gh'XFlc#@./u!e`cuo@+\VH@U!T(E+?$\O&fW,?<V^R+*0^+NX>,mj?;1^O
%gO+aC/'JUAIPqiU>ZtB%R`I8C"NS+9:h/l'G,RM&jEk-_rY#K-iYt>0+OUfI/lDiFfN[bWKQ<?J1Hef`/Zjh&&ORX$W1[6lbnV-U
%L6?M=,dBAR)$b2Y6.EpnQY(8MWR1U)Tf-GPEIq\/gJHYa+7)jYi$\S&eri,-?][CJW=B3$P@?tn#dQ]RN.DQb"su1$E$9P1a(L_U
%41jeseU.s)HEKh,F::&?P'YJ'mk#RqaG-*J)q,Pfk!Yb#?UA;%Ct1nn5S=NR)9F/AYN.H=r.*$>R9sI1PbT.rcgV>u<:@@;*cCi0
%r.+PI(Ri?BR<8e18do:N'^9Q?M(L$N>2J@1=gZQ7D6p$JXm8SuE_1=/&RAd#$1a?%UPDc;!`F(adZG!0>Fn_S-S-r#Sk&MnpS7>K
%hs=Ej^839m@J<?X"B!FlPTF!UR(UWR7)F=K6p)WTj;As`q%I+XY5Y-DJd(I?oK(>TQ(YskPtWDUYXn&YPHiG(SjJQ.8OFC)Z,i4B
%A<Y(eLt-s4An&:0eJ2n,S#+D[9<dj^G=b68iD;OZ(9DcjGH0N6lQTQmk"]JAA0\G-%Kpu"hq+;9obb'<CK2#rEP;RW&eMh-\Oo/V
%;tW6nlb]M1/*o,j%jW=Qjs[Y'[TZ(^"+QoTDG)0QTGUVQMR4q&iOQMY$KiQ>'P'gYWNE*#p#Zu<3N6'c:dI1Qigab2%H^TOCkte"
%dEf_^.S#o+cum:l3bodIh\%k@Og2[O)G>+F7PLPX!n),27(d&A/Ctk7-%t2ene$dr:5uooUk@9:I\<YQ2C\7UWC2N"%r$-Mb,o`?
%/Kf@2[3dWQ;l7frN5!jUc9'0U"<D8=4;@b'Rmfk&#tH2_6j76>&MkSeM]*s@F,`^#gnpTWTaqi*1dW#!;TSucm[Bsg8NV`!fjO*4
%P"+usbUJAU<6pAPA<T$`82&D8_17Fbd=.cVD8k=rU8aJi\Rs8Y6le+JO^O:8U*0TqFEp`@(DDZX3:tcN9io"\:ND5hbJP%=g[_p5
%gJ.OHf(ZJhc5$1@Y9AC0a>3"V`N6h_Z]CDKMZ_0r0oZ=;Mn%"-`PZKTWf=G7d60M_nD+=$B1dip'G$h*heZ*2;\`8l[Bj?P?DZV[
%P,HJF%URF@ck,8_LOWrAd[Eb_H=gF(PlX6O<G_2@MpU9Pr184C*%O-b6p$PPiatif5`qUpQMm>>jl5J]Nes#;,(WKh[NWhlRCDP4
%p''g.qDB@:<O.5!iEP=L:3L-:7,SI:$>XS1.[Pm)4/aE-pJWAOg4H+9l'?&jR>@Z#EVP\8TeJGQ%lZe@%tDUjKg.s&/[XmfXrs[g
%bNs8NI]V/l`X]I'-L+K,D*d8R%jR_MP/&VSr`@"<W$mo7=LH3f`!^7ZP"gn[X&"?d(=lW]4HNbQ&m`j_&qRFofk#%?(aWn@E3-!/
%HXph?N[Pnhb&te;+AF_+*_*\>]4%uKm9JRS"`PV#$6s\qcPi*sY(ou@r./dg<@&$-$GfJ(LItqMCRHS^I2fI-eHjk[CGdH=XI6"T
%)Lj_Pj_ugi5Lr6<HRnRh'\u\!M%e*iKdDHi7>pI&IFb0P(7:eUfkIr/e[8@0Gss!QFJaj+!KX3YT.+5BN,r.aCRNF>[)AUO9eBjF
%,*+QJ3fXM>A#p5?lpZ3:i2VOn81s5E#'JsuI)RIIA4EcKSs;m7%Z1pt9P5_''g'a'$u@&%)Uh,(>#r\!;@J+O4HnJa:5gK^D?m:Y
%)$\bdIRr`9`OG]l+K?&K*IUp&A?LT78FMMe:s'Er`Zr]=As_cm`#U`g75C44r@50HD0/E2'.XZ*_4%r7q%;GbBR%s?Qu4B!V/gn2
%"Ogqc\O.oJ1C^XraMW?8\j$Gn`Te#uS'&W_HD00sR6],]P?4=Z]2.:N,HhK@gp%W#<Mns'8BJFe.Fb@<P9lFpL)>k'Wl@XGXtQjR
%\N^mI6A15lbOT0*7OA=G03XLi8lS#W,t6FG"j'usUd=`.=]qpHLO.rP1Ql_c4/M,F;A)\L*Rk6c<,5>;Ju$ndW!1'q\;Td18>Coa
%a=-6a2R7E.ekjn).YWS=&.3]9W-;(o^id8`?:!j%?"kDpO[/[r,!uZ'duKSNHdi?]=lkhee'r1Z.L`GGX@FG1O=h6u(QDtKV5d=4
%)H'!1E`K:f`M/O>XkRq8r(NT_)/c00<U&3T8]CBq[ZHB'frlR2[@/O%[DnqpVmHt@N@?.uet!a@,;tljQ5#=01f80'8O@.OMGjQU
%bDIOkd;U&MX7u<:B[tGWN;b6!4cYHJ6'*9^qH,3\9M-R6N0eolLQXf9"rhs<_b<5TEJ?)W?)m3bH%9#@j%=2flr:)l&sqOs)+O(:
%@3I%=R$;9[n(+h3H.6\g!HX#5X.,S0FCXOlMn.9-[@!-d7M4<Q*/>A9"EP`_W?)8r-Dq8u%=4J*/kCL4I2\-JJ[>Fp92LBeKtB69
%26&0?eDH)Y5+>\G`Q$n!_@F15"I0.Z+Is^.*BHYo0fb(2_gi,-P\jJ<<;1Z2K\^ijOZiT;AXIZgdYpdd',8cH8gEa3`G&=B\;M'D
%Y=(&C+U&TlcX%iPj0af;i5H&?@f6B?`<s81+Ga_3)@7'Y&N_=iPB>_sb0l/Wa^j5r\k54:a?ShN)e+^bf8^2)[S\UOiWKZt7-=8(
%F8UA96N;JJ8qTqbW<BF_4(3^R!PoUpeL(T7YTdNt8Oj_m**mCoY:b!+[)@2.In9IqTq%`/JfT00eYPlLV\r?q'V1K*O<9TunfrbY
%ZUlJ!ia2>A-&BP/qnh@a,5VP3ZCg&!q]/5\cgb#dEtOo.k@,1C3#uO!g,aA2MKRPdiU#a]9>Q;I<&sFUQ'ddqr<*hbFM1@%3n\>m
%8n'X^OUVm1(+6"TH@fNL:bZ<+K]R1r&!,q%+Z-[Yi4_Q`/^J?>pAcjiTS*D=\&W(^lTB^#fk-DP\-!Gk#_0"fKg`Gb,',OJ.'Cc=
%6g^h?g0D_:p!*^5Hdtcg;'b*-k!5c7V]uL=1OGT6e3E.W6ng]F5r:Q89U[*hDCEXc<#G^dRrKS7(aVAre<abR[:/^N:_QuDgq[c8
%gJHYa+7)kD5b"9.`&o^j$35?XRM`M2/N%E:P:!LbAciXC.O+U(#ch_pX_kY#E;'An6Wfdc'>.T*7bWrH_?nr%[ZT^p:\XV8M\L[9
%r2lsq;QkWBaEF1.RCd2?9"C2b"><f[,SX(4NSYboQHk!6eC*S2,e:*If$4=>k[,M_9UpFT@Q"]T')]0H!AkT:!NF7$QY4XmiO<I)
%9(?hDh*n;G8Wk>4.9c:1aQl1/8kVPbaIllZY0o0r$t)AO6o*FdQh@ol=Ns=HA2:*n2bR:VL(qJtnEEAH&9Pip#[bd'X@_"(SVI$#
%,Thi\+`5[n=0j,"p8%$F+_o';`!BLSJdSYOo6RUJJ>g,R*Y"^W.JFN3U*Kr(:1Y[GBH/$kp\']D#9?$J,*\3%]9)EehQ&YFFe&M(
%QBBlfg=/qLGGW4tW#J@0%_Ho,C-nlU(u:/:(S"7;dh<j%\j<3)o"^s"Aci_h@cVK["9idk#;<O%noGueVPH,[JrLg?&Do&GN1e:C
%Ut2$?;lu%>[5lJ?K1"0o_*>0h_ik["C=;s@WJIO5-90/>W,hPNeEu1X8Ou<m]5<'I9kV$k)Tb9e#%3[i]SgNH6X<b=afY7=q,F_e
%Xa1Tlm'B+q/f[E?b.g$uQSEs7bY<*KU,R8F#EiMobBO0qI3=dbq)+abVkTiQ7OYX_CXi]Q;TK;HEReZXXqI4I3DY=F!]?+Xg'llC
%)*KNgeuNZYRL/jW<^$)rfp4%'3Ju\\N<T^V"\@=,F@'r[E!*d%HfD\4*antn/YNIZ^mpC\.D.1NWiO\.$!0.:rh;,Ob,RR?b@c5X
%,M@WLdr"s,VpM(TR(&qbS[(&8Pc80>>LS*q#p-?-[^gs(#EhKB>-is_$'Ng&h$E&9!)7Cu`8\n>9LPC@88\"R5[YSQHhCDS=)gK7
%\'d7GD)t1%Jebf[BCSu;nq[ncLu^<03#tQiiH$i#MIK)>?<+ioj3GR?.Z<G?Qt;-#Lhee#&[<1$fZe^"rh&jEmWQg=V:a3*Gs:Ah
%,\XU4FKEGWU</@k9W'.Ec@[S2TO/7I)J8FO]3$fXDm#lV#0J+*0H2EqAF>oWX`43]\X[HE>3tohU3nI>F(M?lGQpaui?9e1`8O:,
%rt[2&+Z;nAn#G1O,hsaI.C$=<TV(;R_-=S$AqGgpYcpQMn$lgceS)I1@7O0o1;/bq[aT4NluY<$2f1s_7BP!3K0%lWFlNj4AcipF
%dY$?ehR)KPjT7&tn$je?nLoI72>eMj=hn/@M++g<8YM/Zck*C!gOMjEW'W#A&*2\5.Egkqh07rH?&bR)Mp?_R.-MosElT,NY"2rT
%ck2g?^),iWFU1O++D<;)dW+_dG!`&1#K[p?JX?Lp,KOXV3>ib`7b&bR'MOh;SG>K<b;>V/S]];W:g\1iNL0,-ckI;[lr];E9FWp6
%N&HJnp8YK]4%$QXoTQ?Y]0'/Yd`e[2WTBV+D9"Dk%bIGWNc'2:]\$G'cV,MVQJ+DoWU2_m-_oh8BMig>f\R1P;ZW'S8I9=L.:7U2
%A>s"PM_[rjFUZM-JV'em5ZE;#/LP,^!I!LN"5_*E(I>ZJPf-3i!0V)4-;re"fe)3$;'T_8W6AkM-4@tXoaXPZDZU\.+9U#'3E8_@
%E:!rWi-IlM[4%d\d)E/=WPYiHl-*?f8`QgT/l'UMJ@g_\h&nmX-0X9?\=mGO%8atqCI5_`F?1`uRUC:K0"FD*Q8[aFB0hXQqU'/t
%AD`6GA6M^J]5'HW,J=SbL>.G+QY9/=pr$*tBpr<mPOkkj<J*u,KcOP=%#&VkXo)e=^/JHtcY@7.ff`Dj$.\$>QdYm6h+QEPRFdoK
%E@:!dTE`R3I+@<Z?@5;[0:&US]Z6m!\D_hK"%@3,6=$N]GeLfGK<;&J,o.D'0a,fEBf=LTn#k!&JG!=GO,HaB7i[3=B_gurOiZ9#
%4>T]!TQn=Ym?.iV0EoNV)5KK%>S4]"#c$Da17M+^gJ(9.$7)\=-'97^!]>_3ACJ@@GL:Lg+GId@1_p0Z-"Irg>0GiE(;=mJas8R.
%4-D*9_"ic26P!tKnYTB[;,348]8(AO-2Y+Qoi0AX!469mBP>kS,te[SY#nC1UYbejZcfAPQ9c[HY`?,Z@s2!r2S)#aK9_AtYlL6]
%G^kdd6p9H3l#-:=%I>LN<ASs12\8Q96:of$%:Ik*P`34Dl.1_5<RSKLVr!9Nl(^9U+1!QLiTg\ph1Tm@dULiI_M1l5,;0]js3R2#
%,7D&Gj;8-]1s+?"\-jtWW&<[gH&%kW9Dia571e]L0./@COf[/iYf.PP?7>VK:O`CumX)?Yfrs%^5O%T4jQC[fU8lK8h?2N?4-dck
%@*+=M`mFIcg;)Oi,i-q=g^etJXdtJt11riiS_K/?P5HB83:CN($'NBCl_K5b7(uD:Zk*dg(N%2#V'*Js]4$+#7Y'Q>F%F/<8f)pB
%[IQWaRpX8]8MQ:R=WenA"JcIT*kW'"Y%3R_6;mE3_O!h%Xh\=u->'%b!*=35U_$%nj'G8"J@3qL#m&C(BQ-:'I*[)Y$"8<HgZ9tX
%+Ws?l?mC@RWm^a('S;]N2%GGD&5GnmYtS1(8C0HtaU4je3h>Z='XC%jAGS,cT`pjccjh<O"GF/1+GBgFQH,2rAg.t6<f<TG&.f^-
%9i?e)Pq:T.X:W1K`P8ZEOG$SZ@3^.B//R[<gfP`@fb2KUW1qkcP8+..3S.eq;J:<<g*\BRUa`-VX:PtM"YQkf-Br+j`sPZeoNd3V
%6I^g+hpSlTcule$@tapR3SGU0Yes`+_Y.rpcJD\7;@&F/?SYjE3sBsk6V`Gll0YUqi.PdYh)5C2#XI;_iuj&!Lp99.$op(u$$jrc
%4?V)l_$U3YfnINTES34FaU1oDM`pADZk0$rG]PWb+kip0,W0$:85[ND&jnW3&qbfQ!g'kRZ+2A_Oef+l:r5pm*7#11,BSoZnj3^>
%H(c5aN!$Uo-SL/K8ujHo"=RFk8QH+Dl/"B<Z9gf%o+*o`LcS!LB!=U$+!8q,Hg"IpiL6hZ&#'cQ2@FalQmO=OkM^1/YsL/6*:0(,
%=WnpE\%uTO(J_liSek#HJX-fCE"hd0Y4[4QM>0WgSi1>nM(#?L?G[.8B49o6L7:^`@O-I02j*!(/b]WN_FRYM$c7oJ/S6-3=[)EB
%QS$oZLtIUZ/_].;QrNVhD'CSom?O]+RhaW9blgPP_3^D.&.LT9gkEHQ3"Z\3@TjrcDNDGY(8;BGT5!lFcSa\f(cU!BS)a76p6nJr
%%]#A1fLMHfG;,<qC;bsRl4TD5'+nH']o@OeT\*.H!`!iib9$at,"o^S5n,f9:V5$fEFa#qL=71U-c,tE>@[NsLc5@;/J/6!jdY-t
%S;<sgod/Tc]J<ZCM$PX*h),=8UtADF[_XanMe3lHn6K":INNM3Cac5o^knf9_($rE3'_Meqg]?rc).]U3)BnXX?beToHCiV`>^GY
%MR4tl5T=H29>HZ!o&96M-.oLeVHa1_#Y#GuZo5hLf`Og*30DCBqhQJi4u")j#<#jk=<c%JN/4fLn1khMPG/Y/0O&ZI+Xa"l<S8:2
%,1m@*WAWa)HnSC853,-$LF"Jp#H!r*=@/#fTN(>r+*%LK9K+OX#No>j>@J(+H;8WFZ,I]qa7:k/R"Ho8hG.oBB-L!m=[C%I4S?"%
%=@5j%BD7][O-gSXSA_o?*U%0D6;GH0m">'bj?Un9.nds?I$rcU=9?h6NL/<b%Lurl4+Zu1jR'C;,?Dt2FH&8B^;V`;-\B^Qa6+@\
%*^l6VLkCJ)H53b#<?&I!:O'(b9B6V8CJjb4b`ecY%i4PlJs>7lkM/?"o`.7gZR:nNq-$B9<@lsh\Z*UH;CefVGC2=RUmeRYiH<#D
%\R_=bnAucJLR6lF.VbeU6(ZW*^+n*p6.VlP,9-9K@S50gWZVR09*A.>>&nPEcuG\)o*^D<B-S7EI^tWlIM7\lfYoSZLL<>7nR/m^
%*f)/SZ,+",C.uS)^+,2($7:5-V&c[G"+cMhMA_mHL3HpQWs'<jH_7ZUk%21H-uT*q6!b`e(BkA&I5nVlK;p>l.8`5Acu4CnT>'U,
%H&6GqMTDWAR*'rU(LIX_FlmGePSggmHZtQ/q?at@&bGN,(oQVhH%V.OZ&,)A=sY/Pre_/&_igXL&#BoR"&#*Hn0X(J-Y:%tGU9ko
%Pa6YNb0@>+6](gH;M(`u0lH"E,gikJ]E\ZcmPc^jh[o-.pT:3AGVs=f-2"O39Wpj/k@Q[Bp)?!$Y46)(LPg'<eQ[R@GFil6"#82&
%^#In;<BR2tOV@NtA?)U>Y/0c)/gS.S/li5:6-aL_pg==Mj2!0NI=O!b>OaoEh:9;Aa2BV5:9O$u5'e2U#7$J.4)ie,cJK!!&6tbH
%IZHs9-QWi*48U'R+a)Ul]9XiA\QGJ0iA]hf4a;<rn\ppq3peTX>k=:rIu=9tQXB[fjn"s+gg.XAL#9'3r8$HF2i#R8Df5"smr.]"
%[1:OODVj4,hVB1.]srJ$"J)t2^\Gd7^\d3#BE&KoPHSK~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial -300 -170 4500 4 v 1050 118 a Fn(ma)n(y)27
b(exist)g(across)f(tissue)i(samples)e(purely)i(due)f(to)h(c)n(hanging)e
(prop)r(ortion)g(of)i(cellular)f(subt)n(yp)r(es)130 b
Fh(18)1047 217 y Fn(within)28 b(those)g(samples.)36 b(Ho)n(w)n(ev)n
(er,)25 b(a)j(single-cellular)e(p)r(ersp)r(ectiv)n(e,)h(of)g(the)h
(same)f(tumors)g(ma)n(y)171 b Fh(19)1050 317 y Fn(theoretically)27
b(filter)g(out)h(those)f(artificial)g(tissue-lev)n(el)g(correlations.)
35 b(And)28 b(so)f(correlation)323 b Fh(20)1050 417 y
Fn(based)27 b(analyses,)f(lik)n(e)h(co-expression)f(net)n(w)n(ork)g
(analysis,)g(require)h(study)-7 b(.)37 b(In)28 b(our)e(w)n(ork,)h(w)n
(e)275 b Fh(21)1050 516 y Fn(b)r(egin)28 b(this)g(journey)f(b)n(y)g(lo)
r(oking)g(at)g(net)n(w)n(ork)f(mining,)i(mo)r(dule)g(detection,)g(and)f
(gene)464 b Fh(22)1050 616 y Fn(enric)n(hmen)n(t)27 b(analysis)e(at)i
(b)r(oth)h(the)f(single-cell)g(and)f(p)r(opulation)h(of)g(cell)h
(\(tissue)f(sample\))g(lev)n(els.)105 b Fh(23)1047 716
y Fn(The)26 b(final)g(goal)f(of)h(this)g(w)n(ork)f(is)h(to)g(shed)g
(ligh)n(t)f(on)h(the)h(con)n(v)n(oluted)d(in)n(tricacies)h(of)h(in)n
(ter-cellular)119 b Fh(24)1050 815 y Fn(genomic)27 b(landscap)r(e)g(of)
g(glioblastoma)f(tissue)i(from)f(a)g(single-cellular)f(p)r(ersp)r
(ectiv)n(e.)540 b Fh(25)1793 1084 y
SDict begin H.S end
 1793 1084 a 1793
1084 a
SDict begin 12 H.A end
 1793 1084 a 1793 1084 a
SDict begin [/View [/XYZ H.V]/Dest (equation.0.1) cvn /DEST pdfmark
end
 1793 1084 a Ff(D)1862
1096 y Fe(coll)1994 1084 y Fn(=)2092 1015 y Ff(D)2161
1027 y Fe(f)2222 1015 y Fn(+)2355 975 y Fm([)p Fe(S)s
Fm(])2437 950 y Fd(2)p 2315 996 195 4 v 2315 1044 a Fe(K)2371
1052 y Fc(D)2422 1044 y Fe(S)2463 1052 y Fc(T)2519 1015
y Ff(D)2588 1027 y Fe(S)p 2092 1065 545 4 v 2185 1159
a Fn(1)18 b(+)2378 1119 y Fm([)p Fe(S)s Fm(])2460 1102
y Fd(2)p 2338 1140 195 4 v 2338 1188 a Fe(K)2394 1196
y Fc(D)2446 1188 y Fe(S)2487 1196 y Fc(T)2646 1084 y
Ff(;)c(D)2752 1096 y Fe(sm)2869 1084 y Fn(=)2966 1015
y Ff(D)3035 1027 y Fe(f)3097 1015 y Fn(+)3203 975 y Fm([)p
Fe(S)s Fm(])p 3190 996 108 4 v 3190 1044 a Fe(K)3246
1052 y Fc(D)3307 1015 y Ff(D)3376 1027 y Fe(S)p 2966
1065 458 4 v 3060 1159 a Fn(1)k(+)3226 1119 y Fm([)p
Fe(S)s Fm(])p 3213 1140 108 4 v 3213 1188 a Fe(K)3269
1196 y Fc(D)3434 1084 y Ff(;)637 b Fn(\(1\))1050 1413
y
SDict begin H.S end
 1050 1413 a 1050 1413 a
SDict begin 18 H.A end
 1050 1413 a 1050 1413 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 1050
1413 a Fi(Materials)47 b(and)d(Metho)t(ds)1898 b Fh(26)1046
1594 y Fn(W)-7 b(e)28 b(analyzed)e(t)n(w)n(o)h(glioma)g(datasets:)36
b(GSE57872,)25 b(the)j(data)f(presen)n(ted)g(in)h(Single-cell)417
b Fh(27)1050 1694 y Fn(RNA-seq)27 b(highligh)n(ts)g(in)n(tratumoral)g
(heterogeneit)n(y)f(in)i(primary)e(glioblastoma)g([)3706
1694 y
SDict begin H.S end
 3706 1694 a Fn(1)3747 1641 y
SDict begin H.R end
 3747 1641 a 3747
1694 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Patel20062014) cvn H.B /ANN pdfmark end
 3747 1694 a Fn(],)i(and)367 b Fh(28)1050 1794
y Fn(GSE48865,)25 b(the)j(data)f(presen)n(ted)g(in)h(RNA-seq)f(of)h
(272)e(gliomas)g(rev)n(ealed)h(a)g(no)n(v)n(el,)f(recurren)n(t)182
b Fh(29)1050 1893 y Fn(PTPRZ1-MET)25 b(fusion)j(transcript)f(in)g
(secondary)f(glioblastomas)g([)3274 1893 y
SDict begin H.S end
 3274 1893
a Fn(1)3315 1840 y
SDict begin H.R end
 3315 1840 a 3315 1893 a
SDict begin [/Color [0 1 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (cite.Patel20062014) cvn H.B /ANN pdfmark end
 3315 1893
a Fn(].)37 b(GSE57872)25 b(consists)i(of)148 b Fh(30)1050
1993 y Fn(single-cell)27 b(samples)g(whereas)f(GSE48865)f(consists)i
(of)g(more-traditional,)f(p)r(opulation-of-cell)191 b
Fh(31)1040 2093 y Fn(\(or)26 b(tissue\))h(samples.)36
b(After)27 b(prepro)r(cessing)e(eac)n(h)g(dataset)h(indep)r(enden)n
(tly)i(\(steps)f(explained)f(in)122 b Fh(32)1050 2192
y Fn(follo)n(wing)27 b(sections\),)g(w)n(e)g(step)h(eac)n(h)f(dataset)g
(through)g(a)g(co)r(expression-net)n(w)n(ork)d(analysis)314
b Fh(33)1047 2292 y Fn(w)n(orkflo)n(w.)35 b(This)28 b(w)n(orkflo)n(w)d
(has)i(a)h(n)n(um)n(b)r(er)f(of)h(parts:)36 b(correlation)25
b(calculation,)i(net)n(w)n(ork)344 b Fh(34)1050 2391
y Fn(construction,)27 b(mo)r(dule)h(detection,)g(and)f(enric)n(hmen)n
(t)g(analysis.)36 b(Necessary)26 b(v)-5 b(ariations)26
b(to)h(this)162 b Fh(35)1047 2491 y Fn(w)n(orkflo)n(w)26
b(p)r(er)h(dataset)g(are)g(explained)g(in)h(sections)f(to)h(follo)n(w.)
1233 b Fh(36)1050 2723 y
SDict begin H.S end
 1050 2723 a 1050 2723 a
SDict begin 14 H.A end
 1050
2723 a 1050 2723 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 1050 2723 a Fb(Single-Cell)39 b(Data)2471
b Fh(37)1050 2893 y
SDict begin H.S end
 1050 2893 a 1050 2893 a
SDict begin 14 H.A end
 1050 2893
a 1050 2893 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 1050 2893 a Fb(P)m(opulation)38 b(Data)2464
b Fh(38)1050 3047 y Fn(Nulla)28 b(mi)g(mi,)g(Fig.)1706
3047 y
SDict begin H.S end
 1706 3047 a Fn(1)1748 2993 y
SDict begin H.R end
 1748 2993 a 1748
3047 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (figure.caption.6) cvn H.B /ANN pdfmark end
 1748 3047 a 27 w Fn(v)n(enenatis)f(sed)h(ipsum)f(v)-5
b(arius,)27 b(v)n(olutpat)g(euismo)r(d)h(diam.)37 b(Proin)26
b(rutrum)144 b Fh(39)1048 3146 y Fn(v)n(el)27 b(massa)f(non)i(gra)n
(vida.)35 b(Quisque)27 b(temp)r(or)g(sem)h(et)f(dignissim)h(rutrum.)36
b(Lorem)27 b(ipsum)h(dolor)163 b Fh(40)1050 3246 y Fn(sit)28
b(amet,)f(consectetur)g(adipiscing)g(elit.)37 b(Morbi)27
b(at)h(justo)g(vitae)f(n)n(ulla)g(elemen)n(tum)h(commo)r(do)188
b Fh(41)1050 3345 y Fn(eu)28 b(id)g(massa.)35 b(In)28
b(vitae)f(diam)h(ac)f(augue)g(semp)r(er)g(tincidun)n(t)i(eu)e(ut)h
(eros.)36 b(F)-7 b(usce)28 b(fringilla)f(erat)183 b Fh(42)1050
3445 y Fn(p)r(orttitor)27 b(lectus)h(cursus,)1908 3445
y
SDict begin H.S end
 1908 3445 a Fn(S1)f(Video)2233 3387 y
SDict begin H.R end
 2233 3387 a 2233
3445 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section*.17) cvn H.B /ANN pdfmark end
 2233 3445 a 28 w Fn(v)n(el)g(sagittis)g(arcu)f(lob)r(ortis.)36
b(Aliquam)28 b(in)g(enim)g(semp)r(er,)209 b Fh(43)1050
3545 y Fn(aliquam)27 b(massa)f(id,)i(cursus)f(neque.)37
b(Praesen)n(t)26 b(faucibus)h(semp)r(er)h(lib)r(ero.)886
b Fh(44)1050 3611 y
SDict begin H.S end
 1050 3611 a 1050 3611 a
SDict begin 12 H.A end
 1050 3611
a 1050 3611 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.6) cvn /DEST pdfmark
end
 1050 3611 a 119 x Fl(Figure)31 b(1.)42
b(Figure)31 b(Title)g(first)g(b)s(old)g(sen)m(tence)g(Nulla)g(mi)g(mi,)
f(v)m(enenatis)i(sed)f(ipsum)1048 3830 y(v)-5 b(arius,)31
b(v)m(olutpat)h(euismo)s(d)e(diam.)36 b Fn(Figure)27
b(Caption)g(Proin)g(rutrum)g(v)n(el)g(massa)g(non)1050
3929 y(gra)n(vida.)35 b(Quisque)27 b(temp)r(or)g(sem)h(et)g(dignissim)f
(rutrum.)37 b(A:)28 b(Lorem)e(ipsum)i(dolor)f(sit)g(amet.)37
b(B:)1050 4029 y(Consectetur)27 b(adipiscing)g(elit.)1050
4217 y
SDict begin H.S end
 1050 4217 a 1050 4217 a
SDict begin 12 H.A end
 1050 4217 a 1050 4217
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 1050 4217 a 1151 4333 a Fn(1.)42 b(react)2883 b Fh(45)1050
4367 y
SDict begin H.S end
 1050 4367 a 1050 4367 a
SDict begin 12 H.A end
 1050 4367 a 1050 4367
a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 1050 4367 a 1151 4499 a Fn(2.)42 b(diffuse)28 b(free)f(particles)2336
b Fh(46)1050 4549 y
SDict begin H.S end
 1050 4549 a 1050 4549 a
SDict begin 12 H.A end
 1050 4549
a 1050 4549 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 1050 4549 a 1151 4666 a Fn(3.)42 b(incremen)n(t)27
b(time)h(b)n(y)f(dt)h(and)g(go)f(to)g(1)1853 b Fh(47)1050
4940 y
SDict begin H.S end
 1050 4940 a 1050 4940 a
SDict begin 18 H.A end
 1050 4940 a 1050 4940
a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 1050 4940 a Fi(Results)2841 b Fh(48)1050 5122 y Fn(Nulla)28
b(mi)g(mi,)g(v)n(enenatis)e(sed)i(ipsum)g(v)-5 b(arius,)27
b(T)-7 b(able)2784 5122 y
SDict begin H.S end
 2784 5122 a Fn(1)2826 5068
y
SDict begin H.R end
 2826 5068 a 2826 5122 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (table.caption.8) cvn H.B /ANN pdfmark end
 2826 5122 a 27 w Fn(v)n(olutpat)27
b(euismo)r(d)h(diam.)37 b(Proin)370 b Fh(49)1050 5222
y Fn(rutrum)27 b(v)n(el)h(massa)e(non)h(gra)n(vida.)35
b(Quisque)27 b(temp)r(or)h(sem)f(et)h(dignissim)f(rutrum.)37
b(Lorem)332 b Fh(50)p -300 5618 4500 17 v -300 5735 a
Fg(PLOS)4170 b Fn(2/)4159 5735 y
SDict begin H.S end
 4159 5735 a Fn(5)4200
5681 y
SDict begin H.R end
 4200 5681 a 4200 5735 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.5) cvn H.B /ANN pdfmark end
 4200 5735 a eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1042 -406 a
SDict begin H.S end
 1042 -406
a 1042 -406 a
SDict begin H.R end
 1042 -406 a 1042 -406 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 1042 -406 a -300
-203 a @beginspecial 0 @llx 0 @lly 216 @urx 35 @ury 1440
@rwi @setspecial
%%BeginDocument: PLOS-submission.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PLOS-Submission.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Richard Basset
%%CreationDate: 1/13/2015
%%BoundingBox: 0 0 216 35
%%HiResBoundingBox: 0 0 216 34.6541
%%CropBox: 0 0 216 34.6541
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-13T11:29:27-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-13T11:29:27-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-01-13T11:29:27-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J+btcm0Hytq+twWrX02&#xA;m2c91HZpUNK0MZcJUBiK08Dirzv8iPzqv/zB8t6vq+vWMGkR6TOsbXiOyWroycj8Up+Fo/2vi7jp&#xA;iqfzfnt+T0U7QP5t04upoSkvNK+zoGQ/OuKoz8sdB8paRod1/hbV5NZ03UL2e/N0959eVZLhuTIk&#xA;gLUA9zyJqWJJxV5J+V//ADlDrvnD81l8qXehw22lXr3Edi8fq/WoDBG8lbgsxRqiOh4ovE+OKve9&#xA;b17RNB059S1q+g06wjKq91cyLFGCxoo5MQKk9MVY0Pzr/KMmn+L9K/6Sov64qyjSda0bWLQXmkX9&#xA;vqNmxoLm0lSeMkducZZcVS3zH598leWp4YPMGt2Wlz3Cl4YrqdInZAaFgrGtK7VxVObW6tru2iur&#xA;WVJ7adFkgnjYOjo4qrKwqCCDUEYqq4qlPmDzd5V8uxLLr2r2elpJ/dm7njhL/wCoHILfRiqXaD+a&#xA;H5da/cra6P5k069u3/u7WO4j9Zt6fDGSHP0DFWT4qlPmPzd5X8s2gu/MGq2ul27VEb3UqxlyOoRS&#xA;eTn2UHFUm0P83vyw129Wx0rzNp9zeSGkVv6ypI5PZFfiXPsuKsvxVjfmnzVcaLrXlfT4oElTX9Qe&#xA;xmdiQY1W1muOS06msIG+KskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ8l/mx5G85WGqahoWo&#xA;etaaM5W/lkjeIIoUsJPjAqjKjEH2xV4pceXbv86dK1Tzj5n1e48s/lhprTvoemWqqhlhtuXq30/I&#xA;Fa1U0+E9wKUqyqSeTvyw1fStN078wtc8pWfm3y5Pb1i0IW8EWoWWnl2eG5+rQpFaXcrxMHkDKXO1&#xA;CN6KpJ5L03U9H81eePMX5S6q09j5eNpqcGlAl7a+0y7jaeW1kRvi9W3X4RUc6hhs4FVX09+Xf+Av&#xA;MGmW3n3y9pFna3euw+pcXsUESXJcsRNHLKqhmZZVIffcjFXmX/Oav/krNK/7blv/ANQd3ir5i/Ln&#xA;8m/O35hwX83luKCVNOaNLn15liNZQxXjXr9g4qq+UfNXnX8oPzBbkslpeafOINa0pmBjniB+ONwC&#xA;UaqmqOOmzDFWZ/8AOX9zDdfmlZ3UDcoZ9GtJYm8Vd5WU/ccVfUv5A/8AkmvKf/MCv/EmxVLf+cgv&#xA;zf8A+Vb+UEmsQknmHVWaDSo3HJU4gGWdh3EYYUHdiO1cVfG/lfyN+Zv5ta/d3Vkk2q3ZblqGrXkn&#xA;GKMtuA8r/wDCooJp0FMVTPz7/wA47/mf5H0o6zqVpDc6bDQ3F5YS+sIKmgMilUdRX9rjT3xV7L/z&#xA;it+e+r6rqK+Q/NF095O8bPoeoTHlKfSUs9vK53f4FLIx32IJPw0VeBfmL5o1nz/+Zd7d3d0K3l8b&#xA;TT1nfhDbwer6cKVOyIq0LmnWrHfFWX+bf+cUfzZ0FIZbO2g1+GYhS2mOzOhP86SrE1P8oVHjTFX2&#xA;L+Vmh+YdC/L3QtK8xXb3us2tqq3kshDMrElhDyFeXoqRHyrvxriqVfmT/wApf+XP/bcl/wC6bdYq&#xA;z/FWAeY/z3/K/wAvaxLo+o6vS+t39O6SGGaZYmHUO8aMtR0IUkg7HFaTq8/MfyhaT+XoXvvUPmli&#xA;uiSRI8iTU4ftKCF/vl+1TFUTc+dfL1t5vtPKM07Lrt7bG8t7cRuVMKlwWMgHAf3LbE4qwqL/AJyW&#xA;/J55AjaxJGD+29pc0Hz4xsfwxTTIPNP5u+QvLFjpd/qmo/6HrSPLps8Eck6SpGELMDGGp/er1xQq&#xA;+bvzT8leUrjT7fW74wzampezWOKSbkoIHImMNQEttXFUTF+YXlKTWda0g3oiu/L0Qn1Yyq0cUMRU&#xA;NyMjAIRQ9jiqQaJ+fn5V61rMOkWOsVvLlxFberBPFHI5NFVXkRQC3blSuK0ivN/50/lz5S1Q6VrO&#xA;qcNRUK0ttDFLM0YcVXmY1ZVJG9Ca03pitIu7/NXyLbaJpeuHUhNpes3C2mn3EMcjh5mr8DKF5IRx&#xA;NeQFO+KqXnL83/y+8nXqWGu6oIb91D/VIo5J5FU9GcRqwSvbkQT2xVEWX5oeR7/ypd+arHUludGs&#xA;FLXksaP6kVKVV4iokB3/AJd+2Krrr8zPJtt5Lj86PelvL0oQpdJG7mrv6VDGBzBD/CRTbFWK/mh5&#xA;U8v+U/yc87jytpkGlG9sppLsWkYTnzHByePYIzbdAMVSHzLFbN+RHkHyvZMIrPzTJoOjySRnf0Ll&#xA;UnuCCKV5xxPXxqcVeneTLvzfPHqcXmLSbbSYrS8kg0ZLWb1hLYoAIpGFPhJHy/1V7qvmzRPzDXyT&#xA;+bvnbzXa2UVx5V1XVptDksLXiLmW+t4meN7ePq4eYFXI2/eAntirNP8AnG3zRb+W/wAlde1nzCPq&#xA;Wm6Rq96SkSmQRx8YSUjROR/vpGUf5nFUN/zmBqlhq35MeX9U0+X17G+1e0uLWYArzilsrpkajAEV&#xA;B7jFXzn+WX51ecfy4t9Qg8vJaMmpNG9wbqJpSDCGC8eLpT7ZxVT8t+XvO35v/mG1S93qOpzibVdR&#xA;4Uit4js0j8QFVVRaIvfZRirNf+cvbWG0/NGytIBxht9Gs4ol8FR5VUfcMVfU35A/+Sa8p/8AMCv/&#xA;ABJsVfOn/ObU12fzA0OBv95E0kPDvt6j3Mok2/1UTFXun/OL1hpNr+SugyaeF5Xf1ie9kAAZ7j13&#xA;R+dO6hAg/wAkDFXqN1bW11azW11Gs1tOjRzxSAMjxuCrKwOxBBocVfnV+WhjtPzs8tppUjNbJ5gt&#xA;YreRTyLW7XaoTXuGiO58MVem/n9/zjZ5o03zDqHmbylZPqmhX8r3U1nbAvc2skh5SL6Q+J4uRJUo&#xA;DxGxG1Sqwj8vP+cg/wAzPIU0Vkl4+o6Tbt6cmjahydUVTQpE5/eQkb0APEHqpxV9wfl3580fz15S&#xA;svMmlckgugVlt3IMkMyHjJE9O6noe4oe+KpJ+ZP/ACl/5c/9tyX/ALpt1irP8VfMV5aXfq+dta8g&#xA;6/pt7oNzcTzeZPLOtw+i3qbvKo9YBmHItxIdN9q1GKVt95g0q/i/JHWorGLQ9MTULxZYFLC2hZbq&#xA;BXKvJ0RmRmFTt0rtirNNWura8/5yn8vNaSpcLbaFIlwYmDiNq3Ro/GvE0kXr4jxxV5X+X9l+YV3+&#xA;TGuxaTq+kWvl52u/rljfCly9IkMpR2VlWq04Hx7jriqI80WVh5t8l/lLpml28tulzb6xaQQytzf6&#xA;zCIkDcwEDBpk5bAeGKsS1bWL/wA4WNhrt0GEXlq30fQ46nZpGMrGT3J9Jq/7WKXq12+gL+Yv5wDz&#xA;BNJb6PLYW0N1cQo8rxiZYo1cIlWPF3B/XtihIri81nyrpXlKfWLnRfPHkgXEMeiIE9K/gR15BkRQ&#xA;sistNwxfeitvTFWS65p9zdfmR5r1P8u/Mtja6sFEPmbQtZh4RSekCj+nJMjh424VPGgH81CMVYnq&#xA;WvafrP5V+T5rPSoNINv5rS3ube05C3eZY+RliDlyAyuv7R3rirOPyrn8vQ/m9+Y48yPbx6+2oOdO&#xA;a+KCQ2XOX+5L/s+iY60/Zp2xVh9++lyar+cr+WPTPlY6bBva8fqxuax1KcPhpz9enHbFWJ+YJNc8&#xA;nfl1/ha853Og+b7HTdc0e4ptFckQy3MX9R7If2jil9V+Z9WF3r1v5Hu9Bvb3SfMFhdi+1eNV+qQp&#xA;x4NFKxNQXVvvK05VPFYvk7Xbzz9+Wt3ZeUNe1lRa+WNYtdX8rR39q8tpcQI7RCWO4iZZeEazlpIe&#xA;1DxIIoVXq/5oefvzh8t+X7a4l80aDFrGq+nHoelaDYS3dxePM1EeM3U0o4UI+PgR2AJO6rA9e8ie&#xA;TPLHkq08k6Varr/51eYTb/WJ7aQzzWMwuEuJHMgbjb+mF48hRmHxN8NcVfSf5afl/ZeTfy/07yo3&#xA;C6EMLDUHZapPNOS05KtWqlmIAP7NBiry3/nNNVX8qtJVQFVdctwqjYACzuthirz/AP5xE/L7yX5q&#xA;sfMk/mPR7fVJLKe0FqbheYQOspYAVpQ8RWuKvrDQ/LugaDZiy0TTbbTLQb+haQpChPiQgWp9zir4&#xA;w/5zJ/8AJuQ/9sq2/wCTs2Kpr5A/5y8/wj5N0ny3/hP67+i4BB9b/SHpepQk8vT+rScevTkcVTfz&#xA;zPN/zkN+XMvmjQNFksfMvlK4eKTTRKLg3NrMiuyxOEiLOvHkqlfECpYYq8v/ACg/PzzZ+WLT2ENu&#xA;mpaJPIZLjSrhmjKS04s8UgDGNjxAaqsNuld8VZb+ZH/OXnmjzToM+i6JpSeXoLxDFeXIuDc3DRts&#xA;yRv6cAjDDYniTToRiqN/5xK/KLUtT8zQ+e9Tt2h0XSuR0wyAj6zdMpTkgPVIQSeX81AK0aiqtrX/&#xA;ADl3570r8ytUK2kVx5YtriS1i0OeMQyhIWKep6wX1UlfjUhuSjpx74q82/PL80dD/MbzLbazpmhD&#xA;R5IoPSu5mZWmuXrVWk4BV+AfCp606mgACr6d/wCcQPL+raT+U5uL9Wji1e/lvrGJhQ+gY44Q++/x&#xA;mEke1COuKsw/Mn/lL/y5/wC25L/3TbrFWf4qwLzD+Rf5XeYNYk1fUtFVr6dudy8M00CysdyzpE6L&#xA;yPcgVPfFbTvWfy78laz5dg8uahpMEmjWvH6raoDEIStQDE0ZVkO5qQd++KobyX+VvkXyZLLP5e0t&#xA;bW6nT05rp3kmlKVrxDys/FagVC0BoK4qkI/5xx/JkEEeXenjeXx/XPim2Uyfl/5OebQ5v0ZHG/lo&#xA;udEWJpIktzLx50SNlRuXAfbB/XihLF/Jv8tl0y40xdGVbG6vF1GeET3I5XMYIR+Qk5AAMaKDx9sV&#xA;TNPIHlBNV1jVf0aj3uvxCDV3keSRJ4goXg0Ts0YHEU+FRirH9G/Ib8qtH1mLV7HRFF3A/qW4lmnm&#xA;jjcdGWOR2Wo6ioNO2K2ivNv5Mflx5r1M6prWkiXUGCiW5illgaQKKD1PSZA2wpUitO+K2jbj8rvI&#xA;U+jabor6RGumaROt1p9tFJLEI51rSQtG6s7bmvMmvfFVDzj+UX5fecLtb3XdKWa+VQv1uJ5IJWUd&#xA;A7RMnOnblWnbFUVZflp5GsfLF15Xs9Jjg0O9BF5bRvIGlrTd5uXrMdhuXrirtb/LTyRrnl7T/L2q&#xA;6WtzpOlLGmnwGSZWiWGP0kCyo6y/Y2NW371xVk2KvMv+ch9a8m6J+XkuoeavL6eZLT6xHBbWDt6R&#xA;E0oPxicBnhoqt8SCvbvirzf8svyE/J/z55X07zlYQ6xpIuvUUWAvg/omF2heNJTHzZPhNDUGh7Yq&#xA;yDzjpd/+TVpokX5S+RItVk1Od4dXuzFcXdwETgY0aVG9RfVLMQzHgvH7O+KvdELFFLDixAJWtaHw&#xA;rirHfPv5f+WPPeg/oTzFbtcWQmS4iMbtG8csYKh0Ze/F2X5E4qhfy7/K7yf+X1hdWXlu2eFL2QS3&#xA;Us0jSyOyjioLN2UE0A8cVZbirz/8wvyK/Lzz9qsGq+YLWY6hBD9XE9vM0RaMMWVXAqDxLGh98VYr&#xA;/wBChfk3/wAs19/0lt/TFXoP5e/lp5S8gaXPpvlu2eGG5l9e4klkaWR3oFFWbsAKADFUp87fkP8A&#xA;ld5yumvtY0ZF1GQ1kv7RmtpnPcyGMhZCfF1JxVIvL/8Aziv+TWj3SXTaXLqcsZqi6hO0sdQa7xL6&#xA;cb+FGUjFXrMEEFvCkEEaxQxKEjiQBVVVFAqqNgBirBfPn5G/lp54na71vSVXUmFDqVqxt7g0FBzZ&#xA;Phkp25q2Ksb8v/8AOKH5PaPqEd69lc6o8RDRw6hP6kIYGoJjRYlf5PUe2KvX4444o1jjUJGgCoig&#xA;BVUCgAA6AYqxPzr5e1XVPMXky9sow9vo+qSXd+xZVKRNZTwggEgt8cqigxVl2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KpP5u/wl/h+6/wAW/Uv0DQfW/wBJen9W6/Dy9X4a8qce9em+Kq3lz/Dv&#xA;6Ds/8OfVf0H6Y+ofUPT+renU/wB16XwUrXpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.805556</stDim:w>
            <stDim:h>17.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">rough-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:54570bd4-44fc-4daa-af13-191c026bfe24</stRef:instanceID>
            <stRef:documentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEE5A5CD5E72E311A5DAE32040218A44</stEvt:instanceID>
                  <stEvt:when>2014-01-02T13:33:25-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</stEvt:instanceID>
                  <stEvt:when>2015-01-13T11:29:27-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -34.654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 34.654 li
216 34.654 li
216 0 li
cp
clp
21.6844 2.60761 mo
22.4047 2.60761 22.9888 2.02407 22.9888 1.30352 cv
22.9888 .583607 22.4047 0 21.6844 0 cv
20.9648 0 20.3806 .583607 20.3806 1.30352 cv
20.3806 2.02407 20.9648 2.60761 21.6844 2.60761 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
33.4875 18.1845 mo
32.7669 18.1845 32.184 18.7681 32.184 19.4881 cv
32.184 20.2086 32.7669 20.7922 33.4875 20.7922 cv
34.2081 20.7922 34.791 20.2086 34.791 19.4881 cv
34.791 18.7681 34.2081 18.1845 33.4875 18.1845 cv
cp
f
25.355 29.5761 mo
24.4266 29.5761 23.6747 30.3283 23.6747 31.257 cv
23.6747 32.1858 24.4266 32.9383 25.355 32.9383 cv
26.2842 32.9383 27.037 32.1858 27.037 31.257 cv
27.037 30.3283 26.2842 29.5761 25.355 29.5761 cv
cp
f
15.1998 16.0573 mo
14.498 16.0573 13.9303 16.6255 13.9303 17.327 cv
13.9303 18.0282 14.498 18.5964 15.1998 18.5964 cv
15.9013 18.5964 16.4689 18.0282 16.4689 17.327 cv
16.4689 16.6255 15.9013 16.0573 15.1998 16.0573 cv
cp
f
3.1565 13.1063 mo
3.1565 12.2349 2.45011 11.5282 1.57809 11.5282 cv
.70677 11.5282 0 12.2349 0 13.1063 cv
0 13.9786 .70677 14.685 1.57809 14.685 cv
2.45011 14.685 3.1565 13.9786 3.1565 13.1063 cv
cp
f
3.91145 23.8113 mo
3.19154 23.8113 2.60768 24.395 2.60768 25.1149 cv
2.60768 25.8357 3.19154 26.419 3.91145 26.419 cv
4.632 26.419 5.21554 25.8357 5.21554 25.1149 cv
5.21554 24.395 4.632 23.8113 3.91145 23.8113 cv
cp
f
7.78818 6.86214 mo
8.90709 6.86214 9.81282 5.95609 9.81282 4.83782 cv
9.81282 3.71979 8.90709 2.81343 7.78818 2.81343 cv
6.67016 2.81343 5.76411 3.71979 5.76411 4.83782 cv
5.76411 5.95609 6.67016 6.86214 7.78818 6.86214 cv
cp
f
29.6443 2.67612 mo
28.2797 2.67612 27.1742 3.78213 27.1742 5.14648 cv
27.1742 6.51139 28.2797 7.61709 29.6443 7.61709 cv
31.0095 7.61709 32.1149 6.51139 32.1149 5.14648 cv
32.1149 3.78213 31.0095 2.67612 29.6443 2.67612 cv
cp
f
13.2783 30.4683 mo
12.1219 30.4683 11.1855 31.4045 11.1855 32.5606 cv
11.1855 33.7166 12.1219 34.654 13.2783 34.654 cv
14.4347 34.654 15.3712 33.7166 15.3712 32.5606 cv
15.3712 31.4045 14.4347 30.4683 13.2783 30.4683 cv
cp
f
18.3194 27.6162 mo
18.8034 27.2154 20.5164 25.6351 21.9182 22.3404 cv
23.3537 21.7262 24.4447 21.1135 25.2761 20.5363 cv
25.7488 22.2099 25.5369 23.362 25.2982 24.0092 cv
23.5878 26.032 21.1104 27.3846 18.3194 27.6162 cv
cp
8.91382 23.0564 mo
9.694 23.449 10.5398 23.7048 11.3998 23.8636 cv
11.5669 24.6206 11.8071 25.3925 12.1395 26.1616 cv
10.8501 25.3754 9.74835 24.3123 8.91382 23.0564 cv
cp
10.323 10.0407 mo
11.6741 9.16813 13.1957 9.18014 14.6654 9.6221 cv
13.6346 11.0175 12.5728 12.9749 11.8713 15.6458 cv
11.8713 15.6458 10.6909 18.8385 11.1931 22.6841 cv
8.32568 22.0502 7.68528 20.4494 7.68528 20.4494 cv
7.68528 20.4494 7.67855 20.4479 7.66842 20.4466 cv
7.36768 19.4825 7.20552 18.4576 7.20552 17.3955 cv
7.20552 14.513 8.40217 11.906 10.323 10.0407 cv
cp
23.3316 17.6354 mo
23.3316 17.6354 23.3955 17.3439 23.4741 16.8534 cv
24.097 17.7788 24.5476 18.6204 24.8652 19.3781 cv
24.093 19.9697 23.2475 20.4734 22.475 20.8779 cv
22.803 19.9159 23.0976 18.8388 23.3316 17.6354 cv
cp
19.969 7.47977 mo
19.7452 7.39593 li
19.8216 7.41316 19.8987 7.42945 19.9746 7.44907 cv
19.9709 7.46845 19.969 7.47977 19.969 7.47977 cv
19.969 7.47977 22.1258 8.60176 22.0856 13.2301 cv
21.8365 12.9739 21.6844 12.8323 21.6844 12.8323 cv
19.8468 10.9397 18.0433 9.81622 16.5386 9.14725 cv
17.487 8.19051 18.6241 7.53142 19.969 7.47977 cv
cp
15.404 8.70348 mo
14.2528 8.3143 13.3837 8.2068 12.9675 8.1773 cv
14.2086 7.56916 15.5889 7.20615 17.0475 7.14777 cv
16.6188 7.47549 16.0379 7.98199 15.404 8.70348 cv
cp
19.9003 22.0275 mo
16.5828 22.8949 14.1445 23.0552 12.3584 22.8709 cv
12.1788 21.502 12.1895 19.747 12.5578 17.4987 cv
12.5578 17.4987 13.5031 13.004 15.7729 10.0346 cv
18.7605 11.3574 21.2729 14.067 21.2729 14.067 cv
21.5256 14.3468 21.7593 14.6187 21.9845 14.8874 cv
21.8835 15.8435 21.7013 16.9127 21.4102 18.116 cv
21.4102 18.116 21.0477 19.9061 20.181 21.9228 cv
20.0044 21.991 19.9003 22.0275 19.9003 22.0275 cv
cp
17.2644 27.6494 mo
16.8356 27.6414 16.4139 27.6076 15.9993 27.5483 cv
17.2644 27.6494 li
cp
15.0916 27.3748 mo
14.8318 27.3127 14.5745 27.2418 14.322 27.1604 cv
13.8247 26.7528 13.0191 25.8419 12.5706 24.0227 cv
15.8991 24.3203 19.0765 23.4001 19.0765 23.4001 cv
19.2393 23.3473 19.3928 23.2935 19.5495 23.2404 cv
18.551 25.1084 17.1019 26.8827 15.0916 27.3748 cv
cp
27.7056 17.9791 mo
27.6291 19.3357 27.2873 20.6226 26.7326 21.7895 cv
26.657 21.0962 26.4985 20.415 26.2786 19.7565 cv
27.0818 19.0458 27.4943 18.4269 27.7056 17.9791 cv
cp
27.5625 15.6003 mo
27.4489 15.0972 li
27.5348 16.4081 26.8259 17.578 25.8124 18.5663 cv
25.2113 17.2364 24.4195 16.0425 23.6888 15.0923 cv
23.8461 13.2347 23.8322 10.7121 22.988 8.75782 cv
25.3517 10.2751 27.0541 12.7328 27.5625 15.6003 cv
cp
17.4643 5.49018 mo
10.8888 5.49018 5.55836 10.8199 5.55836 17.3955 cv
5.55836 23.9711 10.8888 29.3015 17.4643 29.3015 cv
24.0402 29.3015 29.3697 23.9711 29.3697 17.3955 cv
29.3697 10.8199 24.0402 5.49018 17.4643 5.49018 cv
cp
f
110.132 20.0839 mo
109.476 17.8999 107.385 16.464 105.444 15.5069 cv
104.722 15.1506 103.926 14.9347 103.221 14.5548 cv
102.655 14.2507 102.02 13.9737 101.488 13.6165 cv
100.768 13.1327 100.389 12.7669 100.493 11.8821 cv
100.627 10.7404 101.955 10.3604 102.921 10.6292 cv
103.579 10.8123 104.163 11.0294 104.785 11.3163 cv
105.32 11.5635 105.879 12.1382 106.422 12.3007 cv
107.076 12.4963 107.579 12.2666 108.124 11.9253 cv
108.627 11.6111 109.792 9.59291 109.766 9.00107 cv
109.736 8.32656 109.2 7.78818 108.652 7.45889 cv
107.653 6.85723 106.586 6.2718 105.461 5.9493 cv
103.245 5.31568 100.8 5.33047 98.6792 6.29054 cv
97.0625 7.02216 95.754 8.45162 95.1944 10.1356 cv
95.0218 10.6584 94.9444 11.257 94.8682 11.8013 cv
94.5402 14.1607 95.9954 16.4713 97.826 17.8304 cv
98.6706 18.4576 99.6099 18.9361 100.568 19.363 cv
101.504 19.7798 102.512 20.1067 103.344 20.7206 cv
103.949 21.1681 105.113 22.2996 104.365 23.2462 cv
104.105 23.5859 103.585 23.9862 103.223 24.0998 cv
101.317 24.6963 99.6406 23.0198 98.1178 22.2339 cv
96.9482 21.6295 96.2682 22.6617 95.7577 23.5543 cv
95.2134 24.5074 94.3916 25.6346 95.3977 26.6294 cv
95.7995 27.064 96.1994 27.3331 96.6613 27.5871 cv
98.1061 28.3798 99.643 29.0014 101.299 29.197 cv
102.727 29.3663 104.352 29.2545 105.709 28.7533 cv
106.887 28.3192 107.699 27.7631 108.607 26.9012 cv
109.527 26.0258 110.048 24.8182 110.417 23.6243 cv
110.731 22.6074 110.43 21.0806 110.132 20.0839 cv
cp
f
69.1452 23.7769 mo
61.863 23.7769 li
61.863 7.01693 li
61.863 6.37257 61.3408 5.84979 60.6958 5.84979 cv
57.5397 5.84979 li
56.8947 5.84979 56.3725 6.37257 56.3725 7.01693 cv
56.3725 27.7913 li
56.3725 28.4357 56.8947 28.9584 57.5397 28.9584 cv
69.1452 28.9502 li
69.789 28.9502 70.3117 28.4277 70.3117 27.783 cv
70.3117 24.9441 li
70.3117 24.2997 69.789 23.7769 69.1452 23.7769 cv
cp
f
46.0938 15.9547 mo
43.6096 15.9547 li
43.6096 11.2177 li
46.197 11.2196 li
47.8887 11.2196 48.9354 12.4705 48.9354 13.6297 cv
48.9354 14.912 47.6608 15.9547 46.0938 15.9547 cv
cp
46.1982 5.86734 mo
46.1982 5.86734 42.4916 5.84979 42.4425 5.84979 cv
39.2866 5.84979 li
38.6416 5.84979 38.1186 6.37257 38.1186 7.01693 cv
38.1186 27.7913 li
38.1186 28.4357 38.6416 28.9584 39.2866 28.9584 cv
42.4425 28.9584 li
43.0869 28.9584 43.6096 28.4357 43.6096 27.7913 cv
43.6096 21.3066 li
46.0938 21.3066 li
50.6124 21.3066 54.2883 17.863 54.2883 13.6297 cv
54.2883 9.34967 50.6579 5.86734 46.1982 5.86734 cv
cp
f
81.9155 10.9726 mo
78.3668 10.9726 75.4803 13.8594 75.4803 17.4078 cv
75.4803 20.9562 78.3668 23.8427 81.9155 23.8427 cv
85.463 23.8427 88.3501 20.9562 88.3501 17.4078 cv
88.3501 13.8594 85.463 10.9726 81.9155 10.9726 cv
cp
81.9155 29.1289 mo
75.4527 29.1289 70.1938 23.8707 70.1938 17.4078 cv
70.1938 10.9446 75.4527 5.68674 81.9155 5.68674 cv
88.3777 5.68674 93.636 10.9446 93.636 17.4078 cv
93.636 23.8707 88.3777 29.1289 81.9155 29.1289 cv
cp
f
119.955 31.7399 mo
118.848 31.7399 li
118.848 3.04441 li
119.955 3.04441 li
119.955 31.7399 li
cp
f
128.593 18.5605 mo
130.57 18.3682 li
130.689 19.032 130.93 19.5191 131.294 19.8302 cv
131.657 20.1416 132.148 20.2971 132.766 20.2971 cv
133.42 20.2971 133.914 20.1588 134.245 19.8818 cv
134.577 19.6051 134.743 19.281 134.743 18.9106 cv
134.743 18.6726 134.673 18.4702 134.534 18.3031 cv
134.394 18.136 134.15 17.9907 133.803 17.8673 cv
133.565 17.7847 133.022 17.6385 132.176 17.4278 cv
131.087 17.1578 130.323 16.8261 129.883 16.4326 cv
129.265 15.8789 128.956 15.2041 128.956 14.4077 cv
128.956 13.8953 129.102 13.4159 129.393 12.9696 cv
129.683 12.5237 130.102 12.1837 130.649 11.9502 cv
131.196 11.7171 131.855 11.6004 132.629 11.6004 cv
133.892 11.6004 134.843 11.8771 135.481 12.4309 cv
136.119 12.9847 136.454 13.7236 136.486 14.6478 cv
134.455 14.7372 li
134.368 14.22 134.181 13.8483 133.895 13.6217 cv
133.609 13.3953 133.18 13.282 132.608 13.282 cv
132.018 13.282 131.556 13.4033 131.222 13.6456 cv
131.006 13.8014 130.899 14.0096 130.899 14.2704 cv
130.899 14.5084 131 14.712 131.201 14.8813 cv
131.457 15.0966 132.079 15.3205 133.068 15.5539 cv
134.057 15.7873 134.788 16.0287 135.261 16.2781 cv
135.735 16.5275 136.105 16.8685 136.373 17.3009 cv
136.641 17.7334 136.774 18.2678 136.774 18.9036 cv
136.774 19.4804 136.615 20.0203 136.294 20.5234 cv
135.974 21.0271 135.521 21.4012 134.935 21.6457 cv
134.349 21.8905 133.619 22.0131 132.745 22.0131 cv
131.473 22.0131 130.496 21.7191 129.815 21.1309 cv
129.133 20.5431 128.726 19.6862 128.593 18.5605 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
138.47 11.7718 mo
140.502 11.7718 li
140.502 17.222 li
140.502 18.0869 140.527 18.6474 140.577 18.9036 cv
140.664 19.3154 140.872 19.6462 141.198 19.8956 cv
141.526 20.145 141.973 20.2697 142.541 20.2697 cv
143.117 20.2697 143.552 20.1518 143.845 19.9162 cv
144.138 19.6803 144.313 19.391 144.373 19.0479 cv
144.433 18.7045 144.463 18.1348 144.463 17.3387 cv
144.463 11.7718 li
146.494 11.7718 li
146.494 17.0573 li
146.494 18.2653 146.44 19.1189 146.33 19.6174 cv
146.22 20.1165 146.018 20.5372 145.722 20.8806 cv
145.427 21.2237 145.032 21.4971 144.538 21.7007 cv
144.044 21.9043 143.399 22.0063 142.602 22.0063 cv
141.641 22.0063 140.913 21.8951 140.416 21.6734 cv
139.92 21.4513 139.527 21.1632 139.239 20.8085 cv
138.951 20.4537 138.761 20.0821 138.669 19.6929 cv
138.537 19.1164 138.47 18.2653 138.47 17.1397 cv
138.47 11.7718 li
cp
f
150.674 17.4483 mo
150.674 20.1392 li
152.555 20.1392 li
153.287 20.1392 153.751 20.1186 153.948 20.0775 cv
154.25 20.0225 154.496 19.8886 154.686 19.6757 cv
154.876 19.4632 154.971 19.1782 154.971 18.8213 cv
154.971 18.5193 154.898 18.2632 154.751 18.0525 cv
154.605 17.8421 154.393 17.6888 154.117 17.5927 cv
153.84 17.4966 153.239 17.4483 152.314 17.4483 cv
150.674 17.4483 li
cp
150.674 13.4466 mo
150.674 15.7735 li
152.006 15.7735 li
152.797 15.7735 153.289 15.7621 153.482 15.7394 cv
153.829 15.6983 154.103 15.5782 154.302 15.3788 cv
154.501 15.1798 154.6 14.9181 154.6 14.5932 cv
154.6 14.282 154.515 14.0289 154.343 13.8345 cv
154.171 13.6401 153.917 13.5222 153.577 13.481 cv
153.376 13.4583 152.797 13.4466 151.841 13.4466 cv
150.674 13.4466 li
cp
148.642 11.7718 mo
152.665 11.7718 li
153.461 11.7718 154.055 11.8053 154.446 11.8713 cv
154.837 11.9379 155.187 12.0762 155.496 12.2865 cv
155.805 12.4972 156.062 12.7774 156.269 13.1275 cv
156.474 13.4776 156.577 13.8702 156.577 14.3048 cv
156.577 14.7762 156.45 15.2087 156.196 15.6021 cv
155.942 15.9956 155.598 16.2907 155.164 16.4876 cv
155.777 16.6661 156.248 16.9704 156.577 17.4004 cv
156.907 17.8307 157.071 18.3363 157.071 18.9174 cv
157.071 19.375 156.965 19.8201 156.752 20.2525 cv
156.54 20.685 156.249 21.0305 155.88 21.2888 cv
155.512 21.5474 155.058 21.7065 154.518 21.7661 cv
154.179 21.8027 153.362 21.8254 152.068 21.8346 cv
148.642 21.8346 li
148.642 11.7718 li
cp
f
158.76 21.8346 mo
158.76 11.7718 li
161.801 11.7718 li
163.627 18.636 li
165.432 11.7718 li
168.48 11.7718 li
168.48 21.8346 li
166.592 21.8346 li
166.592 13.9135 li
164.595 21.8346 li
162.639 21.8346 li
160.648 13.9135 li
160.648 21.8346 li
158.76 21.8346 li
cp
f
170.436 21.8346 mo
170.436 11.7718 li
172.468 11.7718 li
172.468 21.8346 li
170.436 21.8346 li
cp
f
173.889 18.5605 mo
175.865 18.3682 li
175.985 19.032 176.226 19.5191 176.59 19.8302 cv
176.953 20.1416 177.444 20.2971 178.062 20.2971 cv
178.716 20.2971 179.21 20.1588 179.541 19.8818 cv
179.873 19.6051 180.039 19.281 180.039 18.9106 cv
180.039 18.6726 179.969 18.4702 179.829 18.3031 cv
179.69 18.136 179.446 17.9907 179.098 17.8673 cv
178.861 17.7847 178.318 17.6385 177.472 17.4278 cv
176.383 17.1578 175.618 16.8261 175.179 16.4326 cv
174.561 15.8789 174.252 15.2041 174.252 14.4077 cv
174.252 13.8953 174.398 13.4159 174.688 12.9696 cv
174.979 12.5237 175.397 12.1837 175.945 11.9502 cv
176.491 11.7171 177.151 11.6004 177.924 11.6004 cv
179.187 11.6004 180.138 11.8771 180.777 12.4309 cv
181.415 12.9847 181.75 13.7236 181.782 14.6478 cv
179.751 14.7372 li
179.663 14.22 179.477 13.8483 179.191 13.6217 cv
178.905 13.3953 178.476 13.282 177.904 13.282 cv
177.314 13.282 176.851 13.4033 176.518 13.6456 cv
176.302 13.8014 176.195 14.0096 176.195 14.2704 cv
176.195 14.5084 176.295 14.712 176.497 14.8813 cv
176.753 15.0966 177.375 15.3205 178.364 15.5539 cv
179.353 15.7873 180.084 16.0287 180.557 16.2781 cv
181.031 16.5275 181.401 16.8685 181.669 17.3009 cv
181.937 17.7334 182.07 18.2678 182.07 18.9036 cv
182.07 19.4804 181.911 20.0203 181.59 20.5234 cv
181.27 21.0271 180.816 21.4012 180.231 21.6457 cv
179.645 21.8905 178.915 22.0131 178.041 22.0131 cv
176.769 22.0131 175.792 21.7191 175.11 21.1309 cv
174.429 20.5431 174.021 19.6862 173.889 18.5605 cv
cp
f
183.265 18.5605 mo
185.242 18.3682 li
185.361 19.032 185.602 19.5191 185.966 19.8302 cv
186.33 20.1416 186.82 20.2971 187.438 20.2971 cv
188.093 20.2971 188.586 20.1588 188.918 19.8818 cv
189.249 19.6051 189.415 19.281 189.415 18.9106 cv
189.415 18.6726 189.345 18.4702 189.206 18.3031 cv
189.066 18.136 188.822 17.9907 188.475 17.8673 cv
188.237 17.7847 187.695 17.6385 186.848 17.4278 cv
185.759 17.1578 184.995 16.8261 184.556 16.4326 cv
183.938 15.8789 183.629 15.2041 183.629 14.4077 cv
183.629 13.8953 183.774 13.4159 184.065 12.9696 cv
184.355 12.5237 184.774 12.1837 185.321 11.9502 cv
185.868 11.7171 186.527 11.6004 187.301 11.6004 cv
188.564 11.6004 189.515 11.8771 190.153 12.4309 cv
190.791 12.9847 191.127 13.7236 191.159 14.6478 cv
189.127 14.7372 li
189.04 14.22 188.853 13.8483 188.567 13.6217 cv
188.281 13.3953 187.852 13.282 187.281 13.282 cv
186.69 13.282 186.228 13.4033 185.894 13.6456 cv
185.679 13.8014 185.571 14.0096 185.571 14.2704 cv
185.571 14.5084 185.672 14.712 185.873 14.8813 cv
186.129 15.0966 186.752 15.3205 187.74 15.5539 cv
188.729 15.7873 189.46 16.0287 189.934 16.2781 cv
190.407 16.5275 190.778 16.8685 191.045 17.3009 cv
191.313 17.7334 191.447 18.2678 191.447 18.9036 cv
191.447 19.4804 191.287 20.0203 190.966 20.5234 cv
190.646 21.0271 190.193 21.4012 189.607 21.6457 cv
189.021 21.8905 188.292 22.0131 187.418 22.0131 cv
186.145 22.0131 185.169 21.7191 184.487 21.1309 cv
183.805 20.5431 183.398 19.6862 183.265 18.5605 cv
cp
f
193.094 21.8346 mo
193.094 11.7718 li
195.126 11.7718 li
195.126 21.8346 li
193.094 21.8346 li
cp
f
198.744 16.7963 mo
198.744 17.9358 199.007 18.7998 199.533 19.3876 cv
200.059 19.9755 200.727 20.2697 201.537 20.2697 cv
202.347 20.2697 203.012 19.9779 203.531 19.3944 cv
204.05 18.8111 204.31 17.9358 204.31 16.7689 cv
204.31 15.6156 204.057 14.7556 203.552 14.188 cv
203.046 13.6208 202.375 13.337 201.537 13.337 cv
200.7 13.337 200.024 13.6241 199.512 14.1982 cv
199 14.7725 198.744 15.6387 198.744 16.7963 cv
cp
196.65 16.8651 mo
196.65 15.8402 196.803 14.9799 197.11 14.2842 cv
197.339 13.7716 197.651 13.3118 198.046 12.9045 cv
198.443 12.4972 198.876 12.1953 199.347 11.9984 cv
199.974 11.7331 200.697 11.6004 201.516 11.6004 cv
202.999 11.6004 204.186 12.0602 205.076 12.9801 cv
205.966 13.8996 206.41 15.1789 206.41 16.8169 cv
206.41 18.4416 205.969 19.7126 205.086 20.63 cv
204.203 21.5474 203.022 22.0063 201.544 22.0063 cv
200.048 22.0063 198.858 21.5499 197.975 20.6368 cv
197.091 19.7239 196.65 18.4668 196.65 16.8651 cv
cp
f
208.017 21.8346 mo
208.017 11.7718 li
209.994 11.7718 li
214.112 18.4917 li
214.112 11.7718 li
216 11.7718 li
216 21.8346 li
213.961 21.8346 li
209.904 15.2726 li
209.904 21.8346 li
208.017 21.8346 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Richard Basset) ()
%%Title: (PLOS-Submission.eps)
%%CreationDate: 1/13/2015 11:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;B6uBoZKV6Lcf>$*2DuGA*)3:2)]MI+30;mFaUQJ^S.Fel?V-g<9ddf)mbY:VirN=h-'_)f<$gAXB@_jgGda&Of)LaK]`+#/
%kOTSh6,15P%,^u*Ip\_rW1C;XMhm$KYbd6`q>HtsO8U@AEeV/75C>2p*Z^QrC1!gh,AO^2Xqtl"(H#b')6=6"K*ccX0Qa84@f7rI
%Ahb.I_)pmZTL[9C'Y1*-K>#)g\-V`-a4ncWArH3F@6(.IW57p5U>LA^"LYcBhuI<_)>tWAQ'U@+3jmjt:'7:'b^K2]o8Iktr9Oao
%#d4L22].DT_`m^Dn9Ve+6\Oq/,$7$Ee7?#Bdt@U8^&#0XB^,2%3M>O8[*og:$r/J72akH.*l@)QgGGkjAhhq:/Bn7!!$E*ZraMM1
%VI7WHR5<o]":[PU+V9UJ:SC=4D'Df?qKk^1.r)"pRDCgS,fu3%:%.DSrrSGSq#(?3r+-u#%L\/3Y%E$H)!OqOH2V;;VAA)!!<fqM
%+HiFJ4MkI67:SSYW'0'qp#5sc&iG>f/7<qLK7>:/boRWlAOER<lPAck1E>ld$MhSi]Rd<'j7@U++^`US%3c5;0YeClnX)Jp?PY[*
%"T`Tk6?#i'@%Jn@Cbf3`\NYao"aW'B-9pQKKUG&<*3M!hDhS"Sm4K7RIS[)UrWC0`^0kbF\6eG3COS.dY*X)kG498OnAks@em^dN
%T*erP1B?F=@>BD_ke4.8$aUQNI.Pr?o.8[t/e6fJJR0EVV:EogjtBAR]H0t*nn^`4R"kn<e7u4\hZi`P?Yart^6Zdg5Zg+N_/*W3
%!*Z!nqpA@MQMpIh^t$8M$J%&A)XkK=b\t^,()cE9h\>[O/r3oP2q2LO?BY"`ZN9bj&#pCY\u*;!)B10D?gn5^!(mnlK-#ueFFin.
%)a+2-K>h:XTa.(OCh1W6LY^J,=K`Ngf4CQF<5P9$8+96D;m<1`<Fs.n`A(E%JJ980s3*S)_:\Olj=l.?s$'rN#a6@V!(SL-[VD<.
%^BS)ZQ=iQj$`X-OEk#H"G"Wl;r_"!-qUoOJec4=iWMLY\5[Mm'5Qp_Eqld1%N6pMDBInVNUL8R8M9>iS=E;n%&<Rf"TO7;k^T#1u
%K+WrSVi*VPK@PL<YX9;M\,jqs!_Ct*g:,U@6K\36Xi=bUottTA#ngpbgcttf:nJ4U']K4tAR,9RkQ/AOlRf#5LIPcQ,O,X]:AM^\
%'Rp-.S:DY\BRn@-p!B?];Vg:"!U-]Ha)7ro`HDM:B2NmP^sJ<65%pV=6hh',4'qQ/BY4q1!W2'VrJrYYTZt"HB0cP[`r3PRs(d>&
%)5<ccT7BcDLW08IC2gotQB]2dg=0cNWhoJ[KV8JI#UZ%]clTu0C>b/MFj7SM:;[l1gp_dk[jU\0(]<t[5R>8ciU`NmN,QL!!#FN1
%K<?nD+Em@C_$t\t5G2Ec;IG.*VG;9<!!XL`%&5l5hf#K4J1/eD01\+&dnh'9IksE0Gat[+;AfHL:!E-hR3lS;KSNqV1-,GfqENd(
%!1<C[,n+Uf3KGIFfE7/Dn%#tN+Q'u<ZOnJ/JGt?&U&@l<"l>'Pj-[[Rn)\!^)E<:]VJ!faSc\&N"#Wj&o\b35ba#D?m7(%4i6p,4
%D<3Xb97U">A,'^:&!YB'Z/oE%lg90#'a&6X%M5]gihh29('hQ*I'?O_\,m&-D9$g3-iWs,7;ug9Ggo<YK)iO&CddN^JE-Z^\HhcJ
%!,\GchVidq?SBUPc^o-9Fj9mT96uEaa%,G(7JoH(]1*7Z7f71Qm/8"]-;Vtne;DhEr\YY`Vn0me[f"GgRkNu_GQZYu2Pk#Ll!E!:
%\>K9<"6?5K=p+[mf@^'_;;D.j3E]]2kRiLm^A::\+77V)^](]uDPX`@*mhP!I(fLYS5dBDg2c]HTbJV`S_Ch&Rckk1hY]T)VH?mb
%Pu?4&"'quuF)%dlOBg97D8mQ_]\-]&ptoT-+e^SNm""d%#K=Q0`$eCpIF5h&NtSo"O3s_P7s>%P-@r<Q&2aD)C6Vp]TL8`nrV=b^
%d$!)n`aHfhd$_toS[f]Gd1T_X!,IRC$3f&l^t=Y*LY:1QBELEMm4$cb2ql#%$jV^,C;cnFI%eQd_pT[omD?qOF#=m;Hs@`n5`^JW
%jIgoq"3JHadaX<2)_fP%#nWW#S1[5=0@XlSW1dPArX4G#0Q`h99o*,T*;5l>?L&n()":E&b(J7*!-dq4lO=8uF"]4R1jC7$O_CuQ
%cO>HFCp4QiMf4F#EdcRni"kZs:TrroL^A>)hD!iR#i%ojXp=UO0S6q(#-VG`9JYH.O+Ece_[HrjYbs`Z$<]Wan</ZF+7E]V#%LEU
%LH%"NhTT5&4CD8]UY9S9HYL+R?oM_Jo<[@?pM#39dNq9WY[@!cU+rD<$J6PQ?A8cmP9Fc^0l.%55gnJ)GutKZ=nQ6ggs^o+DDM9N
%D"J5<1`M)04CX?qa^ocF2iE%Jh]*McJUfDH4G=gYc'q_%9d_d:$O+ep(i*fjOjF?XVKa38a911a>:8+?lL2Ql/g;Z$O(_PBIoD(+
%+;3C_*"6J<g&<(E[L=6i()/W\&Z!uC`8q7FbaD&Oe0'aZi\_M'L-rNNS"_hq^9"^^7uQ%)$lQ)$Ifnt0!#+aa<fY*.W)JW6?k8%o
%qFT)2g^ZK5[i+tLjn3;kJ:^PG)K4#Rg'se="KX!7,$Y6td-'X+GuuW-BkUB9%Wi@Hjear[P8;>NJCuNf)N9L5s1K4Z^.Mlp-).j-
%)9\\o+$O<sO[Fm"@0>\&B6^&oJ6]*n;^+RPMm-jUE=qDa-prmh%.g7(cOm>sI^Cm!&PNrTqbSCJ7ol400PZN$d9(>V0j$QsLs&9k
%r*I7u$\r"R^Rt#m0^@7o"dI)n=oZ+iiEkMj8f[L,]`8_-n/'#K5dM[&"IO:L3)#!XnsG>[BFD3@\pWIm-R_F,[XQ6uI5-P'[&1mn
%=GG'0maq,<r*6%T4^J4%iWXW^Sj<ZG=H-J>XK%8J[nu3!9S%_4+dm<AQ5Gt/OK[528&i3="5Cr?hh16deQS%iL=ln?OnB3$OK06g
%Qpl\,U1ORcN=DgLTp:ap<ed:*nO83UAt_c=Z6HCt&nsjQ/$'emMl[LWWEDSbGIXc2g+Z.Tbp5:e1*Rsj,ACAEMJ$d80sdmP>-PCM
%\JU\pl,>L1-CD<6!l^Nr3_@=XPgW6@iH";P(*$NPms=19cM#E^Pg#;u-e!H!=jC;?.&,9W5H_na!ilGq/?TMr/U?t(b&`8T0cNMY
%\YkBTe6\A6+Rpn"&AVs^:l$%"'-T0+h1"<$1E[8a.8FS\e.KLjfG?4`9$^/"nIdrjXRu7&1Y*).#lk:8aA"]l_e_EBW<S@7%WHIs
%euIMAJVNsF;(/0k9XFi\$+U>V;TfqOQ#nU._83N["NiRWY;r9rM"kE(ZYF7olUN?Sc\-[U0`qLV"7(2J)#e$ddD.N3e`R'e=c$\;
%0rgA#KZ^Db'N>);(=%rgDE!ih4(8<A%/ERHNM$t';nL^n-0KDB>G>[bA2f6B@A9(RT@lQr"NWJ@lki<kDm@+0`"R2Sp''i8CK7.O
%BY=I`Y_O:(g43R0hEVpp;?aJJo[pRKTp[]u0i4YtIt5P-Y3GuG<e*LmA<)J=afkq84E7@,,27n]Q?ihUAinr-:cpSZL4<utF>qo)
%7fTEC/Z-p/[8UXOctEqp:Yl@R*[R2X`F,Hn*,J!M!?f'FXe7nV.\:(T*R)CKa2t8C,L<WkU?<i,#55C:Ye")rJ>,43\c<X&&i$4l
%+_W_OdHccmRgkIoZdmB*Wu[0Gb%]jhnVlFWhPj5KfEB%_OH.n=HsBj7ED<7HGf"d$UUAG^*KBT\aK;P9e_W/iBZNQ<d>%X'Y>g3!
%CpuJ7q,Q^DS#m\JmbcM\bt-LglP1>NC6QAQXf0>AM\[bKJdr`Y:MB5/C^@Dr8d!ea"5s^a!Qn&!cu:oaN%(2nUD@Z7m9u)k"o9Un
%6Pc8h=\):,r-RH:8*s1JjI4K:IR-5ml/\eB6:4d^@^/hA\J6#<TlH'h5R"/tKb=-3f_8<X\_`:p,S"Ro;k&6c@XMQf#];0LL*"f*
%D(C"@`%;NndoCT0hPhZ;:Bu5SKRR(hn!31)eaU%L_]N%`)[X!LjGYnA#Wae/85>jK>Z>jQr(#:l&R)@3;i4UiMMNG,N;E71,ZNAL
%kRa2T_eQ!UKU>5F>_-6O)X8$M1g$mT9op26oS2=t1tU0+"`cI&D5tVD@_kLsF`nA2b.RlCq2(D3%:/26?E4eM,W*30eu5rB^#-Ht
%C]j%\eQeji2a5dRK,VV,%W!D"RQmp0Y[Rd63$+@l#SFf9m,-<e9$olQ8BUbi_/>lWM,qbjUHm6-H$qQ3fp8WKrha"P)a2q,W3g*\
%66U@(%!:3"fg)^m)6f)7Y)k#$Z>hL1\uhBDdMO/<!maT`bW&?jf<_;O309mXX.ZBiAEDe!*e/Yr`s-D$POG4)bbXI>EZ1LMN)-7s
%@52D-"4tg4C_lWY]4e3I8A+_]dINY",t/nF+YrM7$/^+-r]>_ajaM7a#@U6D\h72:mb$l(]4\;dTLm,F7[e,c[*MF'DrjsR:XueX
%a2BChEg\:F\B<hA5T%Y+pX.>X@A!GqcM0VoNq@?th>u?uVtNOJmQfq4VYA='_YanjjF2o_Te&$!..S$d]mY@+)d-68)(XPrqONMi
%amW2Nk??S\Nr&om.?&`V)FQ6ahl@`;5Mtq'bTaH.7t3;CI<HP*n;&L@J&mU3j_ZK=1qths5c8hZm\IH!T,tGOd^Wi335`M.FPV5O
%@QMmXN"5n_jO[i_j[Xk\96TUh`T$-/hh+)`lKHu$=`]eN;?pF#olN-PNCJO\r%tbCJ'([o[>/]36M/LOO3Y=4j36LHBm.quY=#m+
%J(VU==AuK&W=PX.``h9!oP.oCg)j[2ma1OjE>AnlG<`eu4XtaDo;IEL3QaMP>(CW:1DP61&``(+lQ1RJp:NLkS.7$T#Z[58(cpdU
%<43LUHd=bt!E_jU.t%Wj&u"['CQGsET2G(HmMiu:XR<od&jb7mS<hLZHgkkU8X7B@X[+>XTWN4%n9j-,jP5C_")5,lck&n_53O1=
%W!P^V$u\dfoYmCEj6W]=HiBFIT695l$oDnC>65f"-L?RWhVl^*-]]gOpW%Mpr;52:ZcVqY^oLuI*#d0Ro>Gk3>Ng[ZnlUOH-pRP[
%@*I\XLtk"*Qh1MIK"n(&,PQ!"rOAK/q8'j_aomLE[n-2+h+UnUR;2/f522sChbdMSSagnB4bfUO_=:%0kHVKOrcYk>k'l37g"C;j
%*W'!r:WVm`bl_XHk_DL4nQJ0pY&BZQkt9Y&9]iG:B8/GeXdLI8=^]!a^"JUO_3Ps:+rDAs@ZC>'](*-l*"Pe2>`9<NA@-%q#HA87
%:aHL-MXhkLqh_d(:Z_rR/*0-G&F[Z]*8hEu_k("$]$gBe',R9GDDE(&8PXI76mjr4S5`;G6FupP6$s?TDdn.Co(23?'Cj(tf4sTj
%R@]3`&j4Yf'PVjF=L6IaD4\5'?)59>?la@?8D)G`A&tStYe$,2?uU>@lsuRBKjpfh/KO]W^.[X_>$SF&^i'U+VdgR+S!M-cHHlRK
%l,Lp!%YRP#P09(OF1M:EVHCGs-hIKV:Yn`h$iZK&p=WM=CNU46F+Fk*4]1F\Z7B?s?sKHK17nr-1-oQLKk-7f;f"H*ess@eZ"8CY
%j(2i-C9>sEC"ibu4PP,]S%N80l6ROBU!IiJB5.XSI6V7op@=F_S^uSW\JPJJ>u)?#QuBBjS4!T!T"c4.1,X>n6[@S8%K4cMFRssg
%'=W<Zf,C9>nF+438((,Y$P8<E@/WL31NU`O7`GfW$RY.'C:4.<(8+kcdHr*3LV2_gq^uP'a]$:-Q@3EJ3_7e^)MJ"]=D@L3jS.jj
%ORX;+TBU\%.Eao7V#.-91$\m8qCNg#aq#B9a.\j&*u]Ue.;B9&)Ydm3U.<T9B$0UslL)TSQ0]t7H61iR:]&HPnSD@j_4P_%GkR*F
%bbqAa@g%0o-bsYQ'`OS7P!O"O1jIIMqrY4rP3(Qu"eVlY.e=;M3er7e`'E(=TO"i-55jW2->_]OMh^[CCkVsXBU1Y-%'9@()c-'F
%NpR>*-eLK`"`sg>@7H,>_JWL4FlkUu)B'DY"(.BmM=7ecCH9[<#Jah=o9mO'J(du`TN*cSrd:S_C*NSADMfZLr!akP6dcM:.gMo?
%(5N@GLhBA0ISZLCa\2tR]Z("C0@3_-rF^^,Q&$VX45h^-1l-Q&lJkVfNCM7$TJ8-m30<K*d9"C.BPnO:6\RH_N+IBA!l#`($U$ag
%jQOPk(D2:p#W?GM=I-+G6*O4m1_b`m*B8;#7EE@XG6_?Sb^_nk,-2=sK=.7Xer;@pii-M1#=1-4!AWZ$%(e:RCN(<PXGUuqZ?$*e
%S4[ZnVEn1"1P<S)NLtXX-"];8Z=bm:RML(^%+3FjL=iWE$MOi9#nDV+X8,D)'AClof(4bmRAgD["+InmreR@O5^Q8KAH/J>-&jf!
%<,2UoN.s>#^hElD9Q$GJ^M?TMZYhF]+3h8*N,HOLN530-m-`f?M#A@)44%1FHT\7-\V\e(A8K+tand;34cqrugne1d9-cS^e37p!
%ceAjlUeHhAf2fFSWnsS-d(!AWQ6%b!4)upIYJd.OGP9.doVq`=q?\.leg<V%1u+Ll_s>6G92B.Za\fKo;)#PB!VLPj#de$BZ`e<O
%oBpS@!r/tG!KJ_PoabQ@*<BjN_/%?(qka"OL)kmN'X6[$+."r?3]n3h5[ETdkjVh:F-($6-QF,d=Go<&mTf6h_@%/cAETY35A/6<
%p/;/u\,rW4;#fi$&*.YM*`qk^pRDPY!=%jDo9T6[A_ujipW-;\SdM'N%&n2I"`]#9q!?.gIR=3gEmX?,`+,\f]deb?MfL%JBg)X-
%#Kr@j;5#@04pOI'6ni<7f0LRd#YmRGDZJ,im_NmEWCj<I^Sek.H],f2`s@'5ljK<;@3f<Cq-V*[b6gF,grp+p6Fsm%ftm!<X_1U+
%<kPE/0uCN.%3#K72>:kh#J;/M]Bo15(^3(jof*`^G(B\+TG5Jk?gPR*WW)\gKbB)g6T6gq4rT+[4O4\gnT$q2WHo2&d_Q>0c[WKM
%-m>nnD7_%aWrlUuhYYALbj^t:jSfRC7cgPl>;]FR>!'o/[]>2/IJW?=hL[@?pYc#%a-(`H5_S9T@?i6Z>`6J%6I?Fqh"$\;^G]hW
%L?D5c7FT__5PjrB6l9B$1=h3j@$^SEA4md/asL'2p^\7Zj(Rk>U3ZP#VB`?Y-i]juhn!E6``pVJ;Y9?TOgJ73INZ5YJHOsMYCO3a
%O^udQSAMQ-;Xn1>Q$Rqd5=DFCq@%&Ta=h"H9NE6h3f;5<'5d'AS9E+8`dEAPb-,=f1k!R")b`I=Q&&m-=tA8R`$s6'1"I#JN.JIJ
%rlNH/ZQKT>3'VskOl'as+E^'S0Xu$jTZjrXm.1pscO85Jl3SD:TbO_SWr)F0a"q>io'uNuS/X++%ZU]E\%nP1'"MiKN_rQs[5$WL
%!X;?*mJSaNV>:]:9<)IOSQWI;*WWR]6FI.b_r,oZL;3>nmenNsrkt2XB"AaaKhZj\"#;iL\d-00Pb8MTjG3/aRFnf2o(s*2poFfU
%:S7_'H@OVt`VQ*=)N+F_<5)QSp41*pK<j[\RNL4>YI*1"Glsf14j;O`/:QJ^.\:H?j@[VKB-tu?]@(W+l6KYNf\p8-L&8`2-o:UV
%C#"5I'[3=6=8FK&TES4\9n9=*fB'RcDEO<OAFJr[PPYA+b:LLW8++K.[31Z'O93M9R,$!gB1-WI5Gn9V#-/iEe_2Wo[fq8#I0\qN
%e&ui3/^o0pUFq15Sf!+W1'sMg9VC?bMOp5q7-V#hB4:9Z(WCN(IXcg@1\9?/Yk8uM1=mu/j9?uH(U*uuZ1%AKQWgGU/bD)]<?t:J
%<7a0$EOY/t,W<h-efPqU-3Ki]4[=H4Q@#)=[eo0?bn2Vbm=9)"R53o!1>"3i?aHl1KL+8(&)-db9^6I(b]ITXR>iaG_?D@c%M(on
%q^4/jhuX;Z3>d,h\&ET0;%<j91-:WS4(I]VhHso.\#'/`Dgs(H8sInIN.g<tnm5ljg-f7rgn&U6RX\)O1)o""BDWIRUhFE%!$u_:
%*Vphlk'eM&GQ*6K5=e<`q5)=F?jh'<l1MDmK1$BZ$u\S.Y?sWj6+<"'N)^LO6(]-`7-<`],9;ZkO?M:?rOhNjP%LKogY_!2R8&0,
%aD>Th/".MBV0'X=:Wk[ggO<)'7VP--F*juM5VCsMVP<P/,Sf1_4VZ&'6'M%HD.pW`03+ora3*%a@OUc`ialh"KF1/HDmgam%R4/]
%+>raP(ug#I4S&B2CAft!)"9r_l&]u:`m.QUollF!mbgkcGY>3Fm+)W\DRX=5gks0(JNacBJU-4G;VaN,DT\#=Uf]Y<MV[)@k89BX
%\CG]Y"<?+JAsS]Mi0\68DLjj<IinhCk-4o[kJ%6[>f3-0C!aX;,^u'3;Cq4Lqh9CFpme)I])1:/RWcgBD$9(MM%sn<[E7c2dO-Rj
%cG+oG6O8Eb):OL#[=;hB2_^ld$Aj*:fH$(s'=f-k5'B'D(hkFYhk:/K"f4XL8&`*eOZ:ts+-GG-o%>SFE.Et^"(S>"S$$uk52_DJ
%kG`]8F,)D@c8l$!`bp`s`6Rlb9Jl_DFMR_M#"=8:"q>=$]%SID%9Y!"99rZT;.'Q(4'bl)HC<6Uq?mVlTi4[hdm"TO1k>GK@3la+
%?rR`%k_n7%FDKpQW,'M4\=]<2V$4ZTm>3u.cAbhmn0Z79^fl.15O-UH>cP<eEfD)TB]oU;DCTa+$aflRR2kq@ViN3a5X5d,B,72*
%$$dHUL1h.d9S@3e-ou*?k>.W1a,7ne?A_c-ZWM&?&jIJu1ea/Fo0X^>`pJ*gA<;(u?486lVf;r#H\cc\?/F`aQ0jqpT]QKngEM&u
%cogAZ\&!"@knn+i+0H?T(<Epd.jK7!p9T-k!8dZm:b\#BXF_62^[j'7i=M!+Tb2XtgFHktTOHHOeh6Iof&O(CTI*rbVu[eXqg0g,
%+K`/)/qm>-?@ZuHDmQYC8098tHXc^]&HjBoST%PhQ8`RaH8)Pjfj-G[g:CN>ZF=cXJ\V[H;PEe0T+2Z\Hao4+,V;g;<n>`)mUB/f
%@0oD/Zf7nsgEeU.Ob?Ji.'_tuUr1*p"OdoQr-l9fMSKL&'="/378!gSg6QeiDt&+tLiZsgA*]!$JMCIYaj^GIHi;;.CU8!lH,bXQ
%cqATa4S8%F7S<S)?$E*[ge;N7&K8T_q9e00QOZ)_\'S(_8sg%NV\PKecc>'RX81QYLQ^>"G5=55KeD"p.fSSrk+84*\,<tHoJL<[
%Ob8F:.e_[$(2<!W:3[f6&J4d\F.e8;2X/p>n1G?qK6D!BD;XKIT6u1dmkPhBl,k:Q<'N^/hI-T*G4iK6@r;nbhSpRkY?<Qa[H2t/
%AD<8eEl9^Z0<9=P`JGsCVX7KXU\\AJ9SIA*-lE'Xj?"<\O4SAbWc(R:V[sH"NlRnae2sm71CL+Y;.tHd=(#q>)'T""1jSHu%qP_;
%0SLAaB&l'7=,r"W9a3f?"?O5ZR?8T#o,Z&(dun#H-TbY[M*Q6t9;E<-]F>J.(9hSd#=-2P4V2UO#N7,TC%(:U1XluW(R_1Mb@'h_
%G>X_@;S)l<FOl3!V2>!5"q.4NH=b=j7a<o5O5c2FF!_oNPT[Vo)&s)h[Ci'+7"&s)=OSo6Coki/?$S'>IFh$q;SjsLe(ZJ$("?l4
%n@nmU0!7;9HV`cKlWLsVSi2/dEHYmHpOg`5k:\?%b2em5E72=YXn/<\23<*g>%aO/l-55.G%hfj%G1_8U`"-Zkp,Z`KI7Z;]?c>=
%^oZjhU`6k8/\$3M,ThRBD#rKpg`o;06a8ekFYf!%+*6>Gc5joB4<W_a"!+aJK&M(":/bY8Y-c9a9?[CQqt>/&>+RP>_Mr[1_m.3P
%+GufsGo8>h5&)3)Cub\MQkZ7nJAsusN$@(_0]aO2_Cruop(:eSHmY:(oR@nG<ROtqqj).R>SLPU-fY^\FH?U]lc)P^@P&F62htct
%'Zo'hJDjV@nO1.m0spt^!5fTok7:&N^3+!="X6*Vrl#oZX3^26CT4S^NtOk]WqikR7@O$J;e5G/4_`9P,)kcu]'74V["l?mmt?d*
%.*es<Teg"sATCs<98gai'e$.t_Z^d6Z8pu"kHUI#Hi1,T\f3TZ)jOZ%3+COI^)sGr"'Vh"K7cc+G5HJu#cl^jbf.Sdg;+.D.)UL+
%);'g5_iDD=_sjiY[5.(QJ&Cde<X,'h0O*3afYO26oLJ='&=9*$6Qj3P0sH/Y#K(-S?<XN@e9D1i+Ogh0a^DQ/e_(c`LB/OX?X3]D
%)"q_N@RM)GW0DX:=:G1[#EK9OS&K3^S/nqg-ZF_+Pu]nEqBg`$YcRoi&"n.4*s)=VB/m!Tn9f&=qWr:1#G=TZCnm+kc]Pt39jV3f
%L\dg@VHL@[+\f!P8dVU9CHA4f1F$A2RRT.@f3!>+KL.='0cDmA5G'($#*i<u1Y#H7d+47Kba'sK*a2$2^oZ/rGc=A.]m>NNg7W(O
%]i2tBUOoaiT&K;-@)Et`18@gl5>F2`8\Qm3lcRCs[2r',oodGuSn:_J4$LSKAP/@hRG`WFk_:Ip8>*JnY/)mRML)pAKeWk7.:>Yi
%XJCVe^=Xg3okmeYqg"d8FI$*OrF\o>s$rj,>RBBD@=TAKU\8;N*rI7A''lL5oOo7?UrML2<"r#XBh^D8pG>i"os@K.dRd&c'sd/U
%(_s$9`df@I5;Uiq!hMFao3b?OVMF8P24,t=3bBIs<.=C<(H#.`%i9!`4-i^P3!\bkE3.S)(C8B.#\*ri=7sb&@,[#AAO4DhD^d68
%UW%U!j64hk?A>Cll'GEq+OU6FdJ?p%3#K)>@#''-<#"?7%nqT=oI8$r/%bZ-M()c<8$k\)>H9!&=1[@5+D3:&F'_$Ca_/l586%.(
%5jCS(:RtgRfFi3Rbc1=+HYU3NX^Mg2H;lb5r@io#=g.NVpo=<'WZ4R,Xr,.%G9dCj]%"=(HrM=$X5[OGk0ZfP;K.M^;5l<VC-K=h
%NkmceJl!Xk^iQC,8uHjq%(#S^?4R9fk(5m(:rkH-T#3,0d)m57fOUP]@PRlp35(sk6\-fWNCnkE]iE-2El*l2d2Vkgc'Q<CKr4'O
%),+mV:uKb55N+oE1R"2!d:==SpL?g2o=uSq[cB55Y@QLi:4=IBYi*S"EX3X$1_DJR=+G&h($lU*!"+]t]ApG2#6dou',+.)+EVDH
%iI@?5d6URpl\scS$^bEZ!=%o=,0>6nE2&bYF<D=/LGs]+%`!RW0+>38!r\3Dfc%F.\,F9`:JUXJprVi_^I<SKK/`cCH4]Zo)uE=s
%-W6<JmqRmc\@%^^T6fmc[G]PJobAR.::D,'()ZFqH/*(]rJ2:2di!D]s)AqDLM5N-G\Q?":?'5c\0!dJKKikg>2T6>n*UAO/iWMP
%/,b,S'D@-4+2R%D9!glm.H)^Qlqt!CL8GWF_mEqFqNQ;dlk88dr7sfE5Q%WGrUiJ;50-KOHqZbb4LT?F7CXjIe"5cNH\nY8/P?fT
%!OoOV/64kCo<b@H'7`PBB4s>?4Cn:ALR3*;33#@g<\mr'Y^]5q::0:8pRWM&hj)tXd]Ya]i8(:W0n/?IGcWU.J=VY>Nh<"[B"`P&
%5-^;KhU/\p2^@,FGt?Wl:'(;Nq"21Gjm^*X-l=%ZJ[jLIE5?nboS3h_'G`6C!H)`*VSB7D(W,RC1XdNV%_QWXnDAPe2Xm/J"oDN?
%Y^SN`3=/^j%?!48k*sgl=SqabG2H97RN2TJ"/f39lRr)F04S!#DUBQ::XA.-`burBB%)&NLQt'q>pdbA<;R<4!]0sfJg?M!"g#O%
%;`OIaOiQbUHkBm6o-QQM>B0fVb.Oq%?>=Mu,mnk^Z6E?@;q_2F7,]Kk2=`psXB(#I#*fE$7)"*Dh$<Xcn>:\`1pp1ZK#LnNRjAL)
%DhJH*KGCSl@:"m--CiQBX^Oph/A`=m"e+J.>8D#+fm$N8)KPl-blUqQDQp)t>3T>B^6?T@%<_X:C"XYbF_=Hk4:50mE+@R9c;4]?
%iVGVVJrC8EZ<2%e8]Xk8H7O#<$1dt_'X5Hb&PqfmI.`Y&_E&eHNdaVBCOo$G.8-TaLDA+Zrm$X:&U0`\al5n+qB*HhXSK%[.Dkon
%-d!U1#@b(]@4bAmDTRX+9Tosqr:r'D^`'inc,X?r$#>QGZ$f.'YQ?YngX8!KqP@P7#dG(Z4_FC:@XY-=5!f;9Vj"(RXLAHc-_^(h
%4r:3McO['F(2M++RODXI:Z)"93NPcRq*,6TlZj/1-Z[mah]u.j7sV2*VcuTkX^9t0O0A[B1;g4*n&aa_4P#ie^=Rf1rg(P"?(%&?
%YX/X*&c["U@o@m!?X_r@[rBK"IJqtQ/!7&3(2L,7>Tp1>h]*/n^9?:N$<TAa,!T9qa^P^o3cC"WDeC,!NG\p$&.Oe!LL-q"%X7-C
%8f!K\UHGb(XBotb;A>2"9_<2L1rSZ=dQG5#m=XT$f)TIai^`i9jfKUG=fhLr>r#G*;#XK"CSp,@M1q[VhDGs9Lt*eZKkOQp<H<,t
%c0cl[mBPYfOMRCX4?Fj0dBW5Vp(:>t.@PZ#@l;[+?jJ^i+_!c!>WPT]3Au=A8u6Oc2k"0[7c.G`$K&"cIY6$le=[VBRN-lfo:`dV
%8f@t24)^^%9Bk[T(l%bi`M[\2f[@;8Ka(p+*pd%\`hIp]OQ:+0m-/LQhp''eVlT'!Rp2J)%78TCoLn`IYh)qA.mKR7\n9&_N+g&>
%[.iNhV"f8h^.N^:T+3A90u^$j:$$OT/1NI^(E\P)k)O``A)9[#Y;bjTfJ!-OEuUB.*Br"T4OI[XZuU?8rfh^)IQqonQ(NNeU5tJ8
%,,4c!]-3BtlbE>^VPs93hXY:8'V>F`b;l!S.Q%3sG`)_>T0@Q!M72Emd:uc:Wt=[7pe^gm.D>_B:VR;e`MZMgjK1q+BPF6nA;r(O
%*[hZs7iODPW$Nd9C2^cPP3gZ!.kZ)ScntS&>?\#Be7M<nVR#"+j@?5%5P7*QXAe==^"K_e>F$+q5I5qNh7m;>s,D0XaBh-NH1UGu
%cnircSPP@Xn;Mi9n;dtV7N*;X=r.*_#@]>q6E_Q[Bn'QE%?#1%bA]e4^@dp:X%l\UGj]R*Ogt"NOe9`T6bmub<gEP.]J9RbZ[G*a
%&E?7Y`-J9\c96Lo>(N3UbsR!%.2(Gr<dWU`GuMKs]Xqrs(7udT!(ZDEHmiG-.d>Q[Lm9*4?L*JN!?.n*8+ORjGK)UCJ),cd%DQN?
%(tS5p_ju=#G;l@54B<P5BG$@?>LS`WDIF^*C@*EY"VcFX.Un)_!*os5Z"1Ak[HK)Jm<gFFop4D/`O::60lei[YsR&O.ZZH)F=CZf
%VE.j<.h3BK.>h6$OjXfc.i%%4UJL5M5]87O0ja-YC@*(./'W7R]59LaY"78d_%]bq^m*qE<chlf^q\<@/6jI%i4`b/#unh%D@,l!
%ZZ>3%T&M$&n0ZAIFU3I0)p>b-L'40&Joj_'XRQ`1dXkjP,"9s6l9lgopria^2TS885!_ZC_WD<Y*oF;R*%u(C"#@#>$po0Ri#XgN
%'2c[Z$,DLH9',L:5;e;X_1oZRI/=mO;o")ms!c'4\lf2D+/$T!Y]0eT49APC@l18N_!E]d)0+pT:P&CioETF!47464ok>Hr.JAV'
%TatbN_(Q;%3D#Hgn;\c_L^<JJ5%L62KKl1lr586!ES]MK>X1>@ZVeaKd3$UnXP]a!=>30e)XmG5g([$_D;qGh*3qu]0o]s/7TH3"
%%LO9e"3k?!r/t71o^I7P.?L.-CsM1H_Uhh8"[TPnL\eeqqRC&>#uUcMbFA<`4Io%sYnXK9U_#cnHIU2tkLXqGN9%`G1epE@a#Bs:
%%3sm8,DbF&f?Nn$<p5PgmpQ.!jC@2VZHKT71eQi=f()4+8(k_$Us"soO])JI9=>`l>-onE5HplgVU1a$?-g$ZWp>4IJKpc4"#MTS
%esbBYSMVVU/[hoZn=i`'D#2]fd(sm#?I!X4)pc<10']*h,%2=rQ6R)Xj.<F@NuSDp%#puOnmqI8JO6-Z#>Mi2D9$8(J5fd%8>_r`
%!!g"#KBd:0GoTP>"9/,'o,AEL86*kT5YPAPcg%jZrW,qI7)+d#"H3o76dAFgL/rT[]7oneN+QFYm9$):gaN[gKjlt;VYeFq;jeEu
%n[+5_l:MSH7R7S+Z1^;m;`#-:9h@pd)mfi.cKAM6;oqe?$m?"?-:Nc2/(%>-NN-ta/@CPh'OY;3Hh+aMV-EiXPCiM0eCa2fong!Y
%Qu4A-HMmF"R_sqQ15@'7J2K1549EnMY3tu.Tk(K3Na@G)nm[VePr+.p?X8T)J:`o6icfCgJ_!\BE_[mKL;A'Xd<bH8LaJF*V\<p"
%ZWfX^+*k?mKWI;qeCl@;F7Br_Z)/eq1@;&<L\6X-]_q?U-Z?2t4>ZB,8Zt5#E>lGD/46)+kIGsQJW@=j6.*LV$'a*4RTeC,@+6)O
%1usY9U:,<ndhB*<UXolQmYQZ\J>:N>)6q_;7SaTCZikotFgimbd7Fqi]KbNQL%3aTr't@C<!\Q:"H_L/h9^kp_83#^AGj)d0L^kM
%NIXRA#>@NKi=AV@n>esIQG@U#1Iq(_c,tIGdu4[u('WUmHQ<KTj0Y8T-n(W1$=lZJ`s'7$c"@[gM!E%3_i_Zq0X$Y9s'(*0MXPj]
%aFq/?V_P[TjM,mBrK.Tof,_kI^3<N5e`\<odZ:+B]',utfG-Du>rT'Ih.MVhh;ZEQ,[KcBDVT4_8g]o,R.p=&TYls=ONXkY\4=,Y
%NocJW\5rqQY\Hm"C3Z>p(Cq!Y2USuM9s7\O&<cZJ*Q4CM3\DR.TG@n9bcpbH1*i0ZT8jWQ)*t"Y'AR*ca:Un9ehh*9'ciME"jZL"
%[Q5R_JiX0j#mF0s6>U83%`lj0LV!RCk_VN=S(Z+#1L"bQkTF7)m9[If'"u@g2Y*lqQY_E#g2*HM00UVTM,iS=K<qQg%MDKW&O.?d
%`)G?[@HbtB<#;,`,bnHH.Rs_D77"5)+#m15i3pGmOn+^6NOG5_W$Bl@M@?W5b_>q"As=!]N=5Y2jbREE;!.n5PmX\%?FIX:WoAT=
%ldDoZZdiEpNmM#[8dd\WZij0ecuAO=h;XOcX*AO?jJf1G*K6&PLcnJ)A4,o%5Y=[H%Z4XZaT/noT*%AF%)V.LSu)m,To!q1Pt_`o
%q])i#_-mp[U03^TX1g^tir]):A6G-CH`$X"ni\-QYNs,t6:GYg;Dpp;*HQjMR]B&ih;!<%h0*j$k!iWe?=X(R;Hn9YZ7`;[RFc=_
%/D[Pg4b.]5l.2(i\+:"V(skH<\g^5P0R6`]D?($,DE9aO)j%LMA'@555ZcUW7=\?\PT1PK^CfOm>s[IAPOl+8:;_8uj_YelO,V8)
%"<Prf<#trbZ^#l<7MjiXf-QK&MbSX:2[`Z679rUPh3ied>"2fn!]k/sXH67%#Ds6S3[@Jd&s$7a)`W,+S>gSJ",(]2ojaM8![-m3
%$4.EW";h84_=Kjq4'YOEib#Hq]e5#9)>B<VVlAoN0LEBN5D%d_3`_>U:Kgmc%W6'>3=#DO_Y3m"XT*K)jXA;dHM$7p8Ii6i#`2@E
%fCho(?SZ[BRYq2<XT.nA)?P#<ork1B&>4r`IgAJ?3AOf`-gA[TXkJ)c=,mn0=/m?ha1KXd\!%I7Pmf&`NHAcX$)nr&j6sfPAX-uG
%WMs8Ii+o<o\B"hL>5pX%T5Fe4KHJpZf!uhFNejQJZ"lFo?oD;Jk-/)/S:'ZU$V8ullXL;C!FjP1SSTIaaJ<Q#lZ+2i6_^Qc0',j#
%jMlI$mI<Ig9/WOj2,;p]jW+Il:"_?_7@"hZY*doNU$:A3dFe>ITR<WhF87<%'L9$e^,WLJ`e&G%H[>Si#*cD@h)WWs;Ig/@IDXW'
%SC`$a>-+CT&qQC7XQ.,l!aCfUh+`jReQ^A`BQ`o9BA1sk7==opb5'P&q+u\C29PaEC\]6mk596`oiaQ1\@oPF:VE(_7U3NLIQ=$H
%/`2P`FRe^<54r)CJEAoSI-S+e2j2V.Zci0oC\co"\OnlSH7^3`"g1\IGME\3j^T<lbKK_2'<mPl4jP\BP9`Cd<4I>"-3l>089O)t
%D"&lT+sEif=)3,n-/U*Cj=F[n$Ftd-F^(Xu^\+CQ'YY`YPM4$FUf)5`5BFmI&/Qph8Ld:s8qp:HSSn3Y;rgU,Ca-TYa^]Z;>'*`>
%ToeOme[c5l.;!karf'Vo1W5f]O&-*H8BUA=JM's>X7jXeh,l\,n61AqNHM"&^Se,WO(2?W;-AHgo?p>#1ZF'.`u[m]dZn:9QsYH^
%c+3tp3l9/;1\46b;P<'_4"2R2:Zg^8')@2RXg5R&o1S0"-s1Y:Bk.Seb.6%bJeMgmS6mK5;L!psE)cDnKjrb"cUO(`d.\Muq@(&A
%/U#_j-jJ`A<`sg=F*og@6_ACj-D(C:\*eBXq]]5HW?,_O$kNMeWFQq2#dfEiNJIc#iJf+W!a]eOXW.Su@M4DZ[2t<C4>*Q[1s6)%
%P\UU:>)Mp9R_kbErQUl]`hcobG:Sp[qF_iiq_Yubl;L<28@'`i>19F4H%/Fi_RL_KHHMW)]'#0@eE"\SSL6\OE^<f(R$(L$VH'@c
%feHo^'ggA?k!*:AP)>e<M5FFcH4nW4:2<\n(nWS#Qg\J=*N(lXWi07<UY!_DqM(%HCG1$gau$634m'Ng%2e\@NDB,Z>n?k^='Xg&
%Y'TVQrnsS#nH\/r3I$$M&VcUEO9^:BRn6KC-l6=':G(8;.os#i\jtt,e.e_Z/@O#j!a6jLFRnL?:M#DsQ0Tpfkt$I:(m=$=(I\d4
%8dM.Q_7[Dm._Tm";`nUP=sH&U.l"D#$']$Q85bbMY`%iGhX)&#r(2'8#q^O947/iOs'(XjqbfLM+/r"l"\FYl;*Hh<?uo\1%jZTK
%b-O+%>N.hlp%F4O6E6<fSJ8b70D>!EM,`3:\8'h47rMYQd@96]HLs[]dhJN8:R=If"C^>92I.\Vj"j,tT<BK^Td+mTFHto4!5ii2
%qF*#_,JV.!^E--_oEHmC[<f?@UGoCecEA+odmk@ZlCaW]F;>.uJjJq\4!dbcL-IeY09&[ap4V([Ib$!.eMO(?fE3pWaeo#3IGgP6
%Z$B@Ys'We^qRd`>FEA8(MShXc8fA*jC:SS.JgJW5JTDYcft:CH77k!',q:F3paIRXkT1@/ckW#iB9r=,-Nn1]-plWm;TpV2URkI1
%Vj_aWdTjSfF@2?3%JX)heqL-d;m+?^r>QcFjQBS+amMX7Ek:R;k$?,D3\0fDe9G5n1(S4m*Z+"1OUS9oR4$)se-:#$DXPbHl/J+2
%l>h:cr(D1[H*tdWEPB61FWu,^o5=2jR<!RaSn)`Kik0&.k"3p=`H`9f$c.G+.hqtMI<X--&q`Y&bR'tK-2!E52QaC>h`eAuc)4*O
%nYVYA%@]N+\N$cl*W^:dC/S]*'-n9-fX1`cVkAuEO-&t9:HDhtXV)>'<XbXlSmlQng5ba)c!,t#J"q'J[ab9B)uf=Xc%;rgG'bN$
%8-nTdWR.2qYSb\FeKN39="r12=#oO_6#g5I`C5;6Q4Ycd1]ci4qU[d!-`_^QZ!P>?#N_(!D$=@C0;*0)*/D17$/Df?NU:uShnjsW
%_p`:t,h(%#3*?8]n+PmY7C%R#TlOQ"7X(!]qj!%L^UD`BP(c`8;BuY9euhmr$NXO>,R^:c(!.pGFKJh<p+CP'X<`9%-2;8Q0_+JV
%.C1)M3l5;$;L:&Lb*/j5*rSTdnmpqGqF,[]/YM4`?W<869XI#^Pc)Fn]LGa>003+FF`C9M.*2P@jdf_BVo)tS[Y\DbQ*Se^g?J@b
%URV_6`ldNlI`d,'AB.3-)hh!.#Yio2A#ag0>Z;_1]0)n2'!65UD`::8B*-W3krBpTNna;-:`%$?g)eUT\t[)edU.lEpukIs'p^Se
%8'dljRDR5O\j8/MR2-R?5qdF@530hA.Ff^`M/#69hOCi^,8od>/)YIjGrh3C"rg@kN,+[&B&(`%g4fBX;bm(FUW>#+U(S8rW>*.e
%NM"@[fnJ=X<LdEm`I@O5W:GP\XYHo.WU2le>UpQ)[FMG,)nRC&Q]eYd7Rjr@&)K]<:r:pf0D6nU,8aJG"`I98NlNV$]7[S6o+sS_
%lHjEW7D;sYS]@R_eK0c'Q&>NlGB_g"iCg`6YOe_o!4PoXp00HoMHBnJLGC_-.i%qYC5%XcD.TgEf?]&!p#bJ06IX'nlR?7j4(9VB
%DHZo$'?ff@3>R]p)Uel<s&IXtmKVL-D65Qffa(83-tB)o/!rFMU^C/i1q46kg8jh:"8h@33PYEper^2XU[(Z.?0BaJ!>a3I]s]u5
%V5I*E-eGD2FIdWhSt'5JHd^>[SU%p*ObTs+NRF3=fq_Nl`71DlPLFO+MTGEh^C0LnS+S&"":!s>S$VfeF#kpW5pO>17]fl5[ju.c
%M7!M-V^?8\oLU[nI-/!h:`>ZT8b-W,F`YO=5.N<*`pK#uqrB;JhGh6r@@pePlipbiIau;!dGWZW5&>0)>(qBF=XF![VnB)lVm&t"
%WXfa0b(Y7VLV$>4m$%&&,Rf*\_EL`FiDk;X'Y%=TTA2Vk<7kHLYYWQV7V_>%Kmeij\CW>!PH3tY]X=dUp;r^b9[)Y!KmdttX;Da5
%^T^M&SdhasDD^d@3hroT]&h+iL9=h7-T?f>dY"#B0C0A7n0g`qRY?01TPh8ccg)>>l.@Q$7U_oo<SoZiVJ.TQ6o;T2IJSbCEFGJE
%<?JBpY#O%$=4ML/lb'm7:C_ob@c](nI<&>9EYU)@(A>l'e]KN4fnFhU!+?sL+PP?QqrD?\+hRW7_EPN15&K1UOWqC&IhXj40.Q=P
%%-csYs-!fe`-p))&T?`gAApa,bhh`*l(g,5<8=F8ehs&1/&JaClj&M!cuk8=**]"DEp10T:Y/kaR^`(V-.Uk4?(]&]"Qtms\(@uF
%Uk\rL>]4h.BCG)56H`<J"b(d`9bm*]`=r/lP=ikYeWN,<$_*;oHH(eiJe:qP_FDpa8p[(P&sp^QMJT)F9e*T%9%`LkbQ$X[-GBHJ
%r"KS5nirXXB4jAB?iHrRb40TDjaW)"ReQjHXQ`YI\lXAFoL5,H@2W?#p]'J2Pu>-i:D-@KQec]YjaU*RC>]&HpK-tW5M]u,D4WDa
%nk:r)pC_mqG+.HthVtE%^U,T`c1Ap=s#9Emo&c_?nsVbmoL>D)h5I4>K"@fuTrdlmG7q;eZ(l\M#d->`eN7fnN@-$OaWt+X!pM2O
%d94msm,+5M.3iY7TLD!bYA_=W:gG.<2eNo+Bj=2L8u`VVVCVCD?`FikVC.4*4f9;l_<VeESok47.&i70FE+!-JqE;RH-rT)OE-*,
%Bm3*SkoNU^%`tbPqppi"0YhTcf/qh#5Z=b-\ImG?l7$rYrRE.FnCWorne7Od%@u"eSP:E:K$cMXgTfoPlN/_%]RVZO\kZ[moN:9d
%@B5[=,DK6"0??-7E_#W#WaiqLlXiMhEIW%Q+m)?B'[#[8&CADn`9:sK.i`'7!7J7D=bbK1,[QPcQOtZ.*b_6\<Df8a6=CZG,EAXD
%V=c6Xn))Amoq!Pgqo:Ctb12!n.;;+_$#3QAl!08fp\sD6eM"W1:[gL^Y5UM*)9Le5LN2#sJ55dIAP@7:eUR,jcVs<2'+::nTLl24
%eaEB79BX]*mJF%2F\7]gqq>@mr*Z$!TO"VPpM2;L]d<QIHE2HW\#8%80-;3foo:\,.%1B;>Z]#16@e\f=V-Q>TZd9a-3Eia/^[S"
%V:$jlJ[YobAjW(qI35jVNn.^i,$QcRaW8m=*o!S/;B:JY`0G%B75OPB67Or50N.#"lUe';&<q"l7mo2IB=L<BHBtI$XA_g"Q&bEI
%*PNn2Fe2E&V'*^&[!El1mWdrr'KrLY$C>H>UJ^1;7oVs$NlB)5&XV<Z.?tD]b:!`gEF\+K]%`8ANmA/UbHKd6gWl4bC<8rq+g`b*
%L,n%_N"@#A;7\@kFK9<[#uM2_]%a"0%[FV0m?<`A\#sZf-6"Rh1JnW*KQ<J0S4s9)mu!0cgt\+<\=_W!GLTPSQaG?`O6aMC#X0!'
%9V#VhM]@)gM;'#FLgWUf%lar39iMc#R]PIM7?r/1]2khe8%-?;dm^U8*P'>*)l>Mc\Km8#oV3HrX9;,IPc>:IGG\3]qCQ`-`H>Zt
%C5%H_T/,!7h+(BR.mV!W9ii7E-;%@g=]K4tWWD5(]U_(T5i^PR5"X.ueWTi8.+H=@<Nk@#aAsHNU+o&bNXJc9/IB)a^ZPAbQ$GM-
%X9DO!]PaP>s1R6:-t!K#7AZSRX>N#>9KE\nj6)^PObnJ"8W'Fs"J7aM:M`Vd_=m)YCNm[\/rH+oZ@i^L7,JbSlY'plY4m3B6?B!D
%Nubtl%t`^-O\quY(&s0CHto!-L^dKPf76l6SWl2b47br?>.7#pqPp;uMGjBbMro]2/`f0-PnW=upeuN^eQ;.`b[3TCCl[Mj-R<S$
%80t3\*=8&NUoJ4l[H]E+e!mkDa9OXjH(7>ZW,Ac$b5j[XCBtXTSrs2q6jFI=-(bBbHCp4@UFrL1<65/&ES[]r$>8&[*9H-#*G,Aa
%R]qW;=8k7cBkD6T3qaRO0!8-6L%,KKHM.D%:5or,73>Z%fN]RNh9AS&h`33YG5@nVo's*b2>4esGp+A[UNCO>^61mtVsE4/a1'7@
%js$uub0W/>Y-X^!'UbLqFL0k)%_=!jkt)E,1LnLHHN^SH:W<;o.:=hPAbHC)4YKAHIdq?;1(r_X=rJNtUs?-F]YUQ4,R[ITU6[s?
%4N#SMQuPD^6']0!WX'qa3T!bX:IVh>:@5Pm4f5fh>KTA9_XshR+W"#[<1TM]<*Lhnl]5QamtA8?m0g]`:i$8,%@[,Nd/#eHK8O1_
%1khElcPWNiht'1/BiYn<6o9lDckD85Gpi4j_^t]"P_jQ_`N8:nSpo'0X)H988Q<"NQ',S%/4gOu6DY`c2q?5)8^pt*-l[rm?]qA'
%#=nHCE`V?0-&Ggn0c+dm9!p^^,Z/JCic,%D8L94>8Li8^-^H%#Ef!IQU4t%t<K_Ta-[f#e@Z'Eqn[N*_.hm'Y+1nUNQ(^'ma%j.G
%n4)NTN%848LdlH^Mb6u%.hlh6rOL)YO$2_lE`o*mYhb#"(#kp\5Bp<SYL`^>AVEVYP[75k<U=JM*?D%]ST3V^r_opO]'te7qie_\
%:m.5ere6-mn^e`AEpV7-4B*5hjU+"E:HB.GZqe$WJ)R)I!T;3;::3D)*aY]"o?oB&CjB?1iM"2YQeZb/,@'PXKfH<rD21%t(6kAX
%'.FTG3q'pQKu(%'*==.6=d=ZO%UmtFFe3^6U&&V]2gVX&cu\0>3eM/p_s4o(:f"df'eVW0#UEc^F2ZGg??iDtgS'e$G4L?BVjGG0
%W>H_lm8.;R5lZOnQZAP?$P2pd;g<:N^A;]%!Xn2pFIisVHdW^8GUS+eOlVCh?Dh+SW1HM',C`e5knbD@=3#8a&W5*nK['r9e[#rl
%@0<3/G2XT>c/[Og($>eUlHsb5+cb^[[R7HiNG=?[oYSN;bN#a+Di1pbeOhGnDEBsP$E.6TGiCl?k?`B]L*A5)3+d^t00D@0lhcVK
%&!`fteTM9q^[P(u[_j'H.'UlJ4Oj"AY&iR\$0?/.>E;:`*U8c$\h6*-hc)i)_F+"N%^CH.MZ@HB,@)q)SdQ)%hc"dIKnhc)g#EF#
%$Y.Jpn5.qr3/X`.Hf:[0gF\a)5<.iC6eP?.[iMKY\>NVWW,DOgr2%"d=T-*(h8`5qG2],k*%=r-/.&;IJ)R(^'Y->qZS"A)LVebK
%0?NDj?$LT6#KIL#n>Q1P(ETTCl:\Q0cG/jF4Uf=<RnGCsPa&FES2#k(49*/bFmgBDRu8m]<;5hNja#7-LD$?G9t3=Y_F#?Xk;=kS
%e5]Oqq1XUh[iHYLf=:<(TmGH:P5oZX$P2?Q!k1[P3:.V#*ie](YXH,$_F)%IZLQ/F//u,-&(PkNE&[',68("?AT'Z[Qe/5*&k8-1
%>nj_/nRNHFN3;qPdhS/1NTf4IQ&+r%k]BAfS+9ma.,SAOjcHU>'QFjT(*Vb(Ghh6/SMI&^Mp!;ACOOf<TFKk_:dL\QY9Jb0]VB30
%DJB;hk/h<:Ho2N(p,p8MJQ5uFdn?Fr+tP7>Hh=l=qrm8XR94i,TOlTZ=e&-c3O?sA`Q;olDL9G-NF.=C%t*Z?9]=VIs6rq>ecOTO
%k;*fkq+'B[ZL)s]dDeG^i9t;no4E#JIgNhb)q8Y2gTjX?VY@IJTDQ<=e=PjN73!)0YGn=/[I&[VpN1-bHo8XQ-I!m0V%C<>q(.f4
%L[!WmJ,Mf)dJT_:dmUN>D])jSDT_16Cg6VCc^Z3#b]AL]In!4%+o"m/l$gQ;n&"Oih-Ds!"DDt0iFeFZ95N6&h9L52Y8k+7$LiN#
%o^6K(Dr?Q/abpg0]kcu0gl%suD]?2cfF'I&Cca*SDcjZ]V,QJ'3I2j+J-#*\B\I)SWfD4:)47Dg?0e8J0Wf"Iq;CpAi:cHl@Vd%%
%o%#1k>h+(<D#CIj+mroq.O:!fZI-009[jpW<aCWcq2Jo&J\b?m=RdFOLM!n@Foa!&EH8ug"Ri[Pg]pEYdJ]fmmm=,sI*I[i;so)3
%.HTEG@q=Y<?Hp6_HsK"J<MH^2[D1//TQ/$YS(<mXb?Qc:n_!"J=BjJCVIF*]NQ.5iY04HLoD<m\So;#pn.QXXFl@qK`""+0QO%\H
%jB</`]`f`Ao_,pFm1-YMN.c?Z4;JWP#%S%B^t4YWPp6Ca;qcc*Nt1dsW3oD>I*K74f17igpV):]g`g1Q3URERV-#3m*9LrGoog9<
%ZP@s*fakSI4PTB2Ac%:5i5?^Z6PTR9NBc'+-TE"Tp8jA/_TIU7)ua'j1?8GK3q*@fs-S;o6<?BtMP_'g22'(MFHSi_^k9urY32Bc
%Z3Gf(_gr=GG"CLL#Ld3o$:S)h#36t=ZA`GWI.Y3$DHJp,oSeqZ8@^Yiqo2hR!G*q@N8HpigL8VgdSqQse`hk'5m*mAf:#CP+IX/&
%5-JN5Y)+`9*W;4DcR!(,?qYr9+Y/6>`@`dP'Ja!1Oc5n=;@Xa)eZEcO7il1fYcjLo_Y6QFP-,m#Zi%kR9#,Fl"?,t&+1eH<CuG!u
%mS;BS0j2DT%6^$dnbhtGjQ=IOHcnaXq!R8[^cMN[r.`hR]mEjk3:Mrm_]"!pnXo^fJ:)/N"CFB`bh(\Wc2NK&W:UFE&0.>RN9=RU
%mYpJZLC\lrS"&uDq)1RLkJ%%81`u)OUP./3-G595IGPR@K(VjF9TjFM^4kC6AVMK.@=s8MGV9[(FpV9!&(V)`lSnUfH+1Rb*r_?>
%[0(*pVCrTIr7NaPUGoL9l==u0Ya$L*0<Hq/AbX@J5n0STaJCM].3@rA4mV9dS4;[opP`!_c%$3Vq!<:W0]=914(*/%F#%9d5-2Hs
%r-N&1!i"/0ZUY)r3%%*Q8at[".<cV./)\5g9H59%VV4$,rH)+7Ce`*YoQ17[d[lc+quT#nQMBD3ablB'f;,g.r9])HL@k>r_5D1h
%TE#G^d4au^Ldn*PQ!U3uBp%V\q[mf2$uO\N&#>_o%NacJ"$=cT@YHU<%E02PqPP50PT6(,7tcB'W@o\.^^!]m\n0s(SIr-^Wqp>H
%Gp;R-?*njkG=1TOA/;X);ClA[bCj'<Ck&#t"(-27@@(FHC5!>nJdaV(TWj1p*tYM^0Z0(],?U'f"#;aLMGs!Z"sJOcFm#@UCB=L9
%&?lOCT.)ZiF248Op_tKN>uKgV`I0tD&oh]*Di&M5H[F0>NLXb/AmC!*n4i('mFVt!@'RA-\YMCXP]j-,<cn!n:rE7`9`O3;)p*k*
%N]c-WMNi5@P5o8="&=t1+>OlYP82FriD3,?49VsF>oN.SKRMh;h'SW9bg!2lS1A.,`Ma&*#GTR)%;h$2Edf\r]7<_jS_gS`56)oZ
%HsdB4qt5/6i`bQd)D0Q=d6';0bUo-iI'Ga(Upau])PG3;QEqU">Bhp)Q0ciAJAeGSTtUBH(l!mbKCMXbZ"I#'$_f'a*p;cWcF6dn
%ZeU'S8@RL^8PCAs3"%Z+T#&D,6U*-4[GM4`2L)^SgLhVWFJJM(T8_J3"I5l16-[s;8?a22IeVu0Y4t*3gOFQJZ);kA+M82a,8W;)
%GW:&qcfR(=A9YCP$!/n;lSgU)@BcY\]W@b+FCM8&f]?/%8i?99joU*_\e4hIj@Z%1GW-5MDRiK\PGF+DPZuq0l.PVT9t)+Y+fCku
%o=`i=0;b)-r)_^XA*Al7ej"JO6^P(tj5T>GrL$"XBXlH>77<^ZdY7$_b,I/(8HA]OI7H%Mp!_R3!1H%K4fec%_la=1mZa3tRkjqD
%D]Lf+JV9]5@u!XmO`C3]QIhY6'i*`j1cLaQHT`q$CjjLOK?46amIi'qbN=-87^i2:_Qns;k+!f8/sC?q1bte#+):`V^4F=!!KM6(
%SDaW+^0fuPXVZDL)u(_S#&*'%%KtP+Ugr)K`bCc2Go\(MH>=mDp=%PQkBL69_+8e\T_Th0N#\ad7IH?Dbc!Dp1!?iVRA^-)rA-%;
%^+SP)AB8%a`F4[`c%PHAEFA;@.XKR+X*K\"\,"Qfs0/;Xp4]+q3dTg6psj2&9Rjg:p5o_FICkIVSRH0MB\kR?7`T[NJRMk5ToBO8
%=Z8Cj^'+?i2EG0u7AH-F*CbghDh]Fn(6A:m9bm0<*pkZ8G0d8gr"lp*6cCI0Oiktj#<LBj\$r>ZOmYKlZf`anV(7aS):6BAb5K!?
%C<2Up)8FEVFrh\hmZ>]O9@LnNGgq%9UEjl14[8/nkGd"_h$75aFnFB)mcj](T`ZgF=?.;k>OLZ_EsDmH&E"Z':;FH8`FagcB61%D
%WPbZ$g@K[mY?/1fM.:QQA]B,o9Ig_qH#)SIPCL`*3`E0;TRsI"(_u<OKb,'q,DJ%1)C8X[.W;NNY^?*T\F[/BUG(bT)!*`.qGR6;
%8'RD@B58B[Xh36TbKY&qFha\@\-H6I9[56(/%?*.XfifYW(^+Y:BkQn=6?R.Hl%PVV$n)9)6/s7pqR'`:E=m1NRml?eECRgM*IeS
%UnRjX*%-VN>s>AYp-OMJ5lBn9c0T['9)]TkC-=eI^f"tcoDN'.Wa"$Q:[8rV?q,JaBtG$TlP_Il]aBEep!3eZ<:gW]nh!f.3-oVj
%d!8CXNdA-5ltb=u\S?ORqt%<9?I?&F9);MPHTJ(^Le\i`@m"sfN]OmjM<j([,]$4XB4h_L%%28NVk##6:1%NM1/7L:CFld_3:5cq
%-<N/]lO<4.TThBlaqnpW9g[7rl:WC.$jKYg:HXj*^YZYuYE=5-i%5'A*dG"ur]O15Vqh11F1N3%\oJm'Wt)iVAFs<$MrsHI6/pm3
%U$Ni:og:]4jS#ScNBaX;T\%mqg*=,CS\;t*^<j`OT(Eo/k,D,$c!U3H%,*2j^F4-'TCJcJ1`:B3)GUca4>\uJ/k6At>h.<uUQJbT
%s%\BJbp0['ib<#Yk^88p)1Mg7/g35F#5U7pqD)cj2db4YoO@<j\C+fC,/;dX-NM4_dYE93`,>J`[]Zshh/(3YN1X.qaK7^F+YhDZ
%V6a#WH)3[Vld`XqJj3/I*](4M:.*p':2=KXB<rEWbMQSY+,/Aa;)W5?i]3gcZr^M<B)>1ZR_N-6=pBC!HUdKR8tq+KQ_MR`;#Z%!
%(RZ7mDYDVhM68i8@]T*]bs%SBAo@V/m%^PpiQm)O;mVO^Ss'5*DYDK-6`]h)c9@\Ca9$j7p9jS<<G!=Ir=*!%$])(!_ddP.c+nsF
%Q7P\!BVI5c#KO3]1W^rr&,r\mnqEt!W;-$6/bKiSld'bW][=rWL%1<+.%rBgqCi7@@pMO<)>BF;&#4FR_f%%Jc]%IYei%p>a9@G_
%?aruHAA3=@OcE3[!L'C0T/#krp#t??7`PBN!:Z*;Jk*n["@IAbiTdagR47Q,U'WV,X)%IR&PXB[i-oHY\_fHTHWF;&q&E.S%b0gN
%BPAW%YemH0,"C_oRs8aP@lIGIguVCq46B[^d<roGRQRf?q*Y20CZhlnZDHDp")_h">c=:8G:4UnMRhLHc%@ZKRBqSThLe=#T(^g8
%ncF_6DII`Mi`i7\!n#`A[6)^!$.,*c-bmBg,-VJM[4fkaemDg2KJTfE_pb<;e%n+kj,*8V'*31[-c/!YiFEi,T(6<3\;qU+*$+rp
%JI\nGF6Rtjl9n04k:8q'``0G'Ms90\l+gb>b9bNBY]N\d_W.4l!XBqo!p:79rO^A\4j9"H<qe.pB<9EA&W5JKgYX>J"IE'($odrA
%:p@gibV<)HUVK\r0Q7$,PXQ&^5bfD*3`P7C:@LgjbX!*/Y71+[@>.H1EG3UJ0GgCR:X'iUVU0VA5g"PBH7,)&UH4KKe9sAni;gG<
%63q\("TtW2o;ndoa;GbT?frI8Z*NYFT`Q@B[p:Cu4HAdA?+(D%Cr+,bO,6`B4#CC(SN$\toJhQhi/HEc)&^A""W4u"KdVhsk_:or
%9/<=Dbu$\PO7#Zl#V8t",a@5CVK\#ES>MI)nVD&j`=1@Ti198!p2.'XL!8,j[Ng8b(ssW'"N%%t>FQt;WK!t*[+I*.4,Z"NY"P?Z
%A6>*ARZq"a'>O.5F^*Kd0eU:&:&dIdJ\t(FQ8L\lJJ=Y#ER@%/_6QRfe+BgA@^>.HkQIGqH[#NZs5):bMj1S]fY,mK/[\=^-[*+,
%-NG(XIc)n<*o3nDkldo[@3qQ;U:!4+5.VH-.4An1+Z9[>0+pM]bpZ^eiZO/E'`Rd-RE!!jHtG(]dqWnlnZP];%0%6)`^N:JFbu0(
%K-H`!^V5tspt(R1$NE/%Vt$sKDME9c"!.h*Jl15Z=5&@A)0Qogr`mn.CZc1[694rA"O!+M7D5(:OJpFF7Pah&Vn9*mF><PobRPsq
%T<)844[lpHG_9@[Z#C=478Rr@G`@,+1e_nI)oGe@):/KqHo]S.?$mB]nOiI`U'X`h!i#4F3&$-`HK(ZW43O9:4:7GB;diEfo@;W%
%XGCe&>(.W]ghVB*"ILt&9Y6)&Z(5-N.p&7^Q7`sK3ldtKn\'LS!c+Kf2Eh-Gp^Q`FYG-[JRWZ0nY-MuWq5V7a]DsYE\+'@o-H6fo
%P^<tL#nN+klUKpiZ]mh%ju"O0$17iY_B*)2^PO]h4HL7"U:NXD)PH&<:>#gAiM[-[;g8:UfVH?%AN*im=f;lcY[I3n,0N,UJ2l1O
%=9-mQSIIeCf\6+8aiO]s%Q63b=Y76^'6L>ppf\nMD5@L8)8iXp#-KW4!$4$sb&)0%fs:NN$-afL-L6M.<R2Br[REi3XZtKQOK;t.
%iO^ePVo-GRbb&#BRe64fm^+&9YN?VhHX6_`PJAB#c,XKUh0b%OZd[:m#3Bm$=7;7<,MpYBXimq'OR7FPFMfI?I,gDQ/.;A2@"VY#
%)KVnZ4T<XKHlCeKSEp_I,^eFfI*-j3MJ+4C0N>]<5-a]@S-73M@=qbTV@10fGehOWc0,0.T!g>F#,^`3gR\/UM_EC"^sGbqcR++T
%RQJ<GB';lG8U,doME-/GF7)?l+Z`boRq+YMs2>J6?o1iVrJ&TL]A_(kjpn6IO%Y>i9Y(1FUT/+Vo<aMQPlH'81S:nCmjC<k)cp^t
%FpDW$_&`bEQGl;\kC2#R`KP.gqRK<cSbX9+K&t7/(tJ@7]73)RbKL7sq(F4-f3(nocAeEYl:^EA\K,i6-.S@3;mT)":J(4*p!bqE
%TaZ6>Wm@WA?N2rds.P65BF"jU?A#k5=AX*nSkWfIKB)*tfZddkFNNQWY/Y7?VPj^lmsT(:3\78\h@MQSe+IOV'Fs3&d<\J(Qs8,D
%r=I<$G#g<$U'*\#8@0,V*!;?#M%o*k]@u9fpHs$8dZ&#5VQkg][V3_75'#JsD<ao/9A3;!3T/L!'8T*,(mp8XViVo$mFsF/m>3hD
%oFt6o-`+]\V*+imPWNCJ'd)D;Gn"B_`gKM/a)hM,oRC+8q]T-uS)ZN(PBcVl#e\Bt8f;0FEYbt[,7j]>G:)c1VU0#^WLme_'ie2,
%,7gU5*UkF+TJ./:#tYifO[ufd<X#?C/(BG^9's1<gFJ:)E-':GBW:IV'X9O5Da:8W+sCdb:<l3gcKNb^YS-n8AtA)!;JYbZC1iQc
%0gF6tBUpnc^NUB5QAi'&!12Yt?R^4a*Q4t=TC7@R[fWX9r[aCKr%&XlYk#6SZO;7:H2PJoV!u06.SVWSY?#hSQ#HJNC0pF_C'n5_
%J+1N0IS`aI'86[/]^hrP/&@bJ!j#$3'RfZFB-@9DQj<V&B3G=K'fp;P:7asMJ7U9.OhA6W,@c=.#j@7uf9Xh2KgT4\lj5EhT,u:X
%+RNhaYWdhKDhAWEcqi\9dr6b-5(^,;jQM^N.E^H,c($uGE*ihq&!)fgT"=B6EI0K2#89i3CHD)N[]i9QI+4-,)g=KZ]W1B-9]i`(
%`cM-d(^GMK9^r_K^@1t[(#I_9M)j2)Ri>@0UH>quHJ))LcRuQoRC<ZPlmM6)$Kh'_HXt>j$A/1p_/"eWhVP!NS0[1_*GQ!nLo,*-
%:\iIK]_H1qZ10LI^lMV5_J&f7`iP1VH?^mS*RjVqs,eAOj1@O?G^]8PAleh^\*7PmJCnLbrKJ8j(>QB[,F\(p[7j5?<67&4akYm!
%PccmXbk[qgL$ZW8\nd9_)>9OB@mPqTVVF*#NGnq8Im2Ei-ZDMh.r,M*U)E9KXodi+/8"I+X!)fk(OsF@Rp094e1tYe>.Gqc?*aWI
%cg@6PecePCr79u$h,YU7gQSkOG+?\6135/YFMp*NSW(P*Mb]r!IhRcj`g]KVV&$m,C%/JpGTi:Z=c6)tI5!jSbhW`PBSqHO$e-#=
%S(K*sJuE8A/.s<q`,=4&!uI!&D]!Jc.(P2Mn2VqRfGjN0+lnin7S0?6&Y(LdJf+BXn7^iO#QuZJAB)1`"*$(O'hL>,:>N!2AW8&E
%XrGB[.b$015W'Di^sPd-oUP6%MjU8,J<,^qW/3;6;L"Wq?qj8B"E(R1><YcS-'N(O'j![c3+dFB%"$QiABo*m8.u7CDf6<2Jmtar
%mZo-'49IP]l8IRd^hC3XBcb:<K&&eG@M?gp5^\[nME.@1n,QrWk<S!PFDrc,%C2f<rPm&Uc\H=`c7A2IV8qV(]B8JEKAS^KnJQOB
%]PSk!IgmWph[984p6B1g>&j/&gXn\^B';3T(WGQgb@tUGOPA<RH5))D?T9&9T,!q-D)!'tG$u'aPP,GG,+uG"7tg6L\B>K#`?ZR8
%FF]C;"s%M,C_K%$h6-9BI'>^dgcl&7C[OABUZ7*>U;:]u:?kYKB!>J*Wn@sY?BZQAX#^Z+!&cqekY)gQ7joqsG#qUVA['bd>gNeT
%G^5ka_kgicBG<Dh;?L&=mRmdOLd^EOXQ;I!2jqoh#n2U^oQ;bj@$:Ru,+5@F\:Ur)3##caSIpWU%KJjQ&SL&#OMYu$Qk<]jc!k)^
%%$D?>l+#bOeoD=Z!4\7VD&=<7e5T];N+M&=E\N)h_E-H-(7qiV>]-%XcF!/]Wbab;knU[kEesjqWK#)LL&dBWRTl(T:1/:T/=3#7
%3o+T/I4gjoSE;.N*Jh!$d`lKDmj4N436gj>??Sd;j%ItK^n;>AT;WE0%0=DF*iT^glaX;8:9fsGB1BNd*GhF3KBguso#M+l*WU2j
%P4j4??cAbTlOsbXAR+$?%\4`%LH-)mCIP.KibDS(G@*lHO_pbeOO^$RK#/7RrF0Fqb)pBHGA#3Vk.2ne0R\-SU0Tqd16Ul'U2eIr
%&W>Vb>pM?JVKhJ&nK$!^YFXRA_)?&M?B5Ja<7dYp>MjZFP=YgEWn<+Y$j`O,)A`s*1V6f>TP%[trDI<uhC<?jS%"L.MK\]/eDb$8
%bBsJ!ATu(]d6/:P.UcQEpnhIDA/-/Y!=8ScM+9Z$%,4'AA=_?_4gsmK.(QT'H>M2))Y@GK0.]6>YT8%KI"eX(H[qeBP[#ncC%Grj
%?YD+/lM]T<*`1pQg$@XM4p\q5F"DBn%B<E"'X=qM>F'5p&>iEl_a(G+J-0&Y\=$Y"9RCOV?^i*KS"A:bY($6Bn@;gaO.DDIE(dc@
%(221[d%%K'b?mJU[+u[0r0p^[MBG?A:tDQ6>9jUt%l.^n)S+;kdE$1j[lsY7lZcOc]'.si62#jOgS)ZTCfk[4S+B=V`3AJqglGQF
%fHr_uEleYPI<sP=l*0JJ6qUc>?c.GUq_\!k)!q1GCJJKn*o7G2^:(SnnbeU/5'9"J$OlPFPPNjdD;BDq^)e4ZJ(`\"8$Xe#-`(">
%GT*p-bl*[$7dSkrB$6"lQ[P4i'KdfPpb_JZT>n`c`J=u+mXP1UR2UX)MmQV#Yu&Vhqa1!`m[5YPha;;u,+]-b\,l+?AE1YQ:B&F/
%7gtm16pEJdXZ)!ZcHWn.CqIt02F)=T(gCneS!.Q!L9^EjY]k&q*_L.V-f<+N`qY!Fq"Z!/<2]EpP\a8*oJ4p,[OMgeU$.u\49jpi
%!rN0#L*?h_2f.sf!oQ]Or`TM$RUu6f,T%l@<^R`CdQMfChWJLGrG9.cd/OrWkdU7Y\QR&mU'@<6b[:I",'onBG[s7B!3"j,9FP<8
%PCoY$(kDPYEj5ZTS:gd3Sdc5-s4c>:p#^C%f678n%j+UN8<!E:gb3rZ=gpr<1dr(i2N#@Z84HK-M#p+MEIWE2>'nS`3?OO)U@Z/#
%;5D1Amb-2LF-rG@A)tu)mOfTi]6a#<eb.bC)f$/uTDdosrVSDL\Gu*dNW&X=0CJ;j,X-STrr)A84PnpXs"$,i@G0/6%\N]+VL7u_
%ht`&N=5Rr0nUl&#rl^;Y>eV7rD2Hj?+9+O:o7)145@Ff3s8$*:qnn>Yn%O0l!sSNmqfpIXIt0c/T"2c%pu@k<B@":VHhPuc:n[:V
%*7)Csj5mllq9,,^4\h&eW[OLN3qgp\-)]8S+MN0n&l39Ajq5=To=sas0&PO`qWcCV^"<5tGMW7i14K/hT`cIDn`u7in+BW4V@P:!
%@k*O#iu]@e`]lYTbobb3m/)jQGLnct[r3q'?J^1]c;-JbNP2r682[dnlXPtSs))a^5O.aGj3nRU58=+[UK-7;p=8Qda")[_HQmh:
%'E@Y9H[gD<r8sbu^3"Z>q[S\7G3n5EMp(G@pQ*bu[JSF7_V;g;SNeZ[CWl'/rVk'bqfe)6`T[q06QD_qa,&dSb;XI;T0=k5cH]3Q
%"Q"j),D>eEYO>ir*'r3W:I>s`9-54Aps./\6NlhP;PTe`HUNV\iVlV?'!K)PpdaGdhr!8+f5ZJaV98ZISq]L&D*Pp#?JN2@ro3q?
%fZ4ogam^)7DQdE]Q2gh%lb<AWjitiA$)bC[_Q8WrjbqmJ=8LtK]:7"@S*M_Vr6=Q:[s.S9H5cJ)&&8%miLBiMrLt:(4+-WErq3Jc
%\,R',rP?+`D\)m@hsPH3-9qEhZY,p$_k0oaiUtm1Q=At50@$0fo&"n=pk0WI48]S<4?n0.8itVdb9<1!PUa,8;^hU3SSo/M<BOF5
%<n4%V!9KS7lA$nS[UJjm;j(I.S9h91V8G'Z+]l5Z=+"AEeRPVeY!['I1>rAVZK=tnjUX6t*WIC5RlfaZJr3,8RA+T3p1#Vp:Cp'1
%4p]Ss]stRB65&?O3uV4^flugs6^;/B,oi3g%7/%sO4!'n2Y4u?g,d_OQ5Nb#(H.$eMgqs$gNsCMKFbt0Ce(*be@kaSr3]92k?0<g
%)+Dirq%]#jW'62N2_`E++Wm#Dd]mt=gh&Br*TJk4+4k,hkTba=LY@i4`XU]=[LKVrrcF40pC`L[(KkVKa&9TPKpMu;lmE(WKpmih
%<nCEkaeZA.%29+MkJCX;-&@T^`e4P$kotEi7A#S!0pf0UA&)ufJSe$u_ou\am`ou-_h9#W2]YNs]'B[bA*Qpe9g,I"`a"OTlO`G5
%'hU=p/4;>$\_,MGp#p_plVJO01Km9Nj09rpp)GP'`IcQ"UET!6/Sm85M]Y;Lf]1VrS.Y]tMT>/N[e85:L'7oj*"@E8\W.+*a5UZ'
%[LNDYr-G;sAL*XMa3(jd%(XeTeBn0J/0(DqFWG3aQ5M&0(,grR[@_>UloU&Za<ItM`"a#pE]Gl;;OAR<$mp:)CKUQVA6#er)@T5!
%cSA%S+37m:W>&_f3L<Y(dRZhY5-Ep^a?%uYDCaF1g=CY_[Gfbqk^lnESA!Ys><^&1g'$A!6=hqb==QBXLs,F=\/>DI0gO*,,^8n;
%UYdu'+m^Qta-F4oPOO+dYRNGg^!8O?D,&b=gU^1i2gh'XFlc#@./u!e`cuo@+\VH@U!T(E+?$\O&fW,?<V^R+*0^+NX>,mj?;1^O
%gO+aC/'JUAIPqiU>ZtB%R`I8C"NS+9:h/l'G,RM&jEk-_rY#K-iYt>0+OUfI/lDiFfN[bWKQ<?J1Hef`/Zjh&&ORX$W1[6lbnV-U
%L6?M=,dBAR)$b2Y6.EpnQY(8MWR1U)Tf-GPEIq\/gJHYa+7)jYi$\S&eri,-?][CJW=B3$P@?tn#dQ]RN.DQb"su1$E$9P1a(L_U
%41jeseU.s)HEKh,F::&?P'YJ'mk#RqaG-*J)q,Pfk!Yb#?UA;%Ct1nn5S=NR)9F/AYN.H=r.*$>R9sI1PbT.rcgV>u<:@@;*cCi0
%r.+PI(Ri?BR<8e18do:N'^9Q?M(L$N>2J@1=gZQ7D6p$JXm8SuE_1=/&RAd#$1a?%UPDc;!`F(adZG!0>Fn_S-S-r#Sk&MnpS7>K
%hs=Ej^839m@J<?X"B!FlPTF!UR(UWR7)F=K6p)WTj;As`q%I+XY5Y-DJd(I?oK(>TQ(YskPtWDUYXn&YPHiG(SjJQ.8OFC)Z,i4B
%A<Y(eLt-s4An&:0eJ2n,S#+D[9<dj^G=b68iD;OZ(9DcjGH0N6lQTQmk"]JAA0\G-%Kpu"hq+;9obb'<CK2#rEP;RW&eMh-\Oo/V
%;tW6nlb]M1/*o,j%jW=Qjs[Y'[TZ(^"+QoTDG)0QTGUVQMR4q&iOQMY$KiQ>'P'gYWNE*#p#Zu<3N6'c:dI1Qigab2%H^TOCkte"
%dEf_^.S#o+cum:l3bodIh\%k@Og2[O)G>+F7PLPX!n),27(d&A/Ctk7-%t2ene$dr:5uooUk@9:I\<YQ2C\7UWC2N"%r$-Mb,o`?
%/Kf@2[3dWQ;l7frN5!jUc9'0U"<D8=4;@b'Rmfk&#tH2_6j76>&MkSeM]*s@F,`^#gnpTWTaqi*1dW#!;TSucm[Bsg8NV`!fjO*4
%P"+usbUJAU<6pAPA<T$`82&D8_17Fbd=.cVD8k=rU8aJi\Rs8Y6le+JO^O:8U*0TqFEp`@(DDZX3:tcN9io"\:ND5hbJP%=g[_p5
%gJ.OHf(ZJhc5$1@Y9AC0a>3"V`N6h_Z]CDKMZ_0r0oZ=;Mn%"-`PZKTWf=G7d60M_nD+=$B1dip'G$h*heZ*2;\`8l[Bj?P?DZV[
%P,HJF%URF@ck,8_LOWrAd[Eb_H=gF(PlX6O<G_2@MpU9Pr184C*%O-b6p$PPiatif5`qUpQMm>>jl5J]Nes#;,(WKh[NWhlRCDP4
%p''g.qDB@:<O.5!iEP=L:3L-:7,SI:$>XS1.[Pm)4/aE-pJWAOg4H+9l'?&jR>@Z#EVP\8TeJGQ%lZe@%tDUjKg.s&/[XmfXrs[g
%bNs8NI]V/l`X]I'-L+K,D*d8R%jR_MP/&VSr`@"<W$mo7=LH3f`!^7ZP"gn[X&"?d(=lW]4HNbQ&m`j_&qRFofk#%?(aWn@E3-!/
%HXph?N[Pnhb&te;+AF_+*_*\>]4%uKm9JRS"`PV#$6s\qcPi*sY(ou@r./dg<@&$-$GfJ(LItqMCRHS^I2fI-eHjk[CGdH=XI6"T
%)Lj_Pj_ugi5Lr6<HRnRh'\u\!M%e*iKdDHi7>pI&IFb0P(7:eUfkIr/e[8@0Gss!QFJaj+!KX3YT.+5BN,r.aCRNF>[)AUO9eBjF
%,*+QJ3fXM>A#p5?lpZ3:i2VOn81s5E#'JsuI)RIIA4EcKSs;m7%Z1pt9P5_''g'a'$u@&%)Uh,(>#r\!;@J+O4HnJa:5gK^D?m:Y
%)$\bdIRr`9`OG]l+K?&K*IUp&A?LT78FMMe:s'Er`Zr]=As_cm`#U`g75C44r@50HD0/E2'.XZ*_4%r7q%;GbBR%s?Qu4B!V/gn2
%"Ogqc\O.oJ1C^XraMW?8\j$Gn`Te#uS'&W_HD00sR6],]P?4=Z]2.:N,HhK@gp%W#<Mns'8BJFe.Fb@<P9lFpL)>k'Wl@XGXtQjR
%\N^mI6A15lbOT0*7OA=G03XLi8lS#W,t6FG"j'usUd=`.=]qpHLO.rP1Ql_c4/M,F;A)\L*Rk6c<,5>;Ju$ndW!1'q\;Td18>Coa
%a=-6a2R7E.ekjn).YWS=&.3]9W-;(o^id8`?:!j%?"kDpO[/[r,!uZ'duKSNHdi?]=lkhee'r1Z.L`GGX@FG1O=h6u(QDtKV5d=4
%)H'!1E`K:f`M/O>XkRq8r(NT_)/c00<U&3T8]CBq[ZHB'frlR2[@/O%[DnqpVmHt@N@?.uet!a@,;tljQ5#=01f80'8O@.OMGjQU
%bDIOkd;U&MX7u<:B[tGWN;b6!4cYHJ6'*9^qH,3\9M-R6N0eolLQXf9"rhs<_b<5TEJ?)W?)m3bH%9#@j%=2flr:)l&sqOs)+O(:
%@3I%=R$;9[n(+h3H.6\g!HX#5X.,S0FCXOlMn.9-[@!-d7M4<Q*/>A9"EP`_W?)8r-Dq8u%=4J*/kCL4I2\-JJ[>Fp92LBeKtB69
%26&0?eDH)Y5+>\G`Q$n!_@F15"I0.Z+Is^.*BHYo0fb(2_gi,-P\jJ<<;1Z2K\^ijOZiT;AXIZgdYpdd',8cH8gEa3`G&=B\;M'D
%Y=(&C+U&TlcX%iPj0af;i5H&?@f6B?`<s81+Ga_3)@7'Y&N_=iPB>_sb0l/Wa^j5r\k54:a?ShN)e+^bf8^2)[S\UOiWKZt7-=8(
%F8UA96N;JJ8qTqbW<BF_4(3^R!PoUpeL(T7YTdNt8Oj_m**mCoY:b!+[)@2.In9IqTq%`/JfT00eYPlLV\r?q'V1K*O<9TunfrbY
%ZUlJ!ia2>A-&BP/qnh@a,5VP3ZCg&!q]/5\cgb#dEtOo.k@,1C3#uO!g,aA2MKRPdiU#a]9>Q;I<&sFUQ'ddqr<*hbFM1@%3n\>m
%8n'X^OUVm1(+6"TH@fNL:bZ<+K]R1r&!,q%+Z-[Yi4_Q`/^J?>pAcjiTS*D=\&W(^lTB^#fk-DP\-!Gk#_0"fKg`Gb,',OJ.'Cc=
%6g^h?g0D_:p!*^5Hdtcg;'b*-k!5c7V]uL=1OGT6e3E.W6ng]F5r:Q89U[*hDCEXc<#G^dRrKS7(aVAre<abR[:/^N:_QuDgq[c8
%gJHYa+7)kD5b"9.`&o^j$35?XRM`M2/N%E:P:!LbAciXC.O+U(#ch_pX_kY#E;'An6Wfdc'>.T*7bWrH_?nr%[ZT^p:\XV8M\L[9
%r2lsq;QkWBaEF1.RCd2?9"C2b"><f[,SX(4NSYboQHk!6eC*S2,e:*If$4=>k[,M_9UpFT@Q"]T')]0H!AkT:!NF7$QY4XmiO<I)
%9(?hDh*n;G8Wk>4.9c:1aQl1/8kVPbaIllZY0o0r$t)AO6o*FdQh@ol=Ns=HA2:*n2bR:VL(qJtnEEAH&9Pip#[bd'X@_"(SVI$#
%,Thi\+`5[n=0j,"p8%$F+_o';`!BLSJdSYOo6RUJJ>g,R*Y"^W.JFN3U*Kr(:1Y[GBH/$kp\']D#9?$J,*\3%]9)EehQ&YFFe&M(
%QBBlfg=/qLGGW4tW#J@0%_Ho,C-nlU(u:/:(S"7;dh<j%\j<3)o"^s"Aci_h@cVK["9idk#;<O%noGueVPH,[JrLg?&Do&GN1e:C
%Ut2$?;lu%>[5lJ?K1"0o_*>0h_ik["C=;s@WJIO5-90/>W,hPNeEu1X8Ou<m]5<'I9kV$k)Tb9e#%3[i]SgNH6X<b=afY7=q,F_e
%Xa1Tlm'B+q/f[E?b.g$uQSEs7bY<*KU,R8F#EiMobBO0qI3=dbq)+abVkTiQ7OYX_CXi]Q;TK;HEReZXXqI4I3DY=F!]?+Xg'llC
%)*KNgeuNZYRL/jW<^$)rfp4%'3Ju\\N<T^V"\@=,F@'r[E!*d%HfD\4*antn/YNIZ^mpC\.D.1NWiO\.$!0.:rh;,Ob,RR?b@c5X
%,M@WLdr"s,VpM(TR(&qbS[(&8Pc80>>LS*q#p-?-[^gs(#EhKB>-is_$'Ng&h$E&9!)7Cu`8\n>9LPC@88\"R5[YSQHhCDS=)gK7
%\'d7GD)t1%Jebf[BCSu;nq[ncLu^<03#tQiiH$i#MIK)>?<+ioj3GR?.Z<G?Qt;-#Lhee#&[<1$fZe^"rh&jEmWQg=V:a3*Gs:Ah
%,\XU4FKEGWU</@k9W'.Ec@[S2TO/7I)J8FO]3$fXDm#lV#0J+*0H2EqAF>oWX`43]\X[HE>3tohU3nI>F(M?lGQpaui?9e1`8O:,
%rt[2&+Z;nAn#G1O,hsaI.C$=<TV(;R_-=S$AqGgpYcpQMn$lgceS)I1@7O0o1;/bq[aT4NluY<$2f1s_7BP!3K0%lWFlNj4AcipF
%dY$?ehR)KPjT7&tn$je?nLoI72>eMj=hn/@M++g<8YM/Zck*C!gOMjEW'W#A&*2\5.Egkqh07rH?&bR)Mp?_R.-MosElT,NY"2rT
%ck2g?^),iWFU1O++D<;)dW+_dG!`&1#K[p?JX?Lp,KOXV3>ib`7b&bR'MOh;SG>K<b;>V/S]];W:g\1iNL0,-ckI;[lr];E9FWp6
%N&HJnp8YK]4%$QXoTQ?Y]0'/Yd`e[2WTBV+D9"Dk%bIGWNc'2:]\$G'cV,MVQJ+DoWU2_m-_oh8BMig>f\R1P;ZW'S8I9=L.:7U2
%A>s"PM_[rjFUZM-JV'em5ZE;#/LP,^!I!LN"5_*E(I>ZJPf-3i!0V)4-;re"fe)3$;'T_8W6AkM-4@tXoaXPZDZU\.+9U#'3E8_@
%E:!rWi-IlM[4%d\d)E/=WPYiHl-*?f8`QgT/l'UMJ@g_\h&nmX-0X9?\=mGO%8atqCI5_`F?1`uRUC:K0"FD*Q8[aFB0hXQqU'/t
%AD`6GA6M^J]5'HW,J=SbL>.G+QY9/=pr$*tBpr<mPOkkj<J*u,KcOP=%#&VkXo)e=^/JHtcY@7.ff`Dj$.\$>QdYm6h+QEPRFdoK
%E@:!dTE`R3I+@<Z?@5;[0:&US]Z6m!\D_hK"%@3,6=$N]GeLfGK<;&J,o.D'0a,fEBf=LTn#k!&JG!=GO,HaB7i[3=B_gurOiZ9#
%4>T]!TQn=Ym?.iV0EoNV)5KK%>S4]"#c$Da17M+^gJ(9.$7)\=-'97^!]>_3ACJ@@GL:Lg+GId@1_p0Z-"Irg>0GiE(;=mJas8R.
%4-D*9_"ic26P!tKnYTB[;,348]8(AO-2Y+Qoi0AX!469mBP>kS,te[SY#nC1UYbejZcfAPQ9c[HY`?,Z@s2!r2S)#aK9_AtYlL6]
%G^kdd6p9H3l#-:=%I>LN<ASs12\8Q96:of$%:Ik*P`34Dl.1_5<RSKLVr!9Nl(^9U+1!QLiTg\ph1Tm@dULiI_M1l5,;0]js3R2#
%,7D&Gj;8-]1s+?"\-jtWW&<[gH&%kW9Dia571e]L0./@COf[/iYf.PP?7>VK:O`CumX)?Yfrs%^5O%T4jQC[fU8lK8h?2N?4-dck
%@*+=M`mFIcg;)Oi,i-q=g^etJXdtJt11riiS_K/?P5HB83:CN($'NBCl_K5b7(uD:Zk*dg(N%2#V'*Js]4$+#7Y'Q>F%F/<8f)pB
%[IQWaRpX8]8MQ:R=WenA"JcIT*kW'"Y%3R_6;mE3_O!h%Xh\=u->'%b!*=35U_$%nj'G8"J@3qL#m&C(BQ-:'I*[)Y$"8<HgZ9tX
%+Ws?l?mC@RWm^a('S;]N2%GGD&5GnmYtS1(8C0HtaU4je3h>Z='XC%jAGS,cT`pjccjh<O"GF/1+GBgFQH,2rAg.t6<f<TG&.f^-
%9i?e)Pq:T.X:W1K`P8ZEOG$SZ@3^.B//R[<gfP`@fb2KUW1qkcP8+..3S.eq;J:<<g*\BRUa`-VX:PtM"YQkf-Br+j`sPZeoNd3V
%6I^g+hpSlTcule$@tapR3SGU0Yes`+_Y.rpcJD\7;@&F/?SYjE3sBsk6V`Gll0YUqi.PdYh)5C2#XI;_iuj&!Lp99.$op(u$$jrc
%4?V)l_$U3YfnINTES34FaU1oDM`pADZk0$rG]PWb+kip0,W0$:85[ND&jnW3&qbfQ!g'kRZ+2A_Oef+l:r5pm*7#11,BSoZnj3^>
%H(c5aN!$Uo-SL/K8ujHo"=RFk8QH+Dl/"B<Z9gf%o+*o`LcS!LB!=U$+!8q,Hg"IpiL6hZ&#'cQ2@FalQmO=OkM^1/YsL/6*:0(,
%=WnpE\%uTO(J_liSek#HJX-fCE"hd0Y4[4QM>0WgSi1>nM(#?L?G[.8B49o6L7:^`@O-I02j*!(/b]WN_FRYM$c7oJ/S6-3=[)EB
%QS$oZLtIUZ/_].;QrNVhD'CSom?O]+RhaW9blgPP_3^D.&.LT9gkEHQ3"Z\3@TjrcDNDGY(8;BGT5!lFcSa\f(cU!BS)a76p6nJr
%%]#A1fLMHfG;,<qC;bsRl4TD5'+nH']o@OeT\*.H!`!iib9$at,"o^S5n,f9:V5$fEFa#qL=71U-c,tE>@[NsLc5@;/J/6!jdY-t
%S;<sgod/Tc]J<ZCM$PX*h),=8UtADF[_XanMe3lHn6K":INNM3Cac5o^knf9_($rE3'_Meqg]?rc).]U3)BnXX?beToHCiV`>^GY
%MR4tl5T=H29>HZ!o&96M-.oLeVHa1_#Y#GuZo5hLf`Og*30DCBqhQJi4u")j#<#jk=<c%JN/4fLn1khMPG/Y/0O&ZI+Xa"l<S8:2
%,1m@*WAWa)HnSC853,-$LF"Jp#H!r*=@/#fTN(>r+*%LK9K+OX#No>j>@J(+H;8WFZ,I]qa7:k/R"Ho8hG.oBB-L!m=[C%I4S?"%
%=@5j%BD7][O-gSXSA_o?*U%0D6;GH0m">'bj?Un9.nds?I$rcU=9?h6NL/<b%Lurl4+Zu1jR'C;,?Dt2FH&8B^;V`;-\B^Qa6+@\
%*^l6VLkCJ)H53b#<?&I!:O'(b9B6V8CJjb4b`ecY%i4PlJs>7lkM/?"o`.7gZR:nNq-$B9<@lsh\Z*UH;CefVGC2=RUmeRYiH<#D
%\R_=bnAucJLR6lF.VbeU6(ZW*^+n*p6.VlP,9-9K@S50gWZVR09*A.>>&nPEcuG\)o*^D<B-S7EI^tWlIM7\lfYoSZLL<>7nR/m^
%*f)/SZ,+",C.uS)^+,2($7:5-V&c[G"+cMhMA_mHL3HpQWs'<jH_7ZUk%21H-uT*q6!b`e(BkA&I5nVlK;p>l.8`5Acu4CnT>'U,
%H&6GqMTDWAR*'rU(LIX_FlmGePSggmHZtQ/q?at@&bGN,(oQVhH%V.OZ&,)A=sY/Pre_/&_igXL&#BoR"&#*Hn0X(J-Y:%tGU9ko
%Pa6YNb0@>+6](gH;M(`u0lH"E,gikJ]E\ZcmPc^jh[o-.pT:3AGVs=f-2"O39Wpj/k@Q[Bp)?!$Y46)(LPg'<eQ[R@GFil6"#82&
%^#In;<BR2tOV@NtA?)U>Y/0c)/gS.S/li5:6-aL_pg==Mj2!0NI=O!b>OaoEh:9;Aa2BV5:9O$u5'e2U#7$J.4)ie,cJK!!&6tbH
%IZHs9-QWi*48U'R+a)Ul]9XiA\QGJ0iA]hf4a;<rn\ppq3peTX>k=:rIu=9tQXB[fjn"s+gg.XAL#9'3r8$HF2i#R8Df5"smr.]"
%[1:OODVj4,hVB1.]srJ$"J)t2^\Gd7^\d3#BE&KoPHSK~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial -300 -170 4500 4 v 1050 118 a Fn(ipsum)27
b(dolor)e(sit)h(amet,)h(consectetur)e(adipiscing)h(elit.)37
b(Morbi)25 b(at)h(justo)h(vitae)f(n)n(ulla)g(elemen)n(tum)122
b Fh(51)1050 217 y Fn(commo)r(do)27 b(eu)h(id)f(massa.)36
b(In)28 b(vitae)f(diam)h(ac)f(augue)g(semp)r(er)g(tincidun)n(t)h(eu)g
(ut)g(eros.)36 b(F)-7 b(usce)286 b Fh(52)1050 317 y Fn(fringilla)27
b(erat)g(p)r(orttitor)g(lectus)h(cursus,)f(v)n(el)g(sagittis)g(arcu)f
(lob)r(ortis.)36 b(Aliquam)28 b(in)g(enim)392 b Fh(53)1050
417 y Fn(semp)r(er,)27 b(aliquam)g(massa)g(id,)h(cursus)e(neque.)37
b(Praesen)n(t)26 b(faucibus)i(semp)r(er)f(lib)r(ero.)579
b Fh(54)1050 483 y
SDict begin H.S end
 1050 483 a 1050 483 a
SDict begin 12 H.A end
 1050 483 a 1050
483 a
SDict begin [/View [/XYZ H.V]/Dest (table.caption.8) cvn /DEST pdfmark
end
 1050 483 a -303 602 a Fl(T)-8 b(able)32 b(1.)41
b(T)-8 b(able)32 b(caption)h(Nulla)e(mi)f(mi,)h(v)m(enenatis)h(sed)f
(ipsum)g(v)-5 b(arius,)31 b(v)m(olutpat)i(euismo)s(d)c(diam.)p
-300 644 3879 4 v -302 743 4 100 v -250 713 a(Heading1)p
1619 743 V 1619 743 V 1526 w(Heading2)p 3577 743 V -300
747 3879 4 v -302 846 4 100 v -250 816 a Ff(cel)r(l)r
Fn(1)p Ff(r)r(ow)r Fn(1)p 150 846 V 99 w(cell2)e(ro)n(w)f(1)p
640 846 V 99 w(cell3)h(ro)n(w)g(1)p 1129 846 V 99 w(cell4)g(ro)n(w)f(1)
p 1619 846 V 99 w(cell5)h(ro)n(w)g(1)p 2108 846 V 99
w(cell6)g(ro)n(w)f(1)p 2598 846 V 100 w(cell7)h(ro)n(w)f(1)p
3088 846 V 99 w(cell8)h(ro)n(w)g(1)p 3577 846 V -300
850 3879 4 v -302 949 4 100 v -250 919 a Ff(cel)r(l)r
Fn(1)p Ff(r)r(ow)r Fn(2)p 150 949 V 99 w(cell2)g(ro)n(w)f(2)p
640 949 V 99 w(cell3)h(ro)n(w)g(2)p 1129 949 V 99 w(cell4)g(ro)n(w)f(2)
p 1619 949 V 99 w(cell5)h(ro)n(w)g(2)p 2108 949 V 99
w(cell6)g(ro)n(w)f(2)p 2598 949 V 100 w(cell7)h(ro)n(w)f(2)p
3088 949 V 99 w(cell8)h(ro)n(w)g(2)p 3577 949 V -300
952 3879 4 v -302 1052 4 100 v -250 1022 a Ff(cel)r(l)r
Fn(1)p Ff(r)r(ow)r Fn(3)p 150 1052 V 99 w(cell2)g(ro)n(w)f(3)p
640 1052 V 99 w(cell3)h(ro)n(w)g(3)p 1129 1052 V 99 w(cell4)g(ro)n(w)f
(3)p 1619 1052 V 99 w(cell5)h(ro)n(w)g(3)p 2108 1052
V 99 w(cell6)g(ro)n(w)f(3)p 2598 1052 V 100 w(cell7)h(ro)n(w)f(3)p
3088 1052 V 99 w(cell8)h(ro)n(w)g(3)p 3577 1052 V -300
1055 3879 4 v -300 1121 a(T)-7 b(able)27 b(notes)h(Phasellus)e(v)n
(enenatis,)h(tortor)f(nec)i(v)n(estibulum)g(mattis,)f(massa)g(tortor)f
(in)n(terdum)i(felis,)g(nec)f(p)r(ellen)n(tesque)h(metus)g(tortor)-300
1221 y(nec)g(nisl.)37 b(Ut)28 b(ornare)e(mauris)g(tellus,)i(v)n(el)f
(dapibus)h(arcu)f(suscipit)g(sed.)1050 1570 y
SDict begin H.S end
 1050 1570
a 1050 1570 a
SDict begin 14 H.A end
 1050 1570 a 1050 1570 a
SDict begin [/View [/XYZ H.V]/Dest (section*.9) cvn /DEST pdfmark end
 1050 1570 a Fb(LOREM)37
b(and)i(IPSUM)e(Nunc)g(blandit)i(a)f(tortor.)1094 b Fh(55)1050
1723 y Fn(Maecenas)26 b(con)n(v)-5 b(allis)27 b(mauris)g(sit)h(amet)f
(sem)h(ultrices)f(gra)n(vida.)35 b(Etiam)27 b(eget)g(sapien)g(nibh.)38
b(Sed)151 b Fh(56)1050 1823 y Fn(ac)27 b(ipsum)h(eget)f(enim)h(egestas)
e(ullamcorp)r(er)h(nec)g(euismo)r(d)h(ligula.)36 b(Curabitur)27
b(fringilla)402 b Fh(57)1050 1922 y Fn(pulvinar)27 b(lectus)h
(consectetur)f(p)r(ellen)n(tesque.)36 b(Quisque)27 b(augue)g(sem,)h
(tincidun)n(t)g(sit)g(amet)363 b Fh(58)1050 2022 y Fn(feugiat)27
b(eget,)h(ullamcorp)r(er)e(sed)i(v)n(elit.)36 b(Sed)28
b(non)g(aliquet)f(felis.)37 b(Lorem)27 b(ipsum)h(dolor)e(sit)i(amet,)
150 b Fh(59)1050 2121 y Fn(consectetur)27 b(adipiscing)g(elit.)37
b(Mauris)27 b(commo)r(do)g(justo)g(ac)g(dui)h(pretium)g(imp)r(erdiet.)
38 b(Sed)308 b Fh(60)1050 2221 y Fn(suscipit)28 b(iaculis)f(mi)h(at)f
(feugiat.)2226 b Fh(61)1050 2453 y
SDict begin H.S end
 1050 2453 a 1050 2453
a
SDict begin 14 H.A end
 1050 2453 a 1050 2453 a
SDict begin [/View [/XYZ H.V]/Dest (section*.10) cvn /DEST pdfmark
end
 1050 2453 a Fb(Sed)38 b(ac)g(quam)g(id)g
(nisi)g(malesuada)i(congue.)1361 b Fh(62)1050 2607 y
Fn(Nulla)28 b(mi)g(mi,)g(v)n(enenatis)e(sed)i(ipsum)g(v)-5
b(arius,)27 b(v)n(olutpat)g(euismo)r(d)g(diam.)37 b(Proin)27
b(rutrum)g(v)n(el)253 b Fh(63)1050 2706 y Fn(massa)26
b(non)i(gra)n(vida.)35 b(Quisque)27 b(temp)r(or)g(sem)h(et)f(dignissim)
h(rutrum.)36 b(Lorem)27 b(ipsum)h(dolor)e(sit)176 b Fh(64)1050
2806 y Fn(amet,)28 b(consectetur)e(adipiscing)h(elit.)38
b(Morbi)27 b(at)g(justo)h(vitae)f(n)n(ulla)g(elemen)n(tum)h(commo)r(do)
f(eu)194 b Fh(65)1050 2906 y Fn(id)28 b(massa.)36 b(In)27
b(vitae)h(diam)f(ac)g(augue)g(semp)r(er)g(tincidun)n(t)i(eu)f(ut)g
(eros.)35 b(F)-7 b(usce)28 b(fringilla)f(erat)294 b Fh(66)1050
3005 y Fn(p)r(orttitor)27 b(lectus)h(cursus,)f(v)n(el)g(sagittis)g
(arcu)f(lob)r(ortis.)37 b(Aliquam)27 b(in)h(enim)g(semp)r(er,)f
(aliquam)246 b Fh(67)1050 3105 y Fn(massa)26 b(id,)i(cursus)f(neque.)37
b(Praesen)n(t)26 b(faucibus)h(semp)r(er)h(lib)r(ero.)1202
b Fh(68)1050 3337 y
SDict begin H.S end
 1050 3337 a 1050 3337 a
SDict begin 14 H.A end
 1050 3337
a 1050 3337 a
SDict begin [/View [/XYZ H.V]/Dest (section*.11) cvn /DEST pdfmark
end
 1050 3337 a Fb(Subsection)38 b(1)2654 b
Fh(69)1050 3490 y Fn(Nulla)28 b(mi)g(mi,)g(v)n(enenatis)e(sed)i(ipsum)g
(v)-5 b(arius,)27 b(v)n(olutpat)g(euismo)r(d)g(diam.)37
b(Proin)27 b(rutrum)g(v)n(el)253 b Fh(70)1050 3590 y
Fn(massa)26 b(non)i(gra)n(vida.)35 b(Quisque)27 b(temp)r(or)g(sem)h(et)
f(dignissim)h(rutrum.)36 b(Lorem)27 b(ipsum)h(dolor)e(sit)176
b Fh(71)1050 3690 y Fn(amet,)28 b(consectetur)e(adipiscing)h(elit.)38
b(Morbi)27 b(at)g(justo)h(vitae)f(n)n(ulla)g(elemen)n(tum)h(commo)r(do)
f(eu)194 b Fh(72)1050 3789 y Fn(id)28 b(massa.)36 b(In)27
b(vitae)h(diam)f(ac)g(augue)g(semp)r(er)g(tincidun)n(t)i(eu)f(ut)g
(eros.)35 b(F)-7 b(usce)28 b(fringilla)f(erat)294 b Fh(73)1050
3889 y Fn(p)r(orttitor)27 b(lectus)h(cursus,)f(v)n(el)g(sagittis)g
(arcu)f(lob)r(ortis.)37 b(Aliquam)27 b(in)h(enim)g(semp)r(er,)f
(aliquam)246 b Fh(74)1050 3989 y Fn(massa)26 b(id,)i(cursus)f(neque.)37
b(Praesen)n(t)26 b(faucibus)h(semp)r(er)h(lib)r(ero.)1202
b Fh(75)1050 4221 y
SDict begin H.S end
 1050 4221 a 1050 4221 a
SDict begin 14 H.A end
 1050 4221
a 1050 4221 a
SDict begin [/View [/XYZ H.V]/Dest (section*.12) cvn /DEST pdfmark
end
 1050 4221 a Fb(Subsection)38 b(2)2654 b
Fh(76)1050 4374 y
SDict begin H.S end
 1050 4374 a 1050 4374 a
SDict begin 12 H.A end
 1050 4374 a
1050 4374 a
SDict begin [/View [/XYZ H.V]/Dest (section*.13) cvn /DEST pdfmark
end
 1050 4374 a Fl(3rd)32 b(Lev)m(el)g(Heading.)82
b Fn(Nulla)27 b(mi)h(mi,)g(v)n(enenatis)f(sed)h(ipsum)g(v)-5
b(arius,)26 b(v)n(olutpat)i(euismo)r(d)258 b Fh(77)1050
4474 y Fn(diam.)37 b(Proin)26 b(rutrum)i(v)n(el)f(massa)f(non)i(gra)n
(vida.)34 b(Quisque)27 b(temp)r(or)h(sem)f(et)h(dignissim)g(rutrum.)134
b Fh(78)1050 4573 y Fn(Lorem)27 b(ipsum)h(dolor)e(sit)i(amet,)f
(consectetur)g(adipiscing)g(elit.)37 b(Morbi)27 b(at)h(justo)g(vitae)f
(n)n(ulla)269 b Fh(79)1050 4673 y Fn(elemen)n(tum)28
b(commo)r(do)e(eu)i(id)f(massa.)36 b(In)27 b(vitae)g(diam)g(ac)g(augue)
f(semp)r(er)h(tincidun)n(t)h(eu)g(ut)f(eros.)105 b Fh(80)1050
4773 y Fn(F)-7 b(usce)28 b(fringilla)f(erat)f(p)r(orttitor)i(lectus)f
(cursus,)g(v)n(el)g(sagittis)g(arcu)g(lob)r(ortis.)36
b(Aliquam)28 b(in)g(enim)164 b Fh(81)1050 4872 y Fn(semp)r(er,)27
b(aliquam)g(massa)g(id,)h(cursus)e(neque.)37 b(Praesen)n(t)26
b(faucibus)i(semp)r(er)f(lib)r(ero.)579 b Fh(82)p -300
5618 4500 17 v -300 5735 a Fg(PLOS)4170 b Fn(3/)4159
5735 y
SDict begin H.S end
 4159 5735 a Fn(5)4200 5681 y
SDict begin H.R end
 4200 5681 a 4200
5735 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.5) cvn H.B /ANN pdfmark end
 4200 5735 a eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1042 -406 a
SDict begin H.S end
 1042 -406
a 1042 -406 a
SDict begin H.R end
 1042 -406 a 1042 -406 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 1042 -406 a -300
-203 a @beginspecial 0 @llx 0 @lly 216 @urx 35 @ury 1440
@rwi @setspecial
%%BeginDocument: PLOS-submission.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PLOS-Submission.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Richard Basset
%%CreationDate: 1/13/2015
%%BoundingBox: 0 0 216 35
%%HiResBoundingBox: 0 0 216 34.6541
%%CropBox: 0 0 216 34.6541
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-13T11:29:27-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-13T11:29:27-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-01-13T11:29:27-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J+btcm0Hytq+twWrX02&#xA;m2c91HZpUNK0MZcJUBiK08Dirzv8iPzqv/zB8t6vq+vWMGkR6TOsbXiOyWroycj8Up+Fo/2vi7jp&#xA;iqfzfnt+T0U7QP5t04upoSkvNK+zoGQ/OuKoz8sdB8paRod1/hbV5NZ03UL2e/N0959eVZLhuTIk&#xA;gLUA9zyJqWJJxV5J+V//ADlDrvnD81l8qXehw22lXr3Edi8fq/WoDBG8lbgsxRqiOh4ovE+OKve9&#xA;b17RNB059S1q+g06wjKq91cyLFGCxoo5MQKk9MVY0Pzr/KMmn+L9K/6Sov64qyjSda0bWLQXmkX9&#xA;vqNmxoLm0lSeMkducZZcVS3zH598leWp4YPMGt2Wlz3Cl4YrqdInZAaFgrGtK7VxVObW6tru2iur&#xA;WVJ7adFkgnjYOjo4qrKwqCCDUEYqq4qlPmDzd5V8uxLLr2r2elpJ/dm7njhL/wCoHILfRiqXaD+a&#xA;H5da/cra6P5k069u3/u7WO4j9Zt6fDGSHP0DFWT4qlPmPzd5X8s2gu/MGq2ul27VEb3UqxlyOoRS&#xA;eTn2UHFUm0P83vyw129Wx0rzNp9zeSGkVv6ypI5PZFfiXPsuKsvxVjfmnzVcaLrXlfT4oElTX9Qe&#xA;xmdiQY1W1muOS06msIG+KskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ8l/mx5G85WGqahoWo&#xA;etaaM5W/lkjeIIoUsJPjAqjKjEH2xV4pceXbv86dK1Tzj5n1e48s/lhprTvoemWqqhlhtuXq30/I&#xA;Fa1U0+E9wKUqyqSeTvyw1fStN078wtc8pWfm3y5Pb1i0IW8EWoWWnl2eG5+rQpFaXcrxMHkDKXO1&#xA;CN6KpJ5L03U9H81eePMX5S6q09j5eNpqcGlAl7a+0y7jaeW1kRvi9W3X4RUc6hhs4FVX09+Xf+Av&#xA;MGmW3n3y9pFna3euw+pcXsUESXJcsRNHLKqhmZZVIffcjFXmX/Oav/krNK/7blv/ANQd3ir5i/Ln&#xA;8m/O35hwX83luKCVNOaNLn15liNZQxXjXr9g4qq+UfNXnX8oPzBbkslpeafOINa0pmBjniB+ONwC&#xA;UaqmqOOmzDFWZ/8AOX9zDdfmlZ3UDcoZ9GtJYm8Vd5WU/ccVfUv5A/8AkmvKf/MCv/EmxVLf+cgv&#xA;zf8A+Vb+UEmsQknmHVWaDSo3HJU4gGWdh3EYYUHdiO1cVfG/lfyN+Zv5ta/d3Vkk2q3ZblqGrXkn&#xA;GKMtuA8r/wDCooJp0FMVTPz7/wA47/mf5H0o6zqVpDc6bDQ3F5YS+sIKmgMilUdRX9rjT3xV7L/z&#xA;it+e+r6rqK+Q/NF095O8bPoeoTHlKfSUs9vK53f4FLIx32IJPw0VeBfmL5o1nz/+Zd7d3d0K3l8b&#xA;TT1nfhDbwer6cKVOyIq0LmnWrHfFWX+bf+cUfzZ0FIZbO2g1+GYhS2mOzOhP86SrE1P8oVHjTFX2&#xA;L+Vmh+YdC/L3QtK8xXb3us2tqq3kshDMrElhDyFeXoqRHyrvxriqVfmT/wApf+XP/bcl/wC6bdYq&#xA;z/FWAeY/z3/K/wAvaxLo+o6vS+t39O6SGGaZYmHUO8aMtR0IUkg7HFaTq8/MfyhaT+XoXvvUPmli&#xA;uiSRI8iTU4ftKCF/vl+1TFUTc+dfL1t5vtPKM07Lrt7bG8t7cRuVMKlwWMgHAf3LbE4qwqL/AJyW&#xA;/J55AjaxJGD+29pc0Hz4xsfwxTTIPNP5u+QvLFjpd/qmo/6HrSPLps8Eck6SpGELMDGGp/er1xQq&#xA;+bvzT8leUrjT7fW74wzampezWOKSbkoIHImMNQEttXFUTF+YXlKTWda0g3oiu/L0Qn1Yyq0cUMRU&#xA;NyMjAIRQ9jiqQaJ+fn5V61rMOkWOsVvLlxFberBPFHI5NFVXkRQC3blSuK0ivN/50/lz5S1Q6VrO&#xA;qcNRUK0ttDFLM0YcVXmY1ZVJG9Ca03pitIu7/NXyLbaJpeuHUhNpes3C2mn3EMcjh5mr8DKF5IRx&#xA;NeQFO+KqXnL83/y+8nXqWGu6oIb91D/VIo5J5FU9GcRqwSvbkQT2xVEWX5oeR7/ypd+arHUludGs&#xA;FLXksaP6kVKVV4iokB3/AJd+2Krrr8zPJtt5Lj86PelvL0oQpdJG7mrv6VDGBzBD/CRTbFWK/mh5&#xA;U8v+U/yc87jytpkGlG9sppLsWkYTnzHByePYIzbdAMVSHzLFbN+RHkHyvZMIrPzTJoOjySRnf0Ll&#xA;UnuCCKV5xxPXxqcVeneTLvzfPHqcXmLSbbSYrS8kg0ZLWb1hLYoAIpGFPhJHy/1V7qvmzRPzDXyT&#xA;+bvnbzXa2UVx5V1XVptDksLXiLmW+t4meN7ePq4eYFXI2/eAntirNP8AnG3zRb+W/wAlde1nzCPq&#xA;Wm6Rq96SkSmQRx8YSUjROR/vpGUf5nFUN/zmBqlhq35MeX9U0+X17G+1e0uLWYArzilsrpkajAEV&#xA;B7jFXzn+WX51ecfy4t9Qg8vJaMmpNG9wbqJpSDCGC8eLpT7ZxVT8t+XvO35v/mG1S93qOpzibVdR&#xA;4Uit4js0j8QFVVRaIvfZRirNf+cvbWG0/NGytIBxht9Gs4ol8FR5VUfcMVfU35A/+Sa8p/8AMCv/&#xA;ABJsVfOn/ObU12fzA0OBv95E0kPDvt6j3Mok2/1UTFXun/OL1hpNr+SugyaeF5Xf1ie9kAAZ7j13&#xA;R+dO6hAg/wAkDFXqN1bW11azW11Gs1tOjRzxSAMjxuCrKwOxBBocVfnV+WhjtPzs8tppUjNbJ5gt&#xA;YreRTyLW7XaoTXuGiO58MVem/n9/zjZ5o03zDqHmbylZPqmhX8r3U1nbAvc2skh5SL6Q+J4uRJUo&#xA;DxGxG1Sqwj8vP+cg/wAzPIU0Vkl4+o6Tbt6cmjahydUVTQpE5/eQkb0APEHqpxV9wfl3580fz15S&#xA;svMmlckgugVlt3IMkMyHjJE9O6noe4oe+KpJ+ZP/ACl/5c/9tyX/ALpt1irP8VfMV5aXfq+dta8g&#xA;6/pt7oNzcTzeZPLOtw+i3qbvKo9YBmHItxIdN9q1GKVt95g0q/i/JHWorGLQ9MTULxZYFLC2hZbq&#xA;BXKvJ0RmRmFTt0rtirNNWura8/5yn8vNaSpcLbaFIlwYmDiNq3Ro/GvE0kXr4jxxV5X+X9l+YV3+&#xA;TGuxaTq+kWvl52u/rljfCly9IkMpR2VlWq04Hx7jriqI80WVh5t8l/lLpml28tulzb6xaQQytzf6&#xA;zCIkDcwEDBpk5bAeGKsS1bWL/wA4WNhrt0GEXlq30fQ46nZpGMrGT3J9Jq/7WKXq12+gL+Yv5wDz&#xA;BNJb6PLYW0N1cQo8rxiZYo1cIlWPF3B/XtihIri81nyrpXlKfWLnRfPHkgXEMeiIE9K/gR15BkRQ&#xA;sistNwxfeitvTFWS65p9zdfmR5r1P8u/Mtja6sFEPmbQtZh4RSekCj+nJMjh424VPGgH81CMVYnq&#xA;WvafrP5V+T5rPSoNINv5rS3ube05C3eZY+RliDlyAyuv7R3rirOPyrn8vQ/m9+Y48yPbx6+2oOdO&#xA;a+KCQ2XOX+5L/s+iY60/Zp2xVh9++lyar+cr+WPTPlY6bBva8fqxuax1KcPhpz9enHbFWJ+YJNc8&#xA;nfl1/ha853Og+b7HTdc0e4ptFckQy3MX9R7If2jil9V+Z9WF3r1v5Hu9Bvb3SfMFhdi+1eNV+qQp&#xA;x4NFKxNQXVvvK05VPFYvk7Xbzz9+Wt3ZeUNe1lRa+WNYtdX8rR39q8tpcQI7RCWO4iZZeEazlpIe&#xA;1DxIIoVXq/5oefvzh8t+X7a4l80aDFrGq+nHoelaDYS3dxePM1EeM3U0o4UI+PgR2AJO6rA9e8ie&#xA;TPLHkq08k6Varr/51eYTb/WJ7aQzzWMwuEuJHMgbjb+mF48hRmHxN8NcVfSf5afl/ZeTfy/07yo3&#xA;C6EMLDUHZapPNOS05KtWqlmIAP7NBiry3/nNNVX8qtJVQFVdctwqjYACzuthirz/AP5xE/L7yX5q&#xA;sfMk/mPR7fVJLKe0FqbheYQOspYAVpQ8RWuKvrDQ/LugaDZiy0TTbbTLQb+haQpChPiQgWp9zir4&#xA;w/5zJ/8AJuQ/9sq2/wCTs2Kpr5A/5y8/wj5N0ny3/hP67+i4BB9b/SHpepQk8vT+rScevTkcVTfz&#xA;zPN/zkN+XMvmjQNFksfMvlK4eKTTRKLg3NrMiuyxOEiLOvHkqlfECpYYq8v/ACg/PzzZ+WLT2ENu&#xA;mpaJPIZLjSrhmjKS04s8UgDGNjxAaqsNuld8VZb+ZH/OXnmjzToM+i6JpSeXoLxDFeXIuDc3DRts&#xA;yRv6cAjDDYniTToRiqN/5xK/KLUtT8zQ+e9Tt2h0XSuR0wyAj6zdMpTkgPVIQSeX81AK0aiqtrX/&#xA;ADl3570r8ytUK2kVx5YtriS1i0OeMQyhIWKep6wX1UlfjUhuSjpx74q82/PL80dD/MbzLbazpmhD&#xA;R5IoPSu5mZWmuXrVWk4BV+AfCp606mgACr6d/wCcQPL+raT+U5uL9Wji1e/lvrGJhQ+gY44Q++/x&#xA;mEke1COuKsw/Mn/lL/y5/wC25L/3TbrFWf4qwLzD+Rf5XeYNYk1fUtFVr6dudy8M00CysdyzpE6L&#xA;yPcgVPfFbTvWfy78laz5dg8uahpMEmjWvH6raoDEIStQDE0ZVkO5qQd++KobyX+VvkXyZLLP5e0t&#xA;bW6nT05rp3kmlKVrxDys/FagVC0BoK4qkI/5xx/JkEEeXenjeXx/XPim2Uyfl/5OebQ5v0ZHG/lo&#xA;udEWJpIktzLx50SNlRuXAfbB/XihLF/Jv8tl0y40xdGVbG6vF1GeET3I5XMYIR+Qk5AAMaKDx9sV&#xA;TNPIHlBNV1jVf0aj3uvxCDV3keSRJ4goXg0Ts0YHEU+FRirH9G/Ib8qtH1mLV7HRFF3A/qW4lmnm&#xA;jjcdGWOR2Wo6ioNO2K2ivNv5Mflx5r1M6prWkiXUGCiW5illgaQKKD1PSZA2wpUitO+K2jbj8rvI&#xA;U+jabor6RGumaROt1p9tFJLEI51rSQtG6s7bmvMmvfFVDzj+UX5fecLtb3XdKWa+VQv1uJ5IJWUd&#xA;A7RMnOnblWnbFUVZflp5GsfLF15Xs9Jjg0O9BF5bRvIGlrTd5uXrMdhuXrirtb/LTyRrnl7T/L2q&#xA;6WtzpOlLGmnwGSZWiWGP0kCyo6y/Y2NW371xVk2KvMv+ch9a8m6J+XkuoeavL6eZLT6xHBbWDt6R&#xA;E0oPxicBnhoqt8SCvbvirzf8svyE/J/z55X07zlYQ6xpIuvUUWAvg/omF2heNJTHzZPhNDUGh7Yq&#xA;yDzjpd/+TVpokX5S+RItVk1Od4dXuzFcXdwETgY0aVG9RfVLMQzHgvH7O+KvdELFFLDixAJWtaHw&#xA;rirHfPv5f+WPPeg/oTzFbtcWQmS4iMbtG8csYKh0Ze/F2X5E4qhfy7/K7yf+X1hdWXlu2eFL2QS3&#xA;Us0jSyOyjioLN2UE0A8cVZbirz/8wvyK/Lzz9qsGq+YLWY6hBD9XE9vM0RaMMWVXAqDxLGh98VYr&#xA;/wBChfk3/wAs19/0lt/TFXoP5e/lp5S8gaXPpvlu2eGG5l9e4klkaWR3oFFWbsAKADFUp87fkP8A&#xA;ld5yumvtY0ZF1GQ1kv7RmtpnPcyGMhZCfF1JxVIvL/8Aziv+TWj3SXTaXLqcsZqi6hO0sdQa7xL6&#xA;cb+FGUjFXrMEEFvCkEEaxQxKEjiQBVVVFAqqNgBirBfPn5G/lp54na71vSVXUmFDqVqxt7g0FBzZ&#xA;Phkp25q2Ksb8v/8AOKH5PaPqEd69lc6o8RDRw6hP6kIYGoJjRYlf5PUe2KvX4444o1jjUJGgCoig&#xA;BVUCgAA6AYqxPzr5e1XVPMXky9sow9vo+qSXd+xZVKRNZTwggEgt8cqigxVl2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KpP5u/wl/h+6/wAW/Uv0DQfW/wBJen9W6/Dy9X4a8qce9em+Kq3lz/Dv&#xA;6Ds/8OfVf0H6Y+ofUPT+renU/wB16XwUrXpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.805556</stDim:w>
            <stDim:h>17.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">rough-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:54570bd4-44fc-4daa-af13-191c026bfe24</stRef:instanceID>
            <stRef:documentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEE5A5CD5E72E311A5DAE32040218A44</stEvt:instanceID>
                  <stEvt:when>2014-01-02T13:33:25-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</stEvt:instanceID>
                  <stEvt:when>2015-01-13T11:29:27-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -34.654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 34.654 li
216 34.654 li
216 0 li
cp
clp
21.6844 2.60761 mo
22.4047 2.60761 22.9888 2.02407 22.9888 1.30352 cv
22.9888 .583607 22.4047 0 21.6844 0 cv
20.9648 0 20.3806 .583607 20.3806 1.30352 cv
20.3806 2.02407 20.9648 2.60761 21.6844 2.60761 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
33.4875 18.1845 mo
32.7669 18.1845 32.184 18.7681 32.184 19.4881 cv
32.184 20.2086 32.7669 20.7922 33.4875 20.7922 cv
34.2081 20.7922 34.791 20.2086 34.791 19.4881 cv
34.791 18.7681 34.2081 18.1845 33.4875 18.1845 cv
cp
f
25.355 29.5761 mo
24.4266 29.5761 23.6747 30.3283 23.6747 31.257 cv
23.6747 32.1858 24.4266 32.9383 25.355 32.9383 cv
26.2842 32.9383 27.037 32.1858 27.037 31.257 cv
27.037 30.3283 26.2842 29.5761 25.355 29.5761 cv
cp
f
15.1998 16.0573 mo
14.498 16.0573 13.9303 16.6255 13.9303 17.327 cv
13.9303 18.0282 14.498 18.5964 15.1998 18.5964 cv
15.9013 18.5964 16.4689 18.0282 16.4689 17.327 cv
16.4689 16.6255 15.9013 16.0573 15.1998 16.0573 cv
cp
f
3.1565 13.1063 mo
3.1565 12.2349 2.45011 11.5282 1.57809 11.5282 cv
.70677 11.5282 0 12.2349 0 13.1063 cv
0 13.9786 .70677 14.685 1.57809 14.685 cv
2.45011 14.685 3.1565 13.9786 3.1565 13.1063 cv
cp
f
3.91145 23.8113 mo
3.19154 23.8113 2.60768 24.395 2.60768 25.1149 cv
2.60768 25.8357 3.19154 26.419 3.91145 26.419 cv
4.632 26.419 5.21554 25.8357 5.21554 25.1149 cv
5.21554 24.395 4.632 23.8113 3.91145 23.8113 cv
cp
f
7.78818 6.86214 mo
8.90709 6.86214 9.81282 5.95609 9.81282 4.83782 cv
9.81282 3.71979 8.90709 2.81343 7.78818 2.81343 cv
6.67016 2.81343 5.76411 3.71979 5.76411 4.83782 cv
5.76411 5.95609 6.67016 6.86214 7.78818 6.86214 cv
cp
f
29.6443 2.67612 mo
28.2797 2.67612 27.1742 3.78213 27.1742 5.14648 cv
27.1742 6.51139 28.2797 7.61709 29.6443 7.61709 cv
31.0095 7.61709 32.1149 6.51139 32.1149 5.14648 cv
32.1149 3.78213 31.0095 2.67612 29.6443 2.67612 cv
cp
f
13.2783 30.4683 mo
12.1219 30.4683 11.1855 31.4045 11.1855 32.5606 cv
11.1855 33.7166 12.1219 34.654 13.2783 34.654 cv
14.4347 34.654 15.3712 33.7166 15.3712 32.5606 cv
15.3712 31.4045 14.4347 30.4683 13.2783 30.4683 cv
cp
f
18.3194 27.6162 mo
18.8034 27.2154 20.5164 25.6351 21.9182 22.3404 cv
23.3537 21.7262 24.4447 21.1135 25.2761 20.5363 cv
25.7488 22.2099 25.5369 23.362 25.2982 24.0092 cv
23.5878 26.032 21.1104 27.3846 18.3194 27.6162 cv
cp
8.91382 23.0564 mo
9.694 23.449 10.5398 23.7048 11.3998 23.8636 cv
11.5669 24.6206 11.8071 25.3925 12.1395 26.1616 cv
10.8501 25.3754 9.74835 24.3123 8.91382 23.0564 cv
cp
10.323 10.0407 mo
11.6741 9.16813 13.1957 9.18014 14.6654 9.6221 cv
13.6346 11.0175 12.5728 12.9749 11.8713 15.6458 cv
11.8713 15.6458 10.6909 18.8385 11.1931 22.6841 cv
8.32568 22.0502 7.68528 20.4494 7.68528 20.4494 cv
7.68528 20.4494 7.67855 20.4479 7.66842 20.4466 cv
7.36768 19.4825 7.20552 18.4576 7.20552 17.3955 cv
7.20552 14.513 8.40217 11.906 10.323 10.0407 cv
cp
23.3316 17.6354 mo
23.3316 17.6354 23.3955 17.3439 23.4741 16.8534 cv
24.097 17.7788 24.5476 18.6204 24.8652 19.3781 cv
24.093 19.9697 23.2475 20.4734 22.475 20.8779 cv
22.803 19.9159 23.0976 18.8388 23.3316 17.6354 cv
cp
19.969 7.47977 mo
19.7452 7.39593 li
19.8216 7.41316 19.8987 7.42945 19.9746 7.44907 cv
19.9709 7.46845 19.969 7.47977 19.969 7.47977 cv
19.969 7.47977 22.1258 8.60176 22.0856 13.2301 cv
21.8365 12.9739 21.6844 12.8323 21.6844 12.8323 cv
19.8468 10.9397 18.0433 9.81622 16.5386 9.14725 cv
17.487 8.19051 18.6241 7.53142 19.969 7.47977 cv
cp
15.404 8.70348 mo
14.2528 8.3143 13.3837 8.2068 12.9675 8.1773 cv
14.2086 7.56916 15.5889 7.20615 17.0475 7.14777 cv
16.6188 7.47549 16.0379 7.98199 15.404 8.70348 cv
cp
19.9003 22.0275 mo
16.5828 22.8949 14.1445 23.0552 12.3584 22.8709 cv
12.1788 21.502 12.1895 19.747 12.5578 17.4987 cv
12.5578 17.4987 13.5031 13.004 15.7729 10.0346 cv
18.7605 11.3574 21.2729 14.067 21.2729 14.067 cv
21.5256 14.3468 21.7593 14.6187 21.9845 14.8874 cv
21.8835 15.8435 21.7013 16.9127 21.4102 18.116 cv
21.4102 18.116 21.0477 19.9061 20.181 21.9228 cv
20.0044 21.991 19.9003 22.0275 19.9003 22.0275 cv
cp
17.2644 27.6494 mo
16.8356 27.6414 16.4139 27.6076 15.9993 27.5483 cv
17.2644 27.6494 li
cp
15.0916 27.3748 mo
14.8318 27.3127 14.5745 27.2418 14.322 27.1604 cv
13.8247 26.7528 13.0191 25.8419 12.5706 24.0227 cv
15.8991 24.3203 19.0765 23.4001 19.0765 23.4001 cv
19.2393 23.3473 19.3928 23.2935 19.5495 23.2404 cv
18.551 25.1084 17.1019 26.8827 15.0916 27.3748 cv
cp
27.7056 17.9791 mo
27.6291 19.3357 27.2873 20.6226 26.7326 21.7895 cv
26.657 21.0962 26.4985 20.415 26.2786 19.7565 cv
27.0818 19.0458 27.4943 18.4269 27.7056 17.9791 cv
cp
27.5625 15.6003 mo
27.4489 15.0972 li
27.5348 16.4081 26.8259 17.578 25.8124 18.5663 cv
25.2113 17.2364 24.4195 16.0425 23.6888 15.0923 cv
23.8461 13.2347 23.8322 10.7121 22.988 8.75782 cv
25.3517 10.2751 27.0541 12.7328 27.5625 15.6003 cv
cp
17.4643 5.49018 mo
10.8888 5.49018 5.55836 10.8199 5.55836 17.3955 cv
5.55836 23.9711 10.8888 29.3015 17.4643 29.3015 cv
24.0402 29.3015 29.3697 23.9711 29.3697 17.3955 cv
29.3697 10.8199 24.0402 5.49018 17.4643 5.49018 cv
cp
f
110.132 20.0839 mo
109.476 17.8999 107.385 16.464 105.444 15.5069 cv
104.722 15.1506 103.926 14.9347 103.221 14.5548 cv
102.655 14.2507 102.02 13.9737 101.488 13.6165 cv
100.768 13.1327 100.389 12.7669 100.493 11.8821 cv
100.627 10.7404 101.955 10.3604 102.921 10.6292 cv
103.579 10.8123 104.163 11.0294 104.785 11.3163 cv
105.32 11.5635 105.879 12.1382 106.422 12.3007 cv
107.076 12.4963 107.579 12.2666 108.124 11.9253 cv
108.627 11.6111 109.792 9.59291 109.766 9.00107 cv
109.736 8.32656 109.2 7.78818 108.652 7.45889 cv
107.653 6.85723 106.586 6.2718 105.461 5.9493 cv
103.245 5.31568 100.8 5.33047 98.6792 6.29054 cv
97.0625 7.02216 95.754 8.45162 95.1944 10.1356 cv
95.0218 10.6584 94.9444 11.257 94.8682 11.8013 cv
94.5402 14.1607 95.9954 16.4713 97.826 17.8304 cv
98.6706 18.4576 99.6099 18.9361 100.568 19.363 cv
101.504 19.7798 102.512 20.1067 103.344 20.7206 cv
103.949 21.1681 105.113 22.2996 104.365 23.2462 cv
104.105 23.5859 103.585 23.9862 103.223 24.0998 cv
101.317 24.6963 99.6406 23.0198 98.1178 22.2339 cv
96.9482 21.6295 96.2682 22.6617 95.7577 23.5543 cv
95.2134 24.5074 94.3916 25.6346 95.3977 26.6294 cv
95.7995 27.064 96.1994 27.3331 96.6613 27.5871 cv
98.1061 28.3798 99.643 29.0014 101.299 29.197 cv
102.727 29.3663 104.352 29.2545 105.709 28.7533 cv
106.887 28.3192 107.699 27.7631 108.607 26.9012 cv
109.527 26.0258 110.048 24.8182 110.417 23.6243 cv
110.731 22.6074 110.43 21.0806 110.132 20.0839 cv
cp
f
69.1452 23.7769 mo
61.863 23.7769 li
61.863 7.01693 li
61.863 6.37257 61.3408 5.84979 60.6958 5.84979 cv
57.5397 5.84979 li
56.8947 5.84979 56.3725 6.37257 56.3725 7.01693 cv
56.3725 27.7913 li
56.3725 28.4357 56.8947 28.9584 57.5397 28.9584 cv
69.1452 28.9502 li
69.789 28.9502 70.3117 28.4277 70.3117 27.783 cv
70.3117 24.9441 li
70.3117 24.2997 69.789 23.7769 69.1452 23.7769 cv
cp
f
46.0938 15.9547 mo
43.6096 15.9547 li
43.6096 11.2177 li
46.197 11.2196 li
47.8887 11.2196 48.9354 12.4705 48.9354 13.6297 cv
48.9354 14.912 47.6608 15.9547 46.0938 15.9547 cv
cp
46.1982 5.86734 mo
46.1982 5.86734 42.4916 5.84979 42.4425 5.84979 cv
39.2866 5.84979 li
38.6416 5.84979 38.1186 6.37257 38.1186 7.01693 cv
38.1186 27.7913 li
38.1186 28.4357 38.6416 28.9584 39.2866 28.9584 cv
42.4425 28.9584 li
43.0869 28.9584 43.6096 28.4357 43.6096 27.7913 cv
43.6096 21.3066 li
46.0938 21.3066 li
50.6124 21.3066 54.2883 17.863 54.2883 13.6297 cv
54.2883 9.34967 50.6579 5.86734 46.1982 5.86734 cv
cp
f
81.9155 10.9726 mo
78.3668 10.9726 75.4803 13.8594 75.4803 17.4078 cv
75.4803 20.9562 78.3668 23.8427 81.9155 23.8427 cv
85.463 23.8427 88.3501 20.9562 88.3501 17.4078 cv
88.3501 13.8594 85.463 10.9726 81.9155 10.9726 cv
cp
81.9155 29.1289 mo
75.4527 29.1289 70.1938 23.8707 70.1938 17.4078 cv
70.1938 10.9446 75.4527 5.68674 81.9155 5.68674 cv
88.3777 5.68674 93.636 10.9446 93.636 17.4078 cv
93.636 23.8707 88.3777 29.1289 81.9155 29.1289 cv
cp
f
119.955 31.7399 mo
118.848 31.7399 li
118.848 3.04441 li
119.955 3.04441 li
119.955 31.7399 li
cp
f
128.593 18.5605 mo
130.57 18.3682 li
130.689 19.032 130.93 19.5191 131.294 19.8302 cv
131.657 20.1416 132.148 20.2971 132.766 20.2971 cv
133.42 20.2971 133.914 20.1588 134.245 19.8818 cv
134.577 19.6051 134.743 19.281 134.743 18.9106 cv
134.743 18.6726 134.673 18.4702 134.534 18.3031 cv
134.394 18.136 134.15 17.9907 133.803 17.8673 cv
133.565 17.7847 133.022 17.6385 132.176 17.4278 cv
131.087 17.1578 130.323 16.8261 129.883 16.4326 cv
129.265 15.8789 128.956 15.2041 128.956 14.4077 cv
128.956 13.8953 129.102 13.4159 129.393 12.9696 cv
129.683 12.5237 130.102 12.1837 130.649 11.9502 cv
131.196 11.7171 131.855 11.6004 132.629 11.6004 cv
133.892 11.6004 134.843 11.8771 135.481 12.4309 cv
136.119 12.9847 136.454 13.7236 136.486 14.6478 cv
134.455 14.7372 li
134.368 14.22 134.181 13.8483 133.895 13.6217 cv
133.609 13.3953 133.18 13.282 132.608 13.282 cv
132.018 13.282 131.556 13.4033 131.222 13.6456 cv
131.006 13.8014 130.899 14.0096 130.899 14.2704 cv
130.899 14.5084 131 14.712 131.201 14.8813 cv
131.457 15.0966 132.079 15.3205 133.068 15.5539 cv
134.057 15.7873 134.788 16.0287 135.261 16.2781 cv
135.735 16.5275 136.105 16.8685 136.373 17.3009 cv
136.641 17.7334 136.774 18.2678 136.774 18.9036 cv
136.774 19.4804 136.615 20.0203 136.294 20.5234 cv
135.974 21.0271 135.521 21.4012 134.935 21.6457 cv
134.349 21.8905 133.619 22.0131 132.745 22.0131 cv
131.473 22.0131 130.496 21.7191 129.815 21.1309 cv
129.133 20.5431 128.726 19.6862 128.593 18.5605 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
138.47 11.7718 mo
140.502 11.7718 li
140.502 17.222 li
140.502 18.0869 140.527 18.6474 140.577 18.9036 cv
140.664 19.3154 140.872 19.6462 141.198 19.8956 cv
141.526 20.145 141.973 20.2697 142.541 20.2697 cv
143.117 20.2697 143.552 20.1518 143.845 19.9162 cv
144.138 19.6803 144.313 19.391 144.373 19.0479 cv
144.433 18.7045 144.463 18.1348 144.463 17.3387 cv
144.463 11.7718 li
146.494 11.7718 li
146.494 17.0573 li
146.494 18.2653 146.44 19.1189 146.33 19.6174 cv
146.22 20.1165 146.018 20.5372 145.722 20.8806 cv
145.427 21.2237 145.032 21.4971 144.538 21.7007 cv
144.044 21.9043 143.399 22.0063 142.602 22.0063 cv
141.641 22.0063 140.913 21.8951 140.416 21.6734 cv
139.92 21.4513 139.527 21.1632 139.239 20.8085 cv
138.951 20.4537 138.761 20.0821 138.669 19.6929 cv
138.537 19.1164 138.47 18.2653 138.47 17.1397 cv
138.47 11.7718 li
cp
f
150.674 17.4483 mo
150.674 20.1392 li
152.555 20.1392 li
153.287 20.1392 153.751 20.1186 153.948 20.0775 cv
154.25 20.0225 154.496 19.8886 154.686 19.6757 cv
154.876 19.4632 154.971 19.1782 154.971 18.8213 cv
154.971 18.5193 154.898 18.2632 154.751 18.0525 cv
154.605 17.8421 154.393 17.6888 154.117 17.5927 cv
153.84 17.4966 153.239 17.4483 152.314 17.4483 cv
150.674 17.4483 li
cp
150.674 13.4466 mo
150.674 15.7735 li
152.006 15.7735 li
152.797 15.7735 153.289 15.7621 153.482 15.7394 cv
153.829 15.6983 154.103 15.5782 154.302 15.3788 cv
154.501 15.1798 154.6 14.9181 154.6 14.5932 cv
154.6 14.282 154.515 14.0289 154.343 13.8345 cv
154.171 13.6401 153.917 13.5222 153.577 13.481 cv
153.376 13.4583 152.797 13.4466 151.841 13.4466 cv
150.674 13.4466 li
cp
148.642 11.7718 mo
152.665 11.7718 li
153.461 11.7718 154.055 11.8053 154.446 11.8713 cv
154.837 11.9379 155.187 12.0762 155.496 12.2865 cv
155.805 12.4972 156.062 12.7774 156.269 13.1275 cv
156.474 13.4776 156.577 13.8702 156.577 14.3048 cv
156.577 14.7762 156.45 15.2087 156.196 15.6021 cv
155.942 15.9956 155.598 16.2907 155.164 16.4876 cv
155.777 16.6661 156.248 16.9704 156.577 17.4004 cv
156.907 17.8307 157.071 18.3363 157.071 18.9174 cv
157.071 19.375 156.965 19.8201 156.752 20.2525 cv
156.54 20.685 156.249 21.0305 155.88 21.2888 cv
155.512 21.5474 155.058 21.7065 154.518 21.7661 cv
154.179 21.8027 153.362 21.8254 152.068 21.8346 cv
148.642 21.8346 li
148.642 11.7718 li
cp
f
158.76 21.8346 mo
158.76 11.7718 li
161.801 11.7718 li
163.627 18.636 li
165.432 11.7718 li
168.48 11.7718 li
168.48 21.8346 li
166.592 21.8346 li
166.592 13.9135 li
164.595 21.8346 li
162.639 21.8346 li
160.648 13.9135 li
160.648 21.8346 li
158.76 21.8346 li
cp
f
170.436 21.8346 mo
170.436 11.7718 li
172.468 11.7718 li
172.468 21.8346 li
170.436 21.8346 li
cp
f
173.889 18.5605 mo
175.865 18.3682 li
175.985 19.032 176.226 19.5191 176.59 19.8302 cv
176.953 20.1416 177.444 20.2971 178.062 20.2971 cv
178.716 20.2971 179.21 20.1588 179.541 19.8818 cv
179.873 19.6051 180.039 19.281 180.039 18.9106 cv
180.039 18.6726 179.969 18.4702 179.829 18.3031 cv
179.69 18.136 179.446 17.9907 179.098 17.8673 cv
178.861 17.7847 178.318 17.6385 177.472 17.4278 cv
176.383 17.1578 175.618 16.8261 175.179 16.4326 cv
174.561 15.8789 174.252 15.2041 174.252 14.4077 cv
174.252 13.8953 174.398 13.4159 174.688 12.9696 cv
174.979 12.5237 175.397 12.1837 175.945 11.9502 cv
176.491 11.7171 177.151 11.6004 177.924 11.6004 cv
179.187 11.6004 180.138 11.8771 180.777 12.4309 cv
181.415 12.9847 181.75 13.7236 181.782 14.6478 cv
179.751 14.7372 li
179.663 14.22 179.477 13.8483 179.191 13.6217 cv
178.905 13.3953 178.476 13.282 177.904 13.282 cv
177.314 13.282 176.851 13.4033 176.518 13.6456 cv
176.302 13.8014 176.195 14.0096 176.195 14.2704 cv
176.195 14.5084 176.295 14.712 176.497 14.8813 cv
176.753 15.0966 177.375 15.3205 178.364 15.5539 cv
179.353 15.7873 180.084 16.0287 180.557 16.2781 cv
181.031 16.5275 181.401 16.8685 181.669 17.3009 cv
181.937 17.7334 182.07 18.2678 182.07 18.9036 cv
182.07 19.4804 181.911 20.0203 181.59 20.5234 cv
181.27 21.0271 180.816 21.4012 180.231 21.6457 cv
179.645 21.8905 178.915 22.0131 178.041 22.0131 cv
176.769 22.0131 175.792 21.7191 175.11 21.1309 cv
174.429 20.5431 174.021 19.6862 173.889 18.5605 cv
cp
f
183.265 18.5605 mo
185.242 18.3682 li
185.361 19.032 185.602 19.5191 185.966 19.8302 cv
186.33 20.1416 186.82 20.2971 187.438 20.2971 cv
188.093 20.2971 188.586 20.1588 188.918 19.8818 cv
189.249 19.6051 189.415 19.281 189.415 18.9106 cv
189.415 18.6726 189.345 18.4702 189.206 18.3031 cv
189.066 18.136 188.822 17.9907 188.475 17.8673 cv
188.237 17.7847 187.695 17.6385 186.848 17.4278 cv
185.759 17.1578 184.995 16.8261 184.556 16.4326 cv
183.938 15.8789 183.629 15.2041 183.629 14.4077 cv
183.629 13.8953 183.774 13.4159 184.065 12.9696 cv
184.355 12.5237 184.774 12.1837 185.321 11.9502 cv
185.868 11.7171 186.527 11.6004 187.301 11.6004 cv
188.564 11.6004 189.515 11.8771 190.153 12.4309 cv
190.791 12.9847 191.127 13.7236 191.159 14.6478 cv
189.127 14.7372 li
189.04 14.22 188.853 13.8483 188.567 13.6217 cv
188.281 13.3953 187.852 13.282 187.281 13.282 cv
186.69 13.282 186.228 13.4033 185.894 13.6456 cv
185.679 13.8014 185.571 14.0096 185.571 14.2704 cv
185.571 14.5084 185.672 14.712 185.873 14.8813 cv
186.129 15.0966 186.752 15.3205 187.74 15.5539 cv
188.729 15.7873 189.46 16.0287 189.934 16.2781 cv
190.407 16.5275 190.778 16.8685 191.045 17.3009 cv
191.313 17.7334 191.447 18.2678 191.447 18.9036 cv
191.447 19.4804 191.287 20.0203 190.966 20.5234 cv
190.646 21.0271 190.193 21.4012 189.607 21.6457 cv
189.021 21.8905 188.292 22.0131 187.418 22.0131 cv
186.145 22.0131 185.169 21.7191 184.487 21.1309 cv
183.805 20.5431 183.398 19.6862 183.265 18.5605 cv
cp
f
193.094 21.8346 mo
193.094 11.7718 li
195.126 11.7718 li
195.126 21.8346 li
193.094 21.8346 li
cp
f
198.744 16.7963 mo
198.744 17.9358 199.007 18.7998 199.533 19.3876 cv
200.059 19.9755 200.727 20.2697 201.537 20.2697 cv
202.347 20.2697 203.012 19.9779 203.531 19.3944 cv
204.05 18.8111 204.31 17.9358 204.31 16.7689 cv
204.31 15.6156 204.057 14.7556 203.552 14.188 cv
203.046 13.6208 202.375 13.337 201.537 13.337 cv
200.7 13.337 200.024 13.6241 199.512 14.1982 cv
199 14.7725 198.744 15.6387 198.744 16.7963 cv
cp
196.65 16.8651 mo
196.65 15.8402 196.803 14.9799 197.11 14.2842 cv
197.339 13.7716 197.651 13.3118 198.046 12.9045 cv
198.443 12.4972 198.876 12.1953 199.347 11.9984 cv
199.974 11.7331 200.697 11.6004 201.516 11.6004 cv
202.999 11.6004 204.186 12.0602 205.076 12.9801 cv
205.966 13.8996 206.41 15.1789 206.41 16.8169 cv
206.41 18.4416 205.969 19.7126 205.086 20.63 cv
204.203 21.5474 203.022 22.0063 201.544 22.0063 cv
200.048 22.0063 198.858 21.5499 197.975 20.6368 cv
197.091 19.7239 196.65 18.4668 196.65 16.8651 cv
cp
f
208.017 21.8346 mo
208.017 11.7718 li
209.994 11.7718 li
214.112 18.4917 li
214.112 11.7718 li
216 11.7718 li
216 21.8346 li
213.961 21.8346 li
209.904 15.2726 li
209.904 21.8346 li
208.017 21.8346 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Richard Basset) ()
%%Title: (PLOS-Submission.eps)
%%CreationDate: 1/13/2015 11:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;B6uBoZKV6Lcf>$*2DuGA*)3:2)]MI+30;mFaUQJ^S.Fel?V-g<9ddf)mbY:VirN=h-'_)f<$gAXB@_jgGda&Of)LaK]`+#/
%kOTSh6,15P%,^u*Ip\_rW1C;XMhm$KYbd6`q>HtsO8U@AEeV/75C>2p*Z^QrC1!gh,AO^2Xqtl"(H#b')6=6"K*ccX0Qa84@f7rI
%Ahb.I_)pmZTL[9C'Y1*-K>#)g\-V`-a4ncWArH3F@6(.IW57p5U>LA^"LYcBhuI<_)>tWAQ'U@+3jmjt:'7:'b^K2]o8Iktr9Oao
%#d4L22].DT_`m^Dn9Ve+6\Oq/,$7$Ee7?#Bdt@U8^&#0XB^,2%3M>O8[*og:$r/J72akH.*l@)QgGGkjAhhq:/Bn7!!$E*ZraMM1
%VI7WHR5<o]":[PU+V9UJ:SC=4D'Df?qKk^1.r)"pRDCgS,fu3%:%.DSrrSGSq#(?3r+-u#%L\/3Y%E$H)!OqOH2V;;VAA)!!<fqM
%+HiFJ4MkI67:SSYW'0'qp#5sc&iG>f/7<qLK7>:/boRWlAOER<lPAck1E>ld$MhSi]Rd<'j7@U++^`US%3c5;0YeClnX)Jp?PY[*
%"T`Tk6?#i'@%Jn@Cbf3`\NYao"aW'B-9pQKKUG&<*3M!hDhS"Sm4K7RIS[)UrWC0`^0kbF\6eG3COS.dY*X)kG498OnAks@em^dN
%T*erP1B?F=@>BD_ke4.8$aUQNI.Pr?o.8[t/e6fJJR0EVV:EogjtBAR]H0t*nn^`4R"kn<e7u4\hZi`P?Yart^6Zdg5Zg+N_/*W3
%!*Z!nqpA@MQMpIh^t$8M$J%&A)XkK=b\t^,()cE9h\>[O/r3oP2q2LO?BY"`ZN9bj&#pCY\u*;!)B10D?gn5^!(mnlK-#ueFFin.
%)a+2-K>h:XTa.(OCh1W6LY^J,=K`Ngf4CQF<5P9$8+96D;m<1`<Fs.n`A(E%JJ980s3*S)_:\Olj=l.?s$'rN#a6@V!(SL-[VD<.
%^BS)ZQ=iQj$`X-OEk#H"G"Wl;r_"!-qUoOJec4=iWMLY\5[Mm'5Qp_Eqld1%N6pMDBInVNUL8R8M9>iS=E;n%&<Rf"TO7;k^T#1u
%K+WrSVi*VPK@PL<YX9;M\,jqs!_Ct*g:,U@6K\36Xi=bUottTA#ngpbgcttf:nJ4U']K4tAR,9RkQ/AOlRf#5LIPcQ,O,X]:AM^\
%'Rp-.S:DY\BRn@-p!B?];Vg:"!U-]Ha)7ro`HDM:B2NmP^sJ<65%pV=6hh',4'qQ/BY4q1!W2'VrJrYYTZt"HB0cP[`r3PRs(d>&
%)5<ccT7BcDLW08IC2gotQB]2dg=0cNWhoJ[KV8JI#UZ%]clTu0C>b/MFj7SM:;[l1gp_dk[jU\0(]<t[5R>8ciU`NmN,QL!!#FN1
%K<?nD+Em@C_$t\t5G2Ec;IG.*VG;9<!!XL`%&5l5hf#K4J1/eD01\+&dnh'9IksE0Gat[+;AfHL:!E-hR3lS;KSNqV1-,GfqENd(
%!1<C[,n+Uf3KGIFfE7/Dn%#tN+Q'u<ZOnJ/JGt?&U&@l<"l>'Pj-[[Rn)\!^)E<:]VJ!faSc\&N"#Wj&o\b35ba#D?m7(%4i6p,4
%D<3Xb97U">A,'^:&!YB'Z/oE%lg90#'a&6X%M5]gihh29('hQ*I'?O_\,m&-D9$g3-iWs,7;ug9Ggo<YK)iO&CddN^JE-Z^\HhcJ
%!,\GchVidq?SBUPc^o-9Fj9mT96uEaa%,G(7JoH(]1*7Z7f71Qm/8"]-;Vtne;DhEr\YY`Vn0me[f"GgRkNu_GQZYu2Pk#Ll!E!:
%\>K9<"6?5K=p+[mf@^'_;;D.j3E]]2kRiLm^A::\+77V)^](]uDPX`@*mhP!I(fLYS5dBDg2c]HTbJV`S_Ch&Rckk1hY]T)VH?mb
%Pu?4&"'quuF)%dlOBg97D8mQ_]\-]&ptoT-+e^SNm""d%#K=Q0`$eCpIF5h&NtSo"O3s_P7s>%P-@r<Q&2aD)C6Vp]TL8`nrV=b^
%d$!)n`aHfhd$_toS[f]Gd1T_X!,IRC$3f&l^t=Y*LY:1QBELEMm4$cb2ql#%$jV^,C;cnFI%eQd_pT[omD?qOF#=m;Hs@`n5`^JW
%jIgoq"3JHadaX<2)_fP%#nWW#S1[5=0@XlSW1dPArX4G#0Q`h99o*,T*;5l>?L&n()":E&b(J7*!-dq4lO=8uF"]4R1jC7$O_CuQ
%cO>HFCp4QiMf4F#EdcRni"kZs:TrroL^A>)hD!iR#i%ojXp=UO0S6q(#-VG`9JYH.O+Ece_[HrjYbs`Z$<]Wan</ZF+7E]V#%LEU
%LH%"NhTT5&4CD8]UY9S9HYL+R?oM_Jo<[@?pM#39dNq9WY[@!cU+rD<$J6PQ?A8cmP9Fc^0l.%55gnJ)GutKZ=nQ6ggs^o+DDM9N
%D"J5<1`M)04CX?qa^ocF2iE%Jh]*McJUfDH4G=gYc'q_%9d_d:$O+ep(i*fjOjF?XVKa38a911a>:8+?lL2Ql/g;Z$O(_PBIoD(+
%+;3C_*"6J<g&<(E[L=6i()/W\&Z!uC`8q7FbaD&Oe0'aZi\_M'L-rNNS"_hq^9"^^7uQ%)$lQ)$Ifnt0!#+aa<fY*.W)JW6?k8%o
%qFT)2g^ZK5[i+tLjn3;kJ:^PG)K4#Rg'se="KX!7,$Y6td-'X+GuuW-BkUB9%Wi@Hjear[P8;>NJCuNf)N9L5s1K4Z^.Mlp-).j-
%)9\\o+$O<sO[Fm"@0>\&B6^&oJ6]*n;^+RPMm-jUE=qDa-prmh%.g7(cOm>sI^Cm!&PNrTqbSCJ7ol400PZN$d9(>V0j$QsLs&9k
%r*I7u$\r"R^Rt#m0^@7o"dI)n=oZ+iiEkMj8f[L,]`8_-n/'#K5dM[&"IO:L3)#!XnsG>[BFD3@\pWIm-R_F,[XQ6uI5-P'[&1mn
%=GG'0maq,<r*6%T4^J4%iWXW^Sj<ZG=H-J>XK%8J[nu3!9S%_4+dm<AQ5Gt/OK[528&i3="5Cr?hh16deQS%iL=ln?OnB3$OK06g
%Qpl\,U1ORcN=DgLTp:ap<ed:*nO83UAt_c=Z6HCt&nsjQ/$'emMl[LWWEDSbGIXc2g+Z.Tbp5:e1*Rsj,ACAEMJ$d80sdmP>-PCM
%\JU\pl,>L1-CD<6!l^Nr3_@=XPgW6@iH";P(*$NPms=19cM#E^Pg#;u-e!H!=jC;?.&,9W5H_na!ilGq/?TMr/U?t(b&`8T0cNMY
%\YkBTe6\A6+Rpn"&AVs^:l$%"'-T0+h1"<$1E[8a.8FS\e.KLjfG?4`9$^/"nIdrjXRu7&1Y*).#lk:8aA"]l_e_EBW<S@7%WHIs
%euIMAJVNsF;(/0k9XFi\$+U>V;TfqOQ#nU._83N["NiRWY;r9rM"kE(ZYF7olUN?Sc\-[U0`qLV"7(2J)#e$ddD.N3e`R'e=c$\;
%0rgA#KZ^Db'N>);(=%rgDE!ih4(8<A%/ERHNM$t';nL^n-0KDB>G>[bA2f6B@A9(RT@lQr"NWJ@lki<kDm@+0`"R2Sp''i8CK7.O
%BY=I`Y_O:(g43R0hEVpp;?aJJo[pRKTp[]u0i4YtIt5P-Y3GuG<e*LmA<)J=afkq84E7@,,27n]Q?ihUAinr-:cpSZL4<utF>qo)
%7fTEC/Z-p/[8UXOctEqp:Yl@R*[R2X`F,Hn*,J!M!?f'FXe7nV.\:(T*R)CKa2t8C,L<WkU?<i,#55C:Ye")rJ>,43\c<X&&i$4l
%+_W_OdHccmRgkIoZdmB*Wu[0Gb%]jhnVlFWhPj5KfEB%_OH.n=HsBj7ED<7HGf"d$UUAG^*KBT\aK;P9e_W/iBZNQ<d>%X'Y>g3!
%CpuJ7q,Q^DS#m\JmbcM\bt-LglP1>NC6QAQXf0>AM\[bKJdr`Y:MB5/C^@Dr8d!ea"5s^a!Qn&!cu:oaN%(2nUD@Z7m9u)k"o9Un
%6Pc8h=\):,r-RH:8*s1JjI4K:IR-5ml/\eB6:4d^@^/hA\J6#<TlH'h5R"/tKb=-3f_8<X\_`:p,S"Ro;k&6c@XMQf#];0LL*"f*
%D(C"@`%;NndoCT0hPhZ;:Bu5SKRR(hn!31)eaU%L_]N%`)[X!LjGYnA#Wae/85>jK>Z>jQr(#:l&R)@3;i4UiMMNG,N;E71,ZNAL
%kRa2T_eQ!UKU>5F>_-6O)X8$M1g$mT9op26oS2=t1tU0+"`cI&D5tVD@_kLsF`nA2b.RlCq2(D3%:/26?E4eM,W*30eu5rB^#-Ht
%C]j%\eQeji2a5dRK,VV,%W!D"RQmp0Y[Rd63$+@l#SFf9m,-<e9$olQ8BUbi_/>lWM,qbjUHm6-H$qQ3fp8WKrha"P)a2q,W3g*\
%66U@(%!:3"fg)^m)6f)7Y)k#$Z>hL1\uhBDdMO/<!maT`bW&?jf<_;O309mXX.ZBiAEDe!*e/Yr`s-D$POG4)bbXI>EZ1LMN)-7s
%@52D-"4tg4C_lWY]4e3I8A+_]dINY",t/nF+YrM7$/^+-r]>_ajaM7a#@U6D\h72:mb$l(]4\;dTLm,F7[e,c[*MF'DrjsR:XueX
%a2BChEg\:F\B<hA5T%Y+pX.>X@A!GqcM0VoNq@?th>u?uVtNOJmQfq4VYA='_YanjjF2o_Te&$!..S$d]mY@+)d-68)(XPrqONMi
%amW2Nk??S\Nr&om.?&`V)FQ6ahl@`;5Mtq'bTaH.7t3;CI<HP*n;&L@J&mU3j_ZK=1qths5c8hZm\IH!T,tGOd^Wi335`M.FPV5O
%@QMmXN"5n_jO[i_j[Xk\96TUh`T$-/hh+)`lKHu$=`]eN;?pF#olN-PNCJO\r%tbCJ'([o[>/]36M/LOO3Y=4j36LHBm.quY=#m+
%J(VU==AuK&W=PX.``h9!oP.oCg)j[2ma1OjE>AnlG<`eu4XtaDo;IEL3QaMP>(CW:1DP61&``(+lQ1RJp:NLkS.7$T#Z[58(cpdU
%<43LUHd=bt!E_jU.t%Wj&u"['CQGsET2G(HmMiu:XR<od&jb7mS<hLZHgkkU8X7B@X[+>XTWN4%n9j-,jP5C_")5,lck&n_53O1=
%W!P^V$u\dfoYmCEj6W]=HiBFIT695l$oDnC>65f"-L?RWhVl^*-]]gOpW%Mpr;52:ZcVqY^oLuI*#d0Ro>Gk3>Ng[ZnlUOH-pRP[
%@*I\XLtk"*Qh1MIK"n(&,PQ!"rOAK/q8'j_aomLE[n-2+h+UnUR;2/f522sChbdMSSagnB4bfUO_=:%0kHVKOrcYk>k'l37g"C;j
%*W'!r:WVm`bl_XHk_DL4nQJ0pY&BZQkt9Y&9]iG:B8/GeXdLI8=^]!a^"JUO_3Ps:+rDAs@ZC>'](*-l*"Pe2>`9<NA@-%q#HA87
%:aHL-MXhkLqh_d(:Z_rR/*0-G&F[Z]*8hEu_k("$]$gBe',R9GDDE(&8PXI76mjr4S5`;G6FupP6$s?TDdn.Co(23?'Cj(tf4sTj
%R@]3`&j4Yf'PVjF=L6IaD4\5'?)59>?la@?8D)G`A&tStYe$,2?uU>@lsuRBKjpfh/KO]W^.[X_>$SF&^i'U+VdgR+S!M-cHHlRK
%l,Lp!%YRP#P09(OF1M:EVHCGs-hIKV:Yn`h$iZK&p=WM=CNU46F+Fk*4]1F\Z7B?s?sKHK17nr-1-oQLKk-7f;f"H*ess@eZ"8CY
%j(2i-C9>sEC"ibu4PP,]S%N80l6ROBU!IiJB5.XSI6V7op@=F_S^uSW\JPJJ>u)?#QuBBjS4!T!T"c4.1,X>n6[@S8%K4cMFRssg
%'=W<Zf,C9>nF+438((,Y$P8<E@/WL31NU`O7`GfW$RY.'C:4.<(8+kcdHr*3LV2_gq^uP'a]$:-Q@3EJ3_7e^)MJ"]=D@L3jS.jj
%ORX;+TBU\%.Eao7V#.-91$\m8qCNg#aq#B9a.\j&*u]Ue.;B9&)Ydm3U.<T9B$0UslL)TSQ0]t7H61iR:]&HPnSD@j_4P_%GkR*F
%bbqAa@g%0o-bsYQ'`OS7P!O"O1jIIMqrY4rP3(Qu"eVlY.e=;M3er7e`'E(=TO"i-55jW2->_]OMh^[CCkVsXBU1Y-%'9@()c-'F
%NpR>*-eLK`"`sg>@7H,>_JWL4FlkUu)B'DY"(.BmM=7ecCH9[<#Jah=o9mO'J(du`TN*cSrd:S_C*NSADMfZLr!akP6dcM:.gMo?
%(5N@GLhBA0ISZLCa\2tR]Z("C0@3_-rF^^,Q&$VX45h^-1l-Q&lJkVfNCM7$TJ8-m30<K*d9"C.BPnO:6\RH_N+IBA!l#`($U$ag
%jQOPk(D2:p#W?GM=I-+G6*O4m1_b`m*B8;#7EE@XG6_?Sb^_nk,-2=sK=.7Xer;@pii-M1#=1-4!AWZ$%(e:RCN(<PXGUuqZ?$*e
%S4[ZnVEn1"1P<S)NLtXX-"];8Z=bm:RML(^%+3FjL=iWE$MOi9#nDV+X8,D)'AClof(4bmRAgD["+InmreR@O5^Q8KAH/J>-&jf!
%<,2UoN.s>#^hElD9Q$GJ^M?TMZYhF]+3h8*N,HOLN530-m-`f?M#A@)44%1FHT\7-\V\e(A8K+tand;34cqrugne1d9-cS^e37p!
%ceAjlUeHhAf2fFSWnsS-d(!AWQ6%b!4)upIYJd.OGP9.doVq`=q?\.leg<V%1u+Ll_s>6G92B.Za\fKo;)#PB!VLPj#de$BZ`e<O
%oBpS@!r/tG!KJ_PoabQ@*<BjN_/%?(qka"OL)kmN'X6[$+."r?3]n3h5[ETdkjVh:F-($6-QF,d=Go<&mTf6h_@%/cAETY35A/6<
%p/;/u\,rW4;#fi$&*.YM*`qk^pRDPY!=%jDo9T6[A_ujipW-;\SdM'N%&n2I"`]#9q!?.gIR=3gEmX?,`+,\f]deb?MfL%JBg)X-
%#Kr@j;5#@04pOI'6ni<7f0LRd#YmRGDZJ,im_NmEWCj<I^Sek.H],f2`s@'5ljK<;@3f<Cq-V*[b6gF,grp+p6Fsm%ftm!<X_1U+
%<kPE/0uCN.%3#K72>:kh#J;/M]Bo15(^3(jof*`^G(B\+TG5Jk?gPR*WW)\gKbB)g6T6gq4rT+[4O4\gnT$q2WHo2&d_Q>0c[WKM
%-m>nnD7_%aWrlUuhYYALbj^t:jSfRC7cgPl>;]FR>!'o/[]>2/IJW?=hL[@?pYc#%a-(`H5_S9T@?i6Z>`6J%6I?Fqh"$\;^G]hW
%L?D5c7FT__5PjrB6l9B$1=h3j@$^SEA4md/asL'2p^\7Zj(Rk>U3ZP#VB`?Y-i]juhn!E6``pVJ;Y9?TOgJ73INZ5YJHOsMYCO3a
%O^udQSAMQ-;Xn1>Q$Rqd5=DFCq@%&Ta=h"H9NE6h3f;5<'5d'AS9E+8`dEAPb-,=f1k!R")b`I=Q&&m-=tA8R`$s6'1"I#JN.JIJ
%rlNH/ZQKT>3'VskOl'as+E^'S0Xu$jTZjrXm.1pscO85Jl3SD:TbO_SWr)F0a"q>io'uNuS/X++%ZU]E\%nP1'"MiKN_rQs[5$WL
%!X;?*mJSaNV>:]:9<)IOSQWI;*WWR]6FI.b_r,oZL;3>nmenNsrkt2XB"AaaKhZj\"#;iL\d-00Pb8MTjG3/aRFnf2o(s*2poFfU
%:S7_'H@OVt`VQ*=)N+F_<5)QSp41*pK<j[\RNL4>YI*1"Glsf14j;O`/:QJ^.\:H?j@[VKB-tu?]@(W+l6KYNf\p8-L&8`2-o:UV
%C#"5I'[3=6=8FK&TES4\9n9=*fB'RcDEO<OAFJr[PPYA+b:LLW8++K.[31Z'O93M9R,$!gB1-WI5Gn9V#-/iEe_2Wo[fq8#I0\qN
%e&ui3/^o0pUFq15Sf!+W1'sMg9VC?bMOp5q7-V#hB4:9Z(WCN(IXcg@1\9?/Yk8uM1=mu/j9?uH(U*uuZ1%AKQWgGU/bD)]<?t:J
%<7a0$EOY/t,W<h-efPqU-3Ki]4[=H4Q@#)=[eo0?bn2Vbm=9)"R53o!1>"3i?aHl1KL+8(&)-db9^6I(b]ITXR>iaG_?D@c%M(on
%q^4/jhuX;Z3>d,h\&ET0;%<j91-:WS4(I]VhHso.\#'/`Dgs(H8sInIN.g<tnm5ljg-f7rgn&U6RX\)O1)o""BDWIRUhFE%!$u_:
%*Vphlk'eM&GQ*6K5=e<`q5)=F?jh'<l1MDmK1$BZ$u\S.Y?sWj6+<"'N)^LO6(]-`7-<`],9;ZkO?M:?rOhNjP%LKogY_!2R8&0,
%aD>Th/".MBV0'X=:Wk[ggO<)'7VP--F*juM5VCsMVP<P/,Sf1_4VZ&'6'M%HD.pW`03+ora3*%a@OUc`ialh"KF1/HDmgam%R4/]
%+>raP(ug#I4S&B2CAft!)"9r_l&]u:`m.QUollF!mbgkcGY>3Fm+)W\DRX=5gks0(JNacBJU-4G;VaN,DT\#=Uf]Y<MV[)@k89BX
%\CG]Y"<?+JAsS]Mi0\68DLjj<IinhCk-4o[kJ%6[>f3-0C!aX;,^u'3;Cq4Lqh9CFpme)I])1:/RWcgBD$9(MM%sn<[E7c2dO-Rj
%cG+oG6O8Eb):OL#[=;hB2_^ld$Aj*:fH$(s'=f-k5'B'D(hkFYhk:/K"f4XL8&`*eOZ:ts+-GG-o%>SFE.Et^"(S>"S$$uk52_DJ
%kG`]8F,)D@c8l$!`bp`s`6Rlb9Jl_DFMR_M#"=8:"q>=$]%SID%9Y!"99rZT;.'Q(4'bl)HC<6Uq?mVlTi4[hdm"TO1k>GK@3la+
%?rR`%k_n7%FDKpQW,'M4\=]<2V$4ZTm>3u.cAbhmn0Z79^fl.15O-UH>cP<eEfD)TB]oU;DCTa+$aflRR2kq@ViN3a5X5d,B,72*
%$$dHUL1h.d9S@3e-ou*?k>.W1a,7ne?A_c-ZWM&?&jIJu1ea/Fo0X^>`pJ*gA<;(u?486lVf;r#H\cc\?/F`aQ0jqpT]QKngEM&u
%cogAZ\&!"@knn+i+0H?T(<Epd.jK7!p9T-k!8dZm:b\#BXF_62^[j'7i=M!+Tb2XtgFHktTOHHOeh6Iof&O(CTI*rbVu[eXqg0g,
%+K`/)/qm>-?@ZuHDmQYC8098tHXc^]&HjBoST%PhQ8`RaH8)Pjfj-G[g:CN>ZF=cXJ\V[H;PEe0T+2Z\Hao4+,V;g;<n>`)mUB/f
%@0oD/Zf7nsgEeU.Ob?Ji.'_tuUr1*p"OdoQr-l9fMSKL&'="/378!gSg6QeiDt&+tLiZsgA*]!$JMCIYaj^GIHi;;.CU8!lH,bXQ
%cqATa4S8%F7S<S)?$E*[ge;N7&K8T_q9e00QOZ)_\'S(_8sg%NV\PKecc>'RX81QYLQ^>"G5=55KeD"p.fSSrk+84*\,<tHoJL<[
%Ob8F:.e_[$(2<!W:3[f6&J4d\F.e8;2X/p>n1G?qK6D!BD;XKIT6u1dmkPhBl,k:Q<'N^/hI-T*G4iK6@r;nbhSpRkY?<Qa[H2t/
%AD<8eEl9^Z0<9=P`JGsCVX7KXU\\AJ9SIA*-lE'Xj?"<\O4SAbWc(R:V[sH"NlRnae2sm71CL+Y;.tHd=(#q>)'T""1jSHu%qP_;
%0SLAaB&l'7=,r"W9a3f?"?O5ZR?8T#o,Z&(dun#H-TbY[M*Q6t9;E<-]F>J.(9hSd#=-2P4V2UO#N7,TC%(:U1XluW(R_1Mb@'h_
%G>X_@;S)l<FOl3!V2>!5"q.4NH=b=j7a<o5O5c2FF!_oNPT[Vo)&s)h[Ci'+7"&s)=OSo6Coki/?$S'>IFh$q;SjsLe(ZJ$("?l4
%n@nmU0!7;9HV`cKlWLsVSi2/dEHYmHpOg`5k:\?%b2em5E72=YXn/<\23<*g>%aO/l-55.G%hfj%G1_8U`"-Zkp,Z`KI7Z;]?c>=
%^oZjhU`6k8/\$3M,ThRBD#rKpg`o;06a8ekFYf!%+*6>Gc5joB4<W_a"!+aJK&M(":/bY8Y-c9a9?[CQqt>/&>+RP>_Mr[1_m.3P
%+GufsGo8>h5&)3)Cub\MQkZ7nJAsusN$@(_0]aO2_Cruop(:eSHmY:(oR@nG<ROtqqj).R>SLPU-fY^\FH?U]lc)P^@P&F62htct
%'Zo'hJDjV@nO1.m0spt^!5fTok7:&N^3+!="X6*Vrl#oZX3^26CT4S^NtOk]WqikR7@O$J;e5G/4_`9P,)kcu]'74V["l?mmt?d*
%.*es<Teg"sATCs<98gai'e$.t_Z^d6Z8pu"kHUI#Hi1,T\f3TZ)jOZ%3+COI^)sGr"'Vh"K7cc+G5HJu#cl^jbf.Sdg;+.D.)UL+
%);'g5_iDD=_sjiY[5.(QJ&Cde<X,'h0O*3afYO26oLJ='&=9*$6Qj3P0sH/Y#K(-S?<XN@e9D1i+Ogh0a^DQ/e_(c`LB/OX?X3]D
%)"q_N@RM)GW0DX:=:G1[#EK9OS&K3^S/nqg-ZF_+Pu]nEqBg`$YcRoi&"n.4*s)=VB/m!Tn9f&=qWr:1#G=TZCnm+kc]Pt39jV3f
%L\dg@VHL@[+\f!P8dVU9CHA4f1F$A2RRT.@f3!>+KL.='0cDmA5G'($#*i<u1Y#H7d+47Kba'sK*a2$2^oZ/rGc=A.]m>NNg7W(O
%]i2tBUOoaiT&K;-@)Et`18@gl5>F2`8\Qm3lcRCs[2r',oodGuSn:_J4$LSKAP/@hRG`WFk_:Ip8>*JnY/)mRML)pAKeWk7.:>Yi
%XJCVe^=Xg3okmeYqg"d8FI$*OrF\o>s$rj,>RBBD@=TAKU\8;N*rI7A''lL5oOo7?UrML2<"r#XBh^D8pG>i"os@K.dRd&c'sd/U
%(_s$9`df@I5;Uiq!hMFao3b?OVMF8P24,t=3bBIs<.=C<(H#.`%i9!`4-i^P3!\bkE3.S)(C8B.#\*ri=7sb&@,[#AAO4DhD^d68
%UW%U!j64hk?A>Cll'GEq+OU6FdJ?p%3#K)>@#''-<#"?7%nqT=oI8$r/%bZ-M()c<8$k\)>H9!&=1[@5+D3:&F'_$Ca_/l586%.(
%5jCS(:RtgRfFi3Rbc1=+HYU3NX^Mg2H;lb5r@io#=g.NVpo=<'WZ4R,Xr,.%G9dCj]%"=(HrM=$X5[OGk0ZfP;K.M^;5l<VC-K=h
%NkmceJl!Xk^iQC,8uHjq%(#S^?4R9fk(5m(:rkH-T#3,0d)m57fOUP]@PRlp35(sk6\-fWNCnkE]iE-2El*l2d2Vkgc'Q<CKr4'O
%),+mV:uKb55N+oE1R"2!d:==SpL?g2o=uSq[cB55Y@QLi:4=IBYi*S"EX3X$1_DJR=+G&h($lU*!"+]t]ApG2#6dou',+.)+EVDH
%iI@?5d6URpl\scS$^bEZ!=%o=,0>6nE2&bYF<D=/LGs]+%`!RW0+>38!r\3Dfc%F.\,F9`:JUXJprVi_^I<SKK/`cCH4]Zo)uE=s
%-W6<JmqRmc\@%^^T6fmc[G]PJobAR.::D,'()ZFqH/*(]rJ2:2di!D]s)AqDLM5N-G\Q?":?'5c\0!dJKKikg>2T6>n*UAO/iWMP
%/,b,S'D@-4+2R%D9!glm.H)^Qlqt!CL8GWF_mEqFqNQ;dlk88dr7sfE5Q%WGrUiJ;50-KOHqZbb4LT?F7CXjIe"5cNH\nY8/P?fT
%!OoOV/64kCo<b@H'7`PBB4s>?4Cn:ALR3*;33#@g<\mr'Y^]5q::0:8pRWM&hj)tXd]Ya]i8(:W0n/?IGcWU.J=VY>Nh<"[B"`P&
%5-^;KhU/\p2^@,FGt?Wl:'(;Nq"21Gjm^*X-l=%ZJ[jLIE5?nboS3h_'G`6C!H)`*VSB7D(W,RC1XdNV%_QWXnDAPe2Xm/J"oDN?
%Y^SN`3=/^j%?!48k*sgl=SqabG2H97RN2TJ"/f39lRr)F04S!#DUBQ::XA.-`burBB%)&NLQt'q>pdbA<;R<4!]0sfJg?M!"g#O%
%;`OIaOiQbUHkBm6o-QQM>B0fVb.Oq%?>=Mu,mnk^Z6E?@;q_2F7,]Kk2=`psXB(#I#*fE$7)"*Dh$<Xcn>:\`1pp1ZK#LnNRjAL)
%DhJH*KGCSl@:"m--CiQBX^Oph/A`=m"e+J.>8D#+fm$N8)KPl-blUqQDQp)t>3T>B^6?T@%<_X:C"XYbF_=Hk4:50mE+@R9c;4]?
%iVGVVJrC8EZ<2%e8]Xk8H7O#<$1dt_'X5Hb&PqfmI.`Y&_E&eHNdaVBCOo$G.8-TaLDA+Zrm$X:&U0`\al5n+qB*HhXSK%[.Dkon
%-d!U1#@b(]@4bAmDTRX+9Tosqr:r'D^`'inc,X?r$#>QGZ$f.'YQ?YngX8!KqP@P7#dG(Z4_FC:@XY-=5!f;9Vj"(RXLAHc-_^(h
%4r:3McO['F(2M++RODXI:Z)"93NPcRq*,6TlZj/1-Z[mah]u.j7sV2*VcuTkX^9t0O0A[B1;g4*n&aa_4P#ie^=Rf1rg(P"?(%&?
%YX/X*&c["U@o@m!?X_r@[rBK"IJqtQ/!7&3(2L,7>Tp1>h]*/n^9?:N$<TAa,!T9qa^P^o3cC"WDeC,!NG\p$&.Oe!LL-q"%X7-C
%8f!K\UHGb(XBotb;A>2"9_<2L1rSZ=dQG5#m=XT$f)TIai^`i9jfKUG=fhLr>r#G*;#XK"CSp,@M1q[VhDGs9Lt*eZKkOQp<H<,t
%c0cl[mBPYfOMRCX4?Fj0dBW5Vp(:>t.@PZ#@l;[+?jJ^i+_!c!>WPT]3Au=A8u6Oc2k"0[7c.G`$K&"cIY6$le=[VBRN-lfo:`dV
%8f@t24)^^%9Bk[T(l%bi`M[\2f[@;8Ka(p+*pd%\`hIp]OQ:+0m-/LQhp''eVlT'!Rp2J)%78TCoLn`IYh)qA.mKR7\n9&_N+g&>
%[.iNhV"f8h^.N^:T+3A90u^$j:$$OT/1NI^(E\P)k)O``A)9[#Y;bjTfJ!-OEuUB.*Br"T4OI[XZuU?8rfh^)IQqonQ(NNeU5tJ8
%,,4c!]-3BtlbE>^VPs93hXY:8'V>F`b;l!S.Q%3sG`)_>T0@Q!M72Emd:uc:Wt=[7pe^gm.D>_B:VR;e`MZMgjK1q+BPF6nA;r(O
%*[hZs7iODPW$Nd9C2^cPP3gZ!.kZ)ScntS&>?\#Be7M<nVR#"+j@?5%5P7*QXAe==^"K_e>F$+q5I5qNh7m;>s,D0XaBh-NH1UGu
%cnircSPP@Xn;Mi9n;dtV7N*;X=r.*_#@]>q6E_Q[Bn'QE%?#1%bA]e4^@dp:X%l\UGj]R*Ogt"NOe9`T6bmub<gEP.]J9RbZ[G*a
%&E?7Y`-J9\c96Lo>(N3UbsR!%.2(Gr<dWU`GuMKs]Xqrs(7udT!(ZDEHmiG-.d>Q[Lm9*4?L*JN!?.n*8+ORjGK)UCJ),cd%DQN?
%(tS5p_ju=#G;l@54B<P5BG$@?>LS`WDIF^*C@*EY"VcFX.Un)_!*os5Z"1Ak[HK)Jm<gFFop4D/`O::60lei[YsR&O.ZZH)F=CZf
%VE.j<.h3BK.>h6$OjXfc.i%%4UJL5M5]87O0ja-YC@*(./'W7R]59LaY"78d_%]bq^m*qE<chlf^q\<@/6jI%i4`b/#unh%D@,l!
%ZZ>3%T&M$&n0ZAIFU3I0)p>b-L'40&Joj_'XRQ`1dXkjP,"9s6l9lgopria^2TS885!_ZC_WD<Y*oF;R*%u(C"#@#>$po0Ri#XgN
%'2c[Z$,DLH9',L:5;e;X_1oZRI/=mO;o")ms!c'4\lf2D+/$T!Y]0eT49APC@l18N_!E]d)0+pT:P&CioETF!47464ok>Hr.JAV'
%TatbN_(Q;%3D#Hgn;\c_L^<JJ5%L62KKl1lr586!ES]MK>X1>@ZVeaKd3$UnXP]a!=>30e)XmG5g([$_D;qGh*3qu]0o]s/7TH3"
%%LO9e"3k?!r/t71o^I7P.?L.-CsM1H_Uhh8"[TPnL\eeqqRC&>#uUcMbFA<`4Io%sYnXK9U_#cnHIU2tkLXqGN9%`G1epE@a#Bs:
%%3sm8,DbF&f?Nn$<p5PgmpQ.!jC@2VZHKT71eQi=f()4+8(k_$Us"soO])JI9=>`l>-onE5HplgVU1a$?-g$ZWp>4IJKpc4"#MTS
%esbBYSMVVU/[hoZn=i`'D#2]fd(sm#?I!X4)pc<10']*h,%2=rQ6R)Xj.<F@NuSDp%#puOnmqI8JO6-Z#>Mi2D9$8(J5fd%8>_r`
%!!g"#KBd:0GoTP>"9/,'o,AEL86*kT5YPAPcg%jZrW,qI7)+d#"H3o76dAFgL/rT[]7oneN+QFYm9$):gaN[gKjlt;VYeFq;jeEu
%n[+5_l:MSH7R7S+Z1^;m;`#-:9h@pd)mfi.cKAM6;oqe?$m?"?-:Nc2/(%>-NN-ta/@CPh'OY;3Hh+aMV-EiXPCiM0eCa2fong!Y
%Qu4A-HMmF"R_sqQ15@'7J2K1549EnMY3tu.Tk(K3Na@G)nm[VePr+.p?X8T)J:`o6icfCgJ_!\BE_[mKL;A'Xd<bH8LaJF*V\<p"
%ZWfX^+*k?mKWI;qeCl@;F7Br_Z)/eq1@;&<L\6X-]_q?U-Z?2t4>ZB,8Zt5#E>lGD/46)+kIGsQJW@=j6.*LV$'a*4RTeC,@+6)O
%1usY9U:,<ndhB*<UXolQmYQZ\J>:N>)6q_;7SaTCZikotFgimbd7Fqi]KbNQL%3aTr't@C<!\Q:"H_L/h9^kp_83#^AGj)d0L^kM
%NIXRA#>@NKi=AV@n>esIQG@U#1Iq(_c,tIGdu4[u('WUmHQ<KTj0Y8T-n(W1$=lZJ`s'7$c"@[gM!E%3_i_Zq0X$Y9s'(*0MXPj]
%aFq/?V_P[TjM,mBrK.Tof,_kI^3<N5e`\<odZ:+B]',utfG-Du>rT'Ih.MVhh;ZEQ,[KcBDVT4_8g]o,R.p=&TYls=ONXkY\4=,Y
%NocJW\5rqQY\Hm"C3Z>p(Cq!Y2USuM9s7\O&<cZJ*Q4CM3\DR.TG@n9bcpbH1*i0ZT8jWQ)*t"Y'AR*ca:Un9ehh*9'ciME"jZL"
%[Q5R_JiX0j#mF0s6>U83%`lj0LV!RCk_VN=S(Z+#1L"bQkTF7)m9[If'"u@g2Y*lqQY_E#g2*HM00UVTM,iS=K<qQg%MDKW&O.?d
%`)G?[@HbtB<#;,`,bnHH.Rs_D77"5)+#m15i3pGmOn+^6NOG5_W$Bl@M@?W5b_>q"As=!]N=5Y2jbREE;!.n5PmX\%?FIX:WoAT=
%ldDoZZdiEpNmM#[8dd\WZij0ecuAO=h;XOcX*AO?jJf1G*K6&PLcnJ)A4,o%5Y=[H%Z4XZaT/noT*%AF%)V.LSu)m,To!q1Pt_`o
%q])i#_-mp[U03^TX1g^tir]):A6G-CH`$X"ni\-QYNs,t6:GYg;Dpp;*HQjMR]B&ih;!<%h0*j$k!iWe?=X(R;Hn9YZ7`;[RFc=_
%/D[Pg4b.]5l.2(i\+:"V(skH<\g^5P0R6`]D?($,DE9aO)j%LMA'@555ZcUW7=\?\PT1PK^CfOm>s[IAPOl+8:;_8uj_YelO,V8)
%"<Prf<#trbZ^#l<7MjiXf-QK&MbSX:2[`Z679rUPh3ied>"2fn!]k/sXH67%#Ds6S3[@Jd&s$7a)`W,+S>gSJ",(]2ojaM8![-m3
%$4.EW";h84_=Kjq4'YOEib#Hq]e5#9)>B<VVlAoN0LEBN5D%d_3`_>U:Kgmc%W6'>3=#DO_Y3m"XT*K)jXA;dHM$7p8Ii6i#`2@E
%fCho(?SZ[BRYq2<XT.nA)?P#<ork1B&>4r`IgAJ?3AOf`-gA[TXkJ)c=,mn0=/m?ha1KXd\!%I7Pmf&`NHAcX$)nr&j6sfPAX-uG
%WMs8Ii+o<o\B"hL>5pX%T5Fe4KHJpZf!uhFNejQJZ"lFo?oD;Jk-/)/S:'ZU$V8ullXL;C!FjP1SSTIaaJ<Q#lZ+2i6_^Qc0',j#
%jMlI$mI<Ig9/WOj2,;p]jW+Il:"_?_7@"hZY*doNU$:A3dFe>ITR<WhF87<%'L9$e^,WLJ`e&G%H[>Si#*cD@h)WWs;Ig/@IDXW'
%SC`$a>-+CT&qQC7XQ.,l!aCfUh+`jReQ^A`BQ`o9BA1sk7==opb5'P&q+u\C29PaEC\]6mk596`oiaQ1\@oPF:VE(_7U3NLIQ=$H
%/`2P`FRe^<54r)CJEAoSI-S+e2j2V.Zci0oC\co"\OnlSH7^3`"g1\IGME\3j^T<lbKK_2'<mPl4jP\BP9`Cd<4I>"-3l>089O)t
%D"&lT+sEif=)3,n-/U*Cj=F[n$Ftd-F^(Xu^\+CQ'YY`YPM4$FUf)5`5BFmI&/Qph8Ld:s8qp:HSSn3Y;rgU,Ca-TYa^]Z;>'*`>
%ToeOme[c5l.;!karf'Vo1W5f]O&-*H8BUA=JM's>X7jXeh,l\,n61AqNHM"&^Se,WO(2?W;-AHgo?p>#1ZF'.`u[m]dZn:9QsYH^
%c+3tp3l9/;1\46b;P<'_4"2R2:Zg^8')@2RXg5R&o1S0"-s1Y:Bk.Seb.6%bJeMgmS6mK5;L!psE)cDnKjrb"cUO(`d.\Muq@(&A
%/U#_j-jJ`A<`sg=F*og@6_ACj-D(C:\*eBXq]]5HW?,_O$kNMeWFQq2#dfEiNJIc#iJf+W!a]eOXW.Su@M4DZ[2t<C4>*Q[1s6)%
%P\UU:>)Mp9R_kbErQUl]`hcobG:Sp[qF_iiq_Yubl;L<28@'`i>19F4H%/Fi_RL_KHHMW)]'#0@eE"\SSL6\OE^<f(R$(L$VH'@c
%feHo^'ggA?k!*:AP)>e<M5FFcH4nW4:2<\n(nWS#Qg\J=*N(lXWi07<UY!_DqM(%HCG1$gau$634m'Ng%2e\@NDB,Z>n?k^='Xg&
%Y'TVQrnsS#nH\/r3I$$M&VcUEO9^:BRn6KC-l6=':G(8;.os#i\jtt,e.e_Z/@O#j!a6jLFRnL?:M#DsQ0Tpfkt$I:(m=$=(I\d4
%8dM.Q_7[Dm._Tm";`nUP=sH&U.l"D#$']$Q85bbMY`%iGhX)&#r(2'8#q^O947/iOs'(XjqbfLM+/r"l"\FYl;*Hh<?uo\1%jZTK
%b-O+%>N.hlp%F4O6E6<fSJ8b70D>!EM,`3:\8'h47rMYQd@96]HLs[]dhJN8:R=If"C^>92I.\Vj"j,tT<BK^Td+mTFHto4!5ii2
%qF*#_,JV.!^E--_oEHmC[<f?@UGoCecEA+odmk@ZlCaW]F;>.uJjJq\4!dbcL-IeY09&[ap4V([Ib$!.eMO(?fE3pWaeo#3IGgP6
%Z$B@Ys'We^qRd`>FEA8(MShXc8fA*jC:SS.JgJW5JTDYcft:CH77k!',q:F3paIRXkT1@/ckW#iB9r=,-Nn1]-plWm;TpV2URkI1
%Vj_aWdTjSfF@2?3%JX)heqL-d;m+?^r>QcFjQBS+amMX7Ek:R;k$?,D3\0fDe9G5n1(S4m*Z+"1OUS9oR4$)se-:#$DXPbHl/J+2
%l>h:cr(D1[H*tdWEPB61FWu,^o5=2jR<!RaSn)`Kik0&.k"3p=`H`9f$c.G+.hqtMI<X--&q`Y&bR'tK-2!E52QaC>h`eAuc)4*O
%nYVYA%@]N+\N$cl*W^:dC/S]*'-n9-fX1`cVkAuEO-&t9:HDhtXV)>'<XbXlSmlQng5ba)c!,t#J"q'J[ab9B)uf=Xc%;rgG'bN$
%8-nTdWR.2qYSb\FeKN39="r12=#oO_6#g5I`C5;6Q4Ycd1]ci4qU[d!-`_^QZ!P>?#N_(!D$=@C0;*0)*/D17$/Df?NU:uShnjsW
%_p`:t,h(%#3*?8]n+PmY7C%R#TlOQ"7X(!]qj!%L^UD`BP(c`8;BuY9euhmr$NXO>,R^:c(!.pGFKJh<p+CP'X<`9%-2;8Q0_+JV
%.C1)M3l5;$;L:&Lb*/j5*rSTdnmpqGqF,[]/YM4`?W<869XI#^Pc)Fn]LGa>003+FF`C9M.*2P@jdf_BVo)tS[Y\DbQ*Se^g?J@b
%URV_6`ldNlI`d,'AB.3-)hh!.#Yio2A#ag0>Z;_1]0)n2'!65UD`::8B*-W3krBpTNna;-:`%$?g)eUT\t[)edU.lEpukIs'p^Se
%8'dljRDR5O\j8/MR2-R?5qdF@530hA.Ff^`M/#69hOCi^,8od>/)YIjGrh3C"rg@kN,+[&B&(`%g4fBX;bm(FUW>#+U(S8rW>*.e
%NM"@[fnJ=X<LdEm`I@O5W:GP\XYHo.WU2le>UpQ)[FMG,)nRC&Q]eYd7Rjr@&)K]<:r:pf0D6nU,8aJG"`I98NlNV$]7[S6o+sS_
%lHjEW7D;sYS]@R_eK0c'Q&>NlGB_g"iCg`6YOe_o!4PoXp00HoMHBnJLGC_-.i%qYC5%XcD.TgEf?]&!p#bJ06IX'nlR?7j4(9VB
%DHZo$'?ff@3>R]p)Uel<s&IXtmKVL-D65Qffa(83-tB)o/!rFMU^C/i1q46kg8jh:"8h@33PYEper^2XU[(Z.?0BaJ!>a3I]s]u5
%V5I*E-eGD2FIdWhSt'5JHd^>[SU%p*ObTs+NRF3=fq_Nl`71DlPLFO+MTGEh^C0LnS+S&"":!s>S$VfeF#kpW5pO>17]fl5[ju.c
%M7!M-V^?8\oLU[nI-/!h:`>ZT8b-W,F`YO=5.N<*`pK#uqrB;JhGh6r@@pePlipbiIau;!dGWZW5&>0)>(qBF=XF![VnB)lVm&t"
%WXfa0b(Y7VLV$>4m$%&&,Rf*\_EL`FiDk;X'Y%=TTA2Vk<7kHLYYWQV7V_>%Kmeij\CW>!PH3tY]X=dUp;r^b9[)Y!KmdttX;Da5
%^T^M&SdhasDD^d@3hroT]&h+iL9=h7-T?f>dY"#B0C0A7n0g`qRY?01TPh8ccg)>>l.@Q$7U_oo<SoZiVJ.TQ6o;T2IJSbCEFGJE
%<?JBpY#O%$=4ML/lb'm7:C_ob@c](nI<&>9EYU)@(A>l'e]KN4fnFhU!+?sL+PP?QqrD?\+hRW7_EPN15&K1UOWqC&IhXj40.Q=P
%%-csYs-!fe`-p))&T?`gAApa,bhh`*l(g,5<8=F8ehs&1/&JaClj&M!cuk8=**]"DEp10T:Y/kaR^`(V-.Uk4?(]&]"Qtms\(@uF
%Uk\rL>]4h.BCG)56H`<J"b(d`9bm*]`=r/lP=ikYeWN,<$_*;oHH(eiJe:qP_FDpa8p[(P&sp^QMJT)F9e*T%9%`LkbQ$X[-GBHJ
%r"KS5nirXXB4jAB?iHrRb40TDjaW)"ReQjHXQ`YI\lXAFoL5,H@2W?#p]'J2Pu>-i:D-@KQec]YjaU*RC>]&HpK-tW5M]u,D4WDa
%nk:r)pC_mqG+.HthVtE%^U,T`c1Ap=s#9Emo&c_?nsVbmoL>D)h5I4>K"@fuTrdlmG7q;eZ(l\M#d->`eN7fnN@-$OaWt+X!pM2O
%d94msm,+5M.3iY7TLD!bYA_=W:gG.<2eNo+Bj=2L8u`VVVCVCD?`FikVC.4*4f9;l_<VeESok47.&i70FE+!-JqE;RH-rT)OE-*,
%Bm3*SkoNU^%`tbPqppi"0YhTcf/qh#5Z=b-\ImG?l7$rYrRE.FnCWorne7Od%@u"eSP:E:K$cMXgTfoPlN/_%]RVZO\kZ[moN:9d
%@B5[=,DK6"0??-7E_#W#WaiqLlXiMhEIW%Q+m)?B'[#[8&CADn`9:sK.i`'7!7J7D=bbK1,[QPcQOtZ.*b_6\<Df8a6=CZG,EAXD
%V=c6Xn))Amoq!Pgqo:Ctb12!n.;;+_$#3QAl!08fp\sD6eM"W1:[gL^Y5UM*)9Le5LN2#sJ55dIAP@7:eUR,jcVs<2'+::nTLl24
%eaEB79BX]*mJF%2F\7]gqq>@mr*Z$!TO"VPpM2;L]d<QIHE2HW\#8%80-;3foo:\,.%1B;>Z]#16@e\f=V-Q>TZd9a-3Eia/^[S"
%V:$jlJ[YobAjW(qI35jVNn.^i,$QcRaW8m=*o!S/;B:JY`0G%B75OPB67Or50N.#"lUe';&<q"l7mo2IB=L<BHBtI$XA_g"Q&bEI
%*PNn2Fe2E&V'*^&[!El1mWdrr'KrLY$C>H>UJ^1;7oVs$NlB)5&XV<Z.?tD]b:!`gEF\+K]%`8ANmA/UbHKd6gWl4bC<8rq+g`b*
%L,n%_N"@#A;7\@kFK9<[#uM2_]%a"0%[FV0m?<`A\#sZf-6"Rh1JnW*KQ<J0S4s9)mu!0cgt\+<\=_W!GLTPSQaG?`O6aMC#X0!'
%9V#VhM]@)gM;'#FLgWUf%lar39iMc#R]PIM7?r/1]2khe8%-?;dm^U8*P'>*)l>Mc\Km8#oV3HrX9;,IPc>:IGG\3]qCQ`-`H>Zt
%C5%H_T/,!7h+(BR.mV!W9ii7E-;%@g=]K4tWWD5(]U_(T5i^PR5"X.ueWTi8.+H=@<Nk@#aAsHNU+o&bNXJc9/IB)a^ZPAbQ$GM-
%X9DO!]PaP>s1R6:-t!K#7AZSRX>N#>9KE\nj6)^PObnJ"8W'Fs"J7aM:M`Vd_=m)YCNm[\/rH+oZ@i^L7,JbSlY'plY4m3B6?B!D
%Nubtl%t`^-O\quY(&s0CHto!-L^dKPf76l6SWl2b47br?>.7#pqPp;uMGjBbMro]2/`f0-PnW=upeuN^eQ;.`b[3TCCl[Mj-R<S$
%80t3\*=8&NUoJ4l[H]E+e!mkDa9OXjH(7>ZW,Ac$b5j[XCBtXTSrs2q6jFI=-(bBbHCp4@UFrL1<65/&ES[]r$>8&[*9H-#*G,Aa
%R]qW;=8k7cBkD6T3qaRO0!8-6L%,KKHM.D%:5or,73>Z%fN]RNh9AS&h`33YG5@nVo's*b2>4esGp+A[UNCO>^61mtVsE4/a1'7@
%js$uub0W/>Y-X^!'UbLqFL0k)%_=!jkt)E,1LnLHHN^SH:W<;o.:=hPAbHC)4YKAHIdq?;1(r_X=rJNtUs?-F]YUQ4,R[ITU6[s?
%4N#SMQuPD^6']0!WX'qa3T!bX:IVh>:@5Pm4f5fh>KTA9_XshR+W"#[<1TM]<*Lhnl]5QamtA8?m0g]`:i$8,%@[,Nd/#eHK8O1_
%1khElcPWNiht'1/BiYn<6o9lDckD85Gpi4j_^t]"P_jQ_`N8:nSpo'0X)H988Q<"NQ',S%/4gOu6DY`c2q?5)8^pt*-l[rm?]qA'
%#=nHCE`V?0-&Ggn0c+dm9!p^^,Z/JCic,%D8L94>8Li8^-^H%#Ef!IQU4t%t<K_Ta-[f#e@Z'Eqn[N*_.hm'Y+1nUNQ(^'ma%j.G
%n4)NTN%848LdlH^Mb6u%.hlh6rOL)YO$2_lE`o*mYhb#"(#kp\5Bp<SYL`^>AVEVYP[75k<U=JM*?D%]ST3V^r_opO]'te7qie_\
%:m.5ere6-mn^e`AEpV7-4B*5hjU+"E:HB.GZqe$WJ)R)I!T;3;::3D)*aY]"o?oB&CjB?1iM"2YQeZb/,@'PXKfH<rD21%t(6kAX
%'.FTG3q'pQKu(%'*==.6=d=ZO%UmtFFe3^6U&&V]2gVX&cu\0>3eM/p_s4o(:f"df'eVW0#UEc^F2ZGg??iDtgS'e$G4L?BVjGG0
%W>H_lm8.;R5lZOnQZAP?$P2pd;g<:N^A;]%!Xn2pFIisVHdW^8GUS+eOlVCh?Dh+SW1HM',C`e5knbD@=3#8a&W5*nK['r9e[#rl
%@0<3/G2XT>c/[Og($>eUlHsb5+cb^[[R7HiNG=?[oYSN;bN#a+Di1pbeOhGnDEBsP$E.6TGiCl?k?`B]L*A5)3+d^t00D@0lhcVK
%&!`fteTM9q^[P(u[_j'H.'UlJ4Oj"AY&iR\$0?/.>E;:`*U8c$\h6*-hc)i)_F+"N%^CH.MZ@HB,@)q)SdQ)%hc"dIKnhc)g#EF#
%$Y.Jpn5.qr3/X`.Hf:[0gF\a)5<.iC6eP?.[iMKY\>NVWW,DOgr2%"d=T-*(h8`5qG2],k*%=r-/.&;IJ)R(^'Y->qZS"A)LVebK
%0?NDj?$LT6#KIL#n>Q1P(ETTCl:\Q0cG/jF4Uf=<RnGCsPa&FES2#k(49*/bFmgBDRu8m]<;5hNja#7-LD$?G9t3=Y_F#?Xk;=kS
%e5]Oqq1XUh[iHYLf=:<(TmGH:P5oZX$P2?Q!k1[P3:.V#*ie](YXH,$_F)%IZLQ/F//u,-&(PkNE&[',68("?AT'Z[Qe/5*&k8-1
%>nj_/nRNHFN3;qPdhS/1NTf4IQ&+r%k]BAfS+9ma.,SAOjcHU>'QFjT(*Vb(Ghh6/SMI&^Mp!;ACOOf<TFKk_:dL\QY9Jb0]VB30
%DJB;hk/h<:Ho2N(p,p8MJQ5uFdn?Fr+tP7>Hh=l=qrm8XR94i,TOlTZ=e&-c3O?sA`Q;olDL9G-NF.=C%t*Z?9]=VIs6rq>ecOTO
%k;*fkq+'B[ZL)s]dDeG^i9t;no4E#JIgNhb)q8Y2gTjX?VY@IJTDQ<=e=PjN73!)0YGn=/[I&[VpN1-bHo8XQ-I!m0V%C<>q(.f4
%L[!WmJ,Mf)dJT_:dmUN>D])jSDT_16Cg6VCc^Z3#b]AL]In!4%+o"m/l$gQ;n&"Oih-Ds!"DDt0iFeFZ95N6&h9L52Y8k+7$LiN#
%o^6K(Dr?Q/abpg0]kcu0gl%suD]?2cfF'I&Cca*SDcjZ]V,QJ'3I2j+J-#*\B\I)SWfD4:)47Dg?0e8J0Wf"Iq;CpAi:cHl@Vd%%
%o%#1k>h+(<D#CIj+mroq.O:!fZI-009[jpW<aCWcq2Jo&J\b?m=RdFOLM!n@Foa!&EH8ug"Ri[Pg]pEYdJ]fmmm=,sI*I[i;so)3
%.HTEG@q=Y<?Hp6_HsK"J<MH^2[D1//TQ/$YS(<mXb?Qc:n_!"J=BjJCVIF*]NQ.5iY04HLoD<m\So;#pn.QXXFl@qK`""+0QO%\H
%jB</`]`f`Ao_,pFm1-YMN.c?Z4;JWP#%S%B^t4YWPp6Ca;qcc*Nt1dsW3oD>I*K74f17igpV):]g`g1Q3URERV-#3m*9LrGoog9<
%ZP@s*fakSI4PTB2Ac%:5i5?^Z6PTR9NBc'+-TE"Tp8jA/_TIU7)ua'j1?8GK3q*@fs-S;o6<?BtMP_'g22'(MFHSi_^k9urY32Bc
%Z3Gf(_gr=GG"CLL#Ld3o$:S)h#36t=ZA`GWI.Y3$DHJp,oSeqZ8@^Yiqo2hR!G*q@N8HpigL8VgdSqQse`hk'5m*mAf:#CP+IX/&
%5-JN5Y)+`9*W;4DcR!(,?qYr9+Y/6>`@`dP'Ja!1Oc5n=;@Xa)eZEcO7il1fYcjLo_Y6QFP-,m#Zi%kR9#,Fl"?,t&+1eH<CuG!u
%mS;BS0j2DT%6^$dnbhtGjQ=IOHcnaXq!R8[^cMN[r.`hR]mEjk3:Mrm_]"!pnXo^fJ:)/N"CFB`bh(\Wc2NK&W:UFE&0.>RN9=RU
%mYpJZLC\lrS"&uDq)1RLkJ%%81`u)OUP./3-G595IGPR@K(VjF9TjFM^4kC6AVMK.@=s8MGV9[(FpV9!&(V)`lSnUfH+1Rb*r_?>
%[0(*pVCrTIr7NaPUGoL9l==u0Ya$L*0<Hq/AbX@J5n0STaJCM].3@rA4mV9dS4;[opP`!_c%$3Vq!<:W0]=914(*/%F#%9d5-2Hs
%r-N&1!i"/0ZUY)r3%%*Q8at[".<cV./)\5g9H59%VV4$,rH)+7Ce`*YoQ17[d[lc+quT#nQMBD3ablB'f;,g.r9])HL@k>r_5D1h
%TE#G^d4au^Ldn*PQ!U3uBp%V\q[mf2$uO\N&#>_o%NacJ"$=cT@YHU<%E02PqPP50PT6(,7tcB'W@o\.^^!]m\n0s(SIr-^Wqp>H
%Gp;R-?*njkG=1TOA/;X);ClA[bCj'<Ck&#t"(-27@@(FHC5!>nJdaV(TWj1p*tYM^0Z0(],?U'f"#;aLMGs!Z"sJOcFm#@UCB=L9
%&?lOCT.)ZiF248Op_tKN>uKgV`I0tD&oh]*Di&M5H[F0>NLXb/AmC!*n4i('mFVt!@'RA-\YMCXP]j-,<cn!n:rE7`9`O3;)p*k*
%N]c-WMNi5@P5o8="&=t1+>OlYP82FriD3,?49VsF>oN.SKRMh;h'SW9bg!2lS1A.,`Ma&*#GTR)%;h$2Edf\r]7<_jS_gS`56)oZ
%HsdB4qt5/6i`bQd)D0Q=d6';0bUo-iI'Ga(Upau])PG3;QEqU">Bhp)Q0ciAJAeGSTtUBH(l!mbKCMXbZ"I#'$_f'a*p;cWcF6dn
%ZeU'S8@RL^8PCAs3"%Z+T#&D,6U*-4[GM4`2L)^SgLhVWFJJM(T8_J3"I5l16-[s;8?a22IeVu0Y4t*3gOFQJZ);kA+M82a,8W;)
%GW:&qcfR(=A9YCP$!/n;lSgU)@BcY\]W@b+FCM8&f]?/%8i?99joU*_\e4hIj@Z%1GW-5MDRiK\PGF+DPZuq0l.PVT9t)+Y+fCku
%o=`i=0;b)-r)_^XA*Al7ej"JO6^P(tj5T>GrL$"XBXlH>77<^ZdY7$_b,I/(8HA]OI7H%Mp!_R3!1H%K4fec%_la=1mZa3tRkjqD
%D]Lf+JV9]5@u!XmO`C3]QIhY6'i*`j1cLaQHT`q$CjjLOK?46amIi'qbN=-87^i2:_Qns;k+!f8/sC?q1bte#+):`V^4F=!!KM6(
%SDaW+^0fuPXVZDL)u(_S#&*'%%KtP+Ugr)K`bCc2Go\(MH>=mDp=%PQkBL69_+8e\T_Th0N#\ad7IH?Dbc!Dp1!?iVRA^-)rA-%;
%^+SP)AB8%a`F4[`c%PHAEFA;@.XKR+X*K\"\,"Qfs0/;Xp4]+q3dTg6psj2&9Rjg:p5o_FICkIVSRH0MB\kR?7`T[NJRMk5ToBO8
%=Z8Cj^'+?i2EG0u7AH-F*CbghDh]Fn(6A:m9bm0<*pkZ8G0d8gr"lp*6cCI0Oiktj#<LBj\$r>ZOmYKlZf`anV(7aS):6BAb5K!?
%C<2Up)8FEVFrh\hmZ>]O9@LnNGgq%9UEjl14[8/nkGd"_h$75aFnFB)mcj](T`ZgF=?.;k>OLZ_EsDmH&E"Z':;FH8`FagcB61%D
%WPbZ$g@K[mY?/1fM.:QQA]B,o9Ig_qH#)SIPCL`*3`E0;TRsI"(_u<OKb,'q,DJ%1)C8X[.W;NNY^?*T\F[/BUG(bT)!*`.qGR6;
%8'RD@B58B[Xh36TbKY&qFha\@\-H6I9[56(/%?*.XfifYW(^+Y:BkQn=6?R.Hl%PVV$n)9)6/s7pqR'`:E=m1NRml?eECRgM*IeS
%UnRjX*%-VN>s>AYp-OMJ5lBn9c0T['9)]TkC-=eI^f"tcoDN'.Wa"$Q:[8rV?q,JaBtG$TlP_Il]aBEep!3eZ<:gW]nh!f.3-oVj
%d!8CXNdA-5ltb=u\S?ORqt%<9?I?&F9);MPHTJ(^Le\i`@m"sfN]OmjM<j([,]$4XB4h_L%%28NVk##6:1%NM1/7L:CFld_3:5cq
%-<N/]lO<4.TThBlaqnpW9g[7rl:WC.$jKYg:HXj*^YZYuYE=5-i%5'A*dG"ur]O15Vqh11F1N3%\oJm'Wt)iVAFs<$MrsHI6/pm3
%U$Ni:og:]4jS#ScNBaX;T\%mqg*=,CS\;t*^<j`OT(Eo/k,D,$c!U3H%,*2j^F4-'TCJcJ1`:B3)GUca4>\uJ/k6At>h.<uUQJbT
%s%\BJbp0['ib<#Yk^88p)1Mg7/g35F#5U7pqD)cj2db4YoO@<j\C+fC,/;dX-NM4_dYE93`,>J`[]Zshh/(3YN1X.qaK7^F+YhDZ
%V6a#WH)3[Vld`XqJj3/I*](4M:.*p':2=KXB<rEWbMQSY+,/Aa;)W5?i]3gcZr^M<B)>1ZR_N-6=pBC!HUdKR8tq+KQ_MR`;#Z%!
%(RZ7mDYDVhM68i8@]T*]bs%SBAo@V/m%^PpiQm)O;mVO^Ss'5*DYDK-6`]h)c9@\Ca9$j7p9jS<<G!=Ir=*!%$])(!_ddP.c+nsF
%Q7P\!BVI5c#KO3]1W^rr&,r\mnqEt!W;-$6/bKiSld'bW][=rWL%1<+.%rBgqCi7@@pMO<)>BF;&#4FR_f%%Jc]%IYei%p>a9@G_
%?aruHAA3=@OcE3[!L'C0T/#krp#t??7`PBN!:Z*;Jk*n["@IAbiTdagR47Q,U'WV,X)%IR&PXB[i-oHY\_fHTHWF;&q&E.S%b0gN
%BPAW%YemH0,"C_oRs8aP@lIGIguVCq46B[^d<roGRQRf?q*Y20CZhlnZDHDp")_h">c=:8G:4UnMRhLHc%@ZKRBqSThLe=#T(^g8
%ncF_6DII`Mi`i7\!n#`A[6)^!$.,*c-bmBg,-VJM[4fkaemDg2KJTfE_pb<;e%n+kj,*8V'*31[-c/!YiFEi,T(6<3\;qU+*$+rp
%JI\nGF6Rtjl9n04k:8q'``0G'Ms90\l+gb>b9bNBY]N\d_W.4l!XBqo!p:79rO^A\4j9"H<qe.pB<9EA&W5JKgYX>J"IE'($odrA
%:p@gibV<)HUVK\r0Q7$,PXQ&^5bfD*3`P7C:@LgjbX!*/Y71+[@>.H1EG3UJ0GgCR:X'iUVU0VA5g"PBH7,)&UH4KKe9sAni;gG<
%63q\("TtW2o;ndoa;GbT?frI8Z*NYFT`Q@B[p:Cu4HAdA?+(D%Cr+,bO,6`B4#CC(SN$\toJhQhi/HEc)&^A""W4u"KdVhsk_:or
%9/<=Dbu$\PO7#Zl#V8t",a@5CVK\#ES>MI)nVD&j`=1@Ti198!p2.'XL!8,j[Ng8b(ssW'"N%%t>FQt;WK!t*[+I*.4,Z"NY"P?Z
%A6>*ARZq"a'>O.5F^*Kd0eU:&:&dIdJ\t(FQ8L\lJJ=Y#ER@%/_6QRfe+BgA@^>.HkQIGqH[#NZs5):bMj1S]fY,mK/[\=^-[*+,
%-NG(XIc)n<*o3nDkldo[@3qQ;U:!4+5.VH-.4An1+Z9[>0+pM]bpZ^eiZO/E'`Rd-RE!!jHtG(]dqWnlnZP];%0%6)`^N:JFbu0(
%K-H`!^V5tspt(R1$NE/%Vt$sKDME9c"!.h*Jl15Z=5&@A)0Qogr`mn.CZc1[694rA"O!+M7D5(:OJpFF7Pah&Vn9*mF><PobRPsq
%T<)844[lpHG_9@[Z#C=478Rr@G`@,+1e_nI)oGe@):/KqHo]S.?$mB]nOiI`U'X`h!i#4F3&$-`HK(ZW43O9:4:7GB;diEfo@;W%
%XGCe&>(.W]ghVB*"ILt&9Y6)&Z(5-N.p&7^Q7`sK3ldtKn\'LS!c+Kf2Eh-Gp^Q`FYG-[JRWZ0nY-MuWq5V7a]DsYE\+'@o-H6fo
%P^<tL#nN+klUKpiZ]mh%ju"O0$17iY_B*)2^PO]h4HL7"U:NXD)PH&<:>#gAiM[-[;g8:UfVH?%AN*im=f;lcY[I3n,0N,UJ2l1O
%=9-mQSIIeCf\6+8aiO]s%Q63b=Y76^'6L>ppf\nMD5@L8)8iXp#-KW4!$4$sb&)0%fs:NN$-afL-L6M.<R2Br[REi3XZtKQOK;t.
%iO^ePVo-GRbb&#BRe64fm^+&9YN?VhHX6_`PJAB#c,XKUh0b%OZd[:m#3Bm$=7;7<,MpYBXimq'OR7FPFMfI?I,gDQ/.;A2@"VY#
%)KVnZ4T<XKHlCeKSEp_I,^eFfI*-j3MJ+4C0N>]<5-a]@S-73M@=qbTV@10fGehOWc0,0.T!g>F#,^`3gR\/UM_EC"^sGbqcR++T
%RQJ<GB';lG8U,doME-/GF7)?l+Z`boRq+YMs2>J6?o1iVrJ&TL]A_(kjpn6IO%Y>i9Y(1FUT/+Vo<aMQPlH'81S:nCmjC<k)cp^t
%FpDW$_&`bEQGl;\kC2#R`KP.gqRK<cSbX9+K&t7/(tJ@7]73)RbKL7sq(F4-f3(nocAeEYl:^EA\K,i6-.S@3;mT)":J(4*p!bqE
%TaZ6>Wm@WA?N2rds.P65BF"jU?A#k5=AX*nSkWfIKB)*tfZddkFNNQWY/Y7?VPj^lmsT(:3\78\h@MQSe+IOV'Fs3&d<\J(Qs8,D
%r=I<$G#g<$U'*\#8@0,V*!;?#M%o*k]@u9fpHs$8dZ&#5VQkg][V3_75'#JsD<ao/9A3;!3T/L!'8T*,(mp8XViVo$mFsF/m>3hD
%oFt6o-`+]\V*+imPWNCJ'd)D;Gn"B_`gKM/a)hM,oRC+8q]T-uS)ZN(PBcVl#e\Bt8f;0FEYbt[,7j]>G:)c1VU0#^WLme_'ie2,
%,7gU5*UkF+TJ./:#tYifO[ufd<X#?C/(BG^9's1<gFJ:)E-':GBW:IV'X9O5Da:8W+sCdb:<l3gcKNb^YS-n8AtA)!;JYbZC1iQc
%0gF6tBUpnc^NUB5QAi'&!12Yt?R^4a*Q4t=TC7@R[fWX9r[aCKr%&XlYk#6SZO;7:H2PJoV!u06.SVWSY?#hSQ#HJNC0pF_C'n5_
%J+1N0IS`aI'86[/]^hrP/&@bJ!j#$3'RfZFB-@9DQj<V&B3G=K'fp;P:7asMJ7U9.OhA6W,@c=.#j@7uf9Xh2KgT4\lj5EhT,u:X
%+RNhaYWdhKDhAWEcqi\9dr6b-5(^,;jQM^N.E^H,c($uGE*ihq&!)fgT"=B6EI0K2#89i3CHD)N[]i9QI+4-,)g=KZ]W1B-9]i`(
%`cM-d(^GMK9^r_K^@1t[(#I_9M)j2)Ri>@0UH>quHJ))LcRuQoRC<ZPlmM6)$Kh'_HXt>j$A/1p_/"eWhVP!NS0[1_*GQ!nLo,*-
%:\iIK]_H1qZ10LI^lMV5_J&f7`iP1VH?^mS*RjVqs,eAOj1@O?G^]8PAleh^\*7PmJCnLbrKJ8j(>QB[,F\(p[7j5?<67&4akYm!
%PccmXbk[qgL$ZW8\nd9_)>9OB@mPqTVVF*#NGnq8Im2Ei-ZDMh.r,M*U)E9KXodi+/8"I+X!)fk(OsF@Rp094e1tYe>.Gqc?*aWI
%cg@6PecePCr79u$h,YU7gQSkOG+?\6135/YFMp*NSW(P*Mb]r!IhRcj`g]KVV&$m,C%/JpGTi:Z=c6)tI5!jSbhW`PBSqHO$e-#=
%S(K*sJuE8A/.s<q`,=4&!uI!&D]!Jc.(P2Mn2VqRfGjN0+lnin7S0?6&Y(LdJf+BXn7^iO#QuZJAB)1`"*$(O'hL>,:>N!2AW8&E
%XrGB[.b$015W'Di^sPd-oUP6%MjU8,J<,^qW/3;6;L"Wq?qj8B"E(R1><YcS-'N(O'j![c3+dFB%"$QiABo*m8.u7CDf6<2Jmtar
%mZo-'49IP]l8IRd^hC3XBcb:<K&&eG@M?gp5^\[nME.@1n,QrWk<S!PFDrc,%C2f<rPm&Uc\H=`c7A2IV8qV(]B8JEKAS^KnJQOB
%]PSk!IgmWph[984p6B1g>&j/&gXn\^B';3T(WGQgb@tUGOPA<RH5))D?T9&9T,!q-D)!'tG$u'aPP,GG,+uG"7tg6L\B>K#`?ZR8
%FF]C;"s%M,C_K%$h6-9BI'>^dgcl&7C[OABUZ7*>U;:]u:?kYKB!>J*Wn@sY?BZQAX#^Z+!&cqekY)gQ7joqsG#qUVA['bd>gNeT
%G^5ka_kgicBG<Dh;?L&=mRmdOLd^EOXQ;I!2jqoh#n2U^oQ;bj@$:Ru,+5@F\:Ur)3##caSIpWU%KJjQ&SL&#OMYu$Qk<]jc!k)^
%%$D?>l+#bOeoD=Z!4\7VD&=<7e5T];N+M&=E\N)h_E-H-(7qiV>]-%XcF!/]Wbab;knU[kEesjqWK#)LL&dBWRTl(T:1/:T/=3#7
%3o+T/I4gjoSE;.N*Jh!$d`lKDmj4N436gj>??Sd;j%ItK^n;>AT;WE0%0=DF*iT^glaX;8:9fsGB1BNd*GhF3KBguso#M+l*WU2j
%P4j4??cAbTlOsbXAR+$?%\4`%LH-)mCIP.KibDS(G@*lHO_pbeOO^$RK#/7RrF0Fqb)pBHGA#3Vk.2ne0R\-SU0Tqd16Ul'U2eIr
%&W>Vb>pM?JVKhJ&nK$!^YFXRA_)?&M?B5Ja<7dYp>MjZFP=YgEWn<+Y$j`O,)A`s*1V6f>TP%[trDI<uhC<?jS%"L.MK\]/eDb$8
%bBsJ!ATu(]d6/:P.UcQEpnhIDA/-/Y!=8ScM+9Z$%,4'AA=_?_4gsmK.(QT'H>M2))Y@GK0.]6>YT8%KI"eX(H[qeBP[#ncC%Grj
%?YD+/lM]T<*`1pQg$@XM4p\q5F"DBn%B<E"'X=qM>F'5p&>iEl_a(G+J-0&Y\=$Y"9RCOV?^i*KS"A:bY($6Bn@;gaO.DDIE(dc@
%(221[d%%K'b?mJU[+u[0r0p^[MBG?A:tDQ6>9jUt%l.^n)S+;kdE$1j[lsY7lZcOc]'.si62#jOgS)ZTCfk[4S+B=V`3AJqglGQF
%fHr_uEleYPI<sP=l*0JJ6qUc>?c.GUq_\!k)!q1GCJJKn*o7G2^:(SnnbeU/5'9"J$OlPFPPNjdD;BDq^)e4ZJ(`\"8$Xe#-`(">
%GT*p-bl*[$7dSkrB$6"lQ[P4i'KdfPpb_JZT>n`c`J=u+mXP1UR2UX)MmQV#Yu&Vhqa1!`m[5YPha;;u,+]-b\,l+?AE1YQ:B&F/
%7gtm16pEJdXZ)!ZcHWn.CqIt02F)=T(gCneS!.Q!L9^EjY]k&q*_L.V-f<+N`qY!Fq"Z!/<2]EpP\a8*oJ4p,[OMgeU$.u\49jpi
%!rN0#L*?h_2f.sf!oQ]Or`TM$RUu6f,T%l@<^R`CdQMfChWJLGrG9.cd/OrWkdU7Y\QR&mU'@<6b[:I",'onBG[s7B!3"j,9FP<8
%PCoY$(kDPYEj5ZTS:gd3Sdc5-s4c>:p#^C%f678n%j+UN8<!E:gb3rZ=gpr<1dr(i2N#@Z84HK-M#p+MEIWE2>'nS`3?OO)U@Z/#
%;5D1Amb-2LF-rG@A)tu)mOfTi]6a#<eb.bC)f$/uTDdosrVSDL\Gu*dNW&X=0CJ;j,X-STrr)A84PnpXs"$,i@G0/6%\N]+VL7u_
%ht`&N=5Rr0nUl&#rl^;Y>eV7rD2Hj?+9+O:o7)145@Ff3s8$*:qnn>Yn%O0l!sSNmqfpIXIt0c/T"2c%pu@k<B@":VHhPuc:n[:V
%*7)Csj5mllq9,,^4\h&eW[OLN3qgp\-)]8S+MN0n&l39Ajq5=To=sas0&PO`qWcCV^"<5tGMW7i14K/hT`cIDn`u7in+BW4V@P:!
%@k*O#iu]@e`]lYTbobb3m/)jQGLnct[r3q'?J^1]c;-JbNP2r682[dnlXPtSs))a^5O.aGj3nRU58=+[UK-7;p=8Qda")[_HQmh:
%'E@Y9H[gD<r8sbu^3"Z>q[S\7G3n5EMp(G@pQ*bu[JSF7_V;g;SNeZ[CWl'/rVk'bqfe)6`T[q06QD_qa,&dSb;XI;T0=k5cH]3Q
%"Q"j),D>eEYO>ir*'r3W:I>s`9-54Aps./\6NlhP;PTe`HUNV\iVlV?'!K)PpdaGdhr!8+f5ZJaV98ZISq]L&D*Pp#?JN2@ro3q?
%fZ4ogam^)7DQdE]Q2gh%lb<AWjitiA$)bC[_Q8WrjbqmJ=8LtK]:7"@S*M_Vr6=Q:[s.S9H5cJ)&&8%miLBiMrLt:(4+-WErq3Jc
%\,R',rP?+`D\)m@hsPH3-9qEhZY,p$_k0oaiUtm1Q=At50@$0fo&"n=pk0WI48]S<4?n0.8itVdb9<1!PUa,8;^hU3SSo/M<BOF5
%<n4%V!9KS7lA$nS[UJjm;j(I.S9h91V8G'Z+]l5Z=+"AEeRPVeY!['I1>rAVZK=tnjUX6t*WIC5RlfaZJr3,8RA+T3p1#Vp:Cp'1
%4p]Ss]stRB65&?O3uV4^flugs6^;/B,oi3g%7/%sO4!'n2Y4u?g,d_OQ5Nb#(H.$eMgqs$gNsCMKFbt0Ce(*be@kaSr3]92k?0<g
%)+Dirq%]#jW'62N2_`E++Wm#Dd]mt=gh&Br*TJk4+4k,hkTba=LY@i4`XU]=[LKVrrcF40pC`L[(KkVKa&9TPKpMu;lmE(WKpmih
%<nCEkaeZA.%29+MkJCX;-&@T^`e4P$kotEi7A#S!0pf0UA&)ufJSe$u_ou\am`ou-_h9#W2]YNs]'B[bA*Qpe9g,I"`a"OTlO`G5
%'hU=p/4;>$\_,MGp#p_plVJO01Km9Nj09rpp)GP'`IcQ"UET!6/Sm85M]Y;Lf]1VrS.Y]tMT>/N[e85:L'7oj*"@E8\W.+*a5UZ'
%[LNDYr-G;sAL*XMa3(jd%(XeTeBn0J/0(DqFWG3aQ5M&0(,grR[@_>UloU&Za<ItM`"a#pE]Gl;;OAR<$mp:)CKUQVA6#er)@T5!
%cSA%S+37m:W>&_f3L<Y(dRZhY5-Ep^a?%uYDCaF1g=CY_[Gfbqk^lnESA!Ys><^&1g'$A!6=hqb==QBXLs,F=\/>DI0gO*,,^8n;
%UYdu'+m^Qta-F4oPOO+dYRNGg^!8O?D,&b=gU^1i2gh'XFlc#@./u!e`cuo@+\VH@U!T(E+?$\O&fW,?<V^R+*0^+NX>,mj?;1^O
%gO+aC/'JUAIPqiU>ZtB%R`I8C"NS+9:h/l'G,RM&jEk-_rY#K-iYt>0+OUfI/lDiFfN[bWKQ<?J1Hef`/Zjh&&ORX$W1[6lbnV-U
%L6?M=,dBAR)$b2Y6.EpnQY(8MWR1U)Tf-GPEIq\/gJHYa+7)jYi$\S&eri,-?][CJW=B3$P@?tn#dQ]RN.DQb"su1$E$9P1a(L_U
%41jeseU.s)HEKh,F::&?P'YJ'mk#RqaG-*J)q,Pfk!Yb#?UA;%Ct1nn5S=NR)9F/AYN.H=r.*$>R9sI1PbT.rcgV>u<:@@;*cCi0
%r.+PI(Ri?BR<8e18do:N'^9Q?M(L$N>2J@1=gZQ7D6p$JXm8SuE_1=/&RAd#$1a?%UPDc;!`F(adZG!0>Fn_S-S-r#Sk&MnpS7>K
%hs=Ej^839m@J<?X"B!FlPTF!UR(UWR7)F=K6p)WTj;As`q%I+XY5Y-DJd(I?oK(>TQ(YskPtWDUYXn&YPHiG(SjJQ.8OFC)Z,i4B
%A<Y(eLt-s4An&:0eJ2n,S#+D[9<dj^G=b68iD;OZ(9DcjGH0N6lQTQmk"]JAA0\G-%Kpu"hq+;9obb'<CK2#rEP;RW&eMh-\Oo/V
%;tW6nlb]M1/*o,j%jW=Qjs[Y'[TZ(^"+QoTDG)0QTGUVQMR4q&iOQMY$KiQ>'P'gYWNE*#p#Zu<3N6'c:dI1Qigab2%H^TOCkte"
%dEf_^.S#o+cum:l3bodIh\%k@Og2[O)G>+F7PLPX!n),27(d&A/Ctk7-%t2ene$dr:5uooUk@9:I\<YQ2C\7UWC2N"%r$-Mb,o`?
%/Kf@2[3dWQ;l7frN5!jUc9'0U"<D8=4;@b'Rmfk&#tH2_6j76>&MkSeM]*s@F,`^#gnpTWTaqi*1dW#!;TSucm[Bsg8NV`!fjO*4
%P"+usbUJAU<6pAPA<T$`82&D8_17Fbd=.cVD8k=rU8aJi\Rs8Y6le+JO^O:8U*0TqFEp`@(DDZX3:tcN9io"\:ND5hbJP%=g[_p5
%gJ.OHf(ZJhc5$1@Y9AC0a>3"V`N6h_Z]CDKMZ_0r0oZ=;Mn%"-`PZKTWf=G7d60M_nD+=$B1dip'G$h*heZ*2;\`8l[Bj?P?DZV[
%P,HJF%URF@ck,8_LOWrAd[Eb_H=gF(PlX6O<G_2@MpU9Pr184C*%O-b6p$PPiatif5`qUpQMm>>jl5J]Nes#;,(WKh[NWhlRCDP4
%p''g.qDB@:<O.5!iEP=L:3L-:7,SI:$>XS1.[Pm)4/aE-pJWAOg4H+9l'?&jR>@Z#EVP\8TeJGQ%lZe@%tDUjKg.s&/[XmfXrs[g
%bNs8NI]V/l`X]I'-L+K,D*d8R%jR_MP/&VSr`@"<W$mo7=LH3f`!^7ZP"gn[X&"?d(=lW]4HNbQ&m`j_&qRFofk#%?(aWn@E3-!/
%HXph?N[Pnhb&te;+AF_+*_*\>]4%uKm9JRS"`PV#$6s\qcPi*sY(ou@r./dg<@&$-$GfJ(LItqMCRHS^I2fI-eHjk[CGdH=XI6"T
%)Lj_Pj_ugi5Lr6<HRnRh'\u\!M%e*iKdDHi7>pI&IFb0P(7:eUfkIr/e[8@0Gss!QFJaj+!KX3YT.+5BN,r.aCRNF>[)AUO9eBjF
%,*+QJ3fXM>A#p5?lpZ3:i2VOn81s5E#'JsuI)RIIA4EcKSs;m7%Z1pt9P5_''g'a'$u@&%)Uh,(>#r\!;@J+O4HnJa:5gK^D?m:Y
%)$\bdIRr`9`OG]l+K?&K*IUp&A?LT78FMMe:s'Er`Zr]=As_cm`#U`g75C44r@50HD0/E2'.XZ*_4%r7q%;GbBR%s?Qu4B!V/gn2
%"Ogqc\O.oJ1C^XraMW?8\j$Gn`Te#uS'&W_HD00sR6],]P?4=Z]2.:N,HhK@gp%W#<Mns'8BJFe.Fb@<P9lFpL)>k'Wl@XGXtQjR
%\N^mI6A15lbOT0*7OA=G03XLi8lS#W,t6FG"j'usUd=`.=]qpHLO.rP1Ql_c4/M,F;A)\L*Rk6c<,5>;Ju$ndW!1'q\;Td18>Coa
%a=-6a2R7E.ekjn).YWS=&.3]9W-;(o^id8`?:!j%?"kDpO[/[r,!uZ'duKSNHdi?]=lkhee'r1Z.L`GGX@FG1O=h6u(QDtKV5d=4
%)H'!1E`K:f`M/O>XkRq8r(NT_)/c00<U&3T8]CBq[ZHB'frlR2[@/O%[DnqpVmHt@N@?.uet!a@,;tljQ5#=01f80'8O@.OMGjQU
%bDIOkd;U&MX7u<:B[tGWN;b6!4cYHJ6'*9^qH,3\9M-R6N0eolLQXf9"rhs<_b<5TEJ?)W?)m3bH%9#@j%=2flr:)l&sqOs)+O(:
%@3I%=R$;9[n(+h3H.6\g!HX#5X.,S0FCXOlMn.9-[@!-d7M4<Q*/>A9"EP`_W?)8r-Dq8u%=4J*/kCL4I2\-JJ[>Fp92LBeKtB69
%26&0?eDH)Y5+>\G`Q$n!_@F15"I0.Z+Is^.*BHYo0fb(2_gi,-P\jJ<<;1Z2K\^ijOZiT;AXIZgdYpdd',8cH8gEa3`G&=B\;M'D
%Y=(&C+U&TlcX%iPj0af;i5H&?@f6B?`<s81+Ga_3)@7'Y&N_=iPB>_sb0l/Wa^j5r\k54:a?ShN)e+^bf8^2)[S\UOiWKZt7-=8(
%F8UA96N;JJ8qTqbW<BF_4(3^R!PoUpeL(T7YTdNt8Oj_m**mCoY:b!+[)@2.In9IqTq%`/JfT00eYPlLV\r?q'V1K*O<9TunfrbY
%ZUlJ!ia2>A-&BP/qnh@a,5VP3ZCg&!q]/5\cgb#dEtOo.k@,1C3#uO!g,aA2MKRPdiU#a]9>Q;I<&sFUQ'ddqr<*hbFM1@%3n\>m
%8n'X^OUVm1(+6"TH@fNL:bZ<+K]R1r&!,q%+Z-[Yi4_Q`/^J?>pAcjiTS*D=\&W(^lTB^#fk-DP\-!Gk#_0"fKg`Gb,',OJ.'Cc=
%6g^h?g0D_:p!*^5Hdtcg;'b*-k!5c7V]uL=1OGT6e3E.W6ng]F5r:Q89U[*hDCEXc<#G^dRrKS7(aVAre<abR[:/^N:_QuDgq[c8
%gJHYa+7)kD5b"9.`&o^j$35?XRM`M2/N%E:P:!LbAciXC.O+U(#ch_pX_kY#E;'An6Wfdc'>.T*7bWrH_?nr%[ZT^p:\XV8M\L[9
%r2lsq;QkWBaEF1.RCd2?9"C2b"><f[,SX(4NSYboQHk!6eC*S2,e:*If$4=>k[,M_9UpFT@Q"]T')]0H!AkT:!NF7$QY4XmiO<I)
%9(?hDh*n;G8Wk>4.9c:1aQl1/8kVPbaIllZY0o0r$t)AO6o*FdQh@ol=Ns=HA2:*n2bR:VL(qJtnEEAH&9Pip#[bd'X@_"(SVI$#
%,Thi\+`5[n=0j,"p8%$F+_o';`!BLSJdSYOo6RUJJ>g,R*Y"^W.JFN3U*Kr(:1Y[GBH/$kp\']D#9?$J,*\3%]9)EehQ&YFFe&M(
%QBBlfg=/qLGGW4tW#J@0%_Ho,C-nlU(u:/:(S"7;dh<j%\j<3)o"^s"Aci_h@cVK["9idk#;<O%noGueVPH,[JrLg?&Do&GN1e:C
%Ut2$?;lu%>[5lJ?K1"0o_*>0h_ik["C=;s@WJIO5-90/>W,hPNeEu1X8Ou<m]5<'I9kV$k)Tb9e#%3[i]SgNH6X<b=afY7=q,F_e
%Xa1Tlm'B+q/f[E?b.g$uQSEs7bY<*KU,R8F#EiMobBO0qI3=dbq)+abVkTiQ7OYX_CXi]Q;TK;HEReZXXqI4I3DY=F!]?+Xg'llC
%)*KNgeuNZYRL/jW<^$)rfp4%'3Ju\\N<T^V"\@=,F@'r[E!*d%HfD\4*antn/YNIZ^mpC\.D.1NWiO\.$!0.:rh;,Ob,RR?b@c5X
%,M@WLdr"s,VpM(TR(&qbS[(&8Pc80>>LS*q#p-?-[^gs(#EhKB>-is_$'Ng&h$E&9!)7Cu`8\n>9LPC@88\"R5[YSQHhCDS=)gK7
%\'d7GD)t1%Jebf[BCSu;nq[ncLu^<03#tQiiH$i#MIK)>?<+ioj3GR?.Z<G?Qt;-#Lhee#&[<1$fZe^"rh&jEmWQg=V:a3*Gs:Ah
%,\XU4FKEGWU</@k9W'.Ec@[S2TO/7I)J8FO]3$fXDm#lV#0J+*0H2EqAF>oWX`43]\X[HE>3tohU3nI>F(M?lGQpaui?9e1`8O:,
%rt[2&+Z;nAn#G1O,hsaI.C$=<TV(;R_-=S$AqGgpYcpQMn$lgceS)I1@7O0o1;/bq[aT4NluY<$2f1s_7BP!3K0%lWFlNj4AcipF
%dY$?ehR)KPjT7&tn$je?nLoI72>eMj=hn/@M++g<8YM/Zck*C!gOMjEW'W#A&*2\5.Egkqh07rH?&bR)Mp?_R.-MosElT,NY"2rT
%ck2g?^),iWFU1O++D<;)dW+_dG!`&1#K[p?JX?Lp,KOXV3>ib`7b&bR'MOh;SG>K<b;>V/S]];W:g\1iNL0,-ckI;[lr];E9FWp6
%N&HJnp8YK]4%$QXoTQ?Y]0'/Yd`e[2WTBV+D9"Dk%bIGWNc'2:]\$G'cV,MVQJ+DoWU2_m-_oh8BMig>f\R1P;ZW'S8I9=L.:7U2
%A>s"PM_[rjFUZM-JV'em5ZE;#/LP,^!I!LN"5_*E(I>ZJPf-3i!0V)4-;re"fe)3$;'T_8W6AkM-4@tXoaXPZDZU\.+9U#'3E8_@
%E:!rWi-IlM[4%d\d)E/=WPYiHl-*?f8`QgT/l'UMJ@g_\h&nmX-0X9?\=mGO%8atqCI5_`F?1`uRUC:K0"FD*Q8[aFB0hXQqU'/t
%AD`6GA6M^J]5'HW,J=SbL>.G+QY9/=pr$*tBpr<mPOkkj<J*u,KcOP=%#&VkXo)e=^/JHtcY@7.ff`Dj$.\$>QdYm6h+QEPRFdoK
%E@:!dTE`R3I+@<Z?@5;[0:&US]Z6m!\D_hK"%@3,6=$N]GeLfGK<;&J,o.D'0a,fEBf=LTn#k!&JG!=GO,HaB7i[3=B_gurOiZ9#
%4>T]!TQn=Ym?.iV0EoNV)5KK%>S4]"#c$Da17M+^gJ(9.$7)\=-'97^!]>_3ACJ@@GL:Lg+GId@1_p0Z-"Irg>0GiE(;=mJas8R.
%4-D*9_"ic26P!tKnYTB[;,348]8(AO-2Y+Qoi0AX!469mBP>kS,te[SY#nC1UYbejZcfAPQ9c[HY`?,Z@s2!r2S)#aK9_AtYlL6]
%G^kdd6p9H3l#-:=%I>LN<ASs12\8Q96:of$%:Ik*P`34Dl.1_5<RSKLVr!9Nl(^9U+1!QLiTg\ph1Tm@dULiI_M1l5,;0]js3R2#
%,7D&Gj;8-]1s+?"\-jtWW&<[gH&%kW9Dia571e]L0./@COf[/iYf.PP?7>VK:O`CumX)?Yfrs%^5O%T4jQC[fU8lK8h?2N?4-dck
%@*+=M`mFIcg;)Oi,i-q=g^etJXdtJt11riiS_K/?P5HB83:CN($'NBCl_K5b7(uD:Zk*dg(N%2#V'*Js]4$+#7Y'Q>F%F/<8f)pB
%[IQWaRpX8]8MQ:R=WenA"JcIT*kW'"Y%3R_6;mE3_O!h%Xh\=u->'%b!*=35U_$%nj'G8"J@3qL#m&C(BQ-:'I*[)Y$"8<HgZ9tX
%+Ws?l?mC@RWm^a('S;]N2%GGD&5GnmYtS1(8C0HtaU4je3h>Z='XC%jAGS,cT`pjccjh<O"GF/1+GBgFQH,2rAg.t6<f<TG&.f^-
%9i?e)Pq:T.X:W1K`P8ZEOG$SZ@3^.B//R[<gfP`@fb2KUW1qkcP8+..3S.eq;J:<<g*\BRUa`-VX:PtM"YQkf-Br+j`sPZeoNd3V
%6I^g+hpSlTcule$@tapR3SGU0Yes`+_Y.rpcJD\7;@&F/?SYjE3sBsk6V`Gll0YUqi.PdYh)5C2#XI;_iuj&!Lp99.$op(u$$jrc
%4?V)l_$U3YfnINTES34FaU1oDM`pADZk0$rG]PWb+kip0,W0$:85[ND&jnW3&qbfQ!g'kRZ+2A_Oef+l:r5pm*7#11,BSoZnj3^>
%H(c5aN!$Uo-SL/K8ujHo"=RFk8QH+Dl/"B<Z9gf%o+*o`LcS!LB!=U$+!8q,Hg"IpiL6hZ&#'cQ2@FalQmO=OkM^1/YsL/6*:0(,
%=WnpE\%uTO(J_liSek#HJX-fCE"hd0Y4[4QM>0WgSi1>nM(#?L?G[.8B49o6L7:^`@O-I02j*!(/b]WN_FRYM$c7oJ/S6-3=[)EB
%QS$oZLtIUZ/_].;QrNVhD'CSom?O]+RhaW9blgPP_3^D.&.LT9gkEHQ3"Z\3@TjrcDNDGY(8;BGT5!lFcSa\f(cU!BS)a76p6nJr
%%]#A1fLMHfG;,<qC;bsRl4TD5'+nH']o@OeT\*.H!`!iib9$at,"o^S5n,f9:V5$fEFa#qL=71U-c,tE>@[NsLc5@;/J/6!jdY-t
%S;<sgod/Tc]J<ZCM$PX*h),=8UtADF[_XanMe3lHn6K":INNM3Cac5o^knf9_($rE3'_Meqg]?rc).]U3)BnXX?beToHCiV`>^GY
%MR4tl5T=H29>HZ!o&96M-.oLeVHa1_#Y#GuZo5hLf`Og*30DCBqhQJi4u")j#<#jk=<c%JN/4fLn1khMPG/Y/0O&ZI+Xa"l<S8:2
%,1m@*WAWa)HnSC853,-$LF"Jp#H!r*=@/#fTN(>r+*%LK9K+OX#No>j>@J(+H;8WFZ,I]qa7:k/R"Ho8hG.oBB-L!m=[C%I4S?"%
%=@5j%BD7][O-gSXSA_o?*U%0D6;GH0m">'bj?Un9.nds?I$rcU=9?h6NL/<b%Lurl4+Zu1jR'C;,?Dt2FH&8B^;V`;-\B^Qa6+@\
%*^l6VLkCJ)H53b#<?&I!:O'(b9B6V8CJjb4b`ecY%i4PlJs>7lkM/?"o`.7gZR:nNq-$B9<@lsh\Z*UH;CefVGC2=RUmeRYiH<#D
%\R_=bnAucJLR6lF.VbeU6(ZW*^+n*p6.VlP,9-9K@S50gWZVR09*A.>>&nPEcuG\)o*^D<B-S7EI^tWlIM7\lfYoSZLL<>7nR/m^
%*f)/SZ,+",C.uS)^+,2($7:5-V&c[G"+cMhMA_mHL3HpQWs'<jH_7ZUk%21H-uT*q6!b`e(BkA&I5nVlK;p>l.8`5Acu4CnT>'U,
%H&6GqMTDWAR*'rU(LIX_FlmGePSggmHZtQ/q?at@&bGN,(oQVhH%V.OZ&,)A=sY/Pre_/&_igXL&#BoR"&#*Hn0X(J-Y:%tGU9ko
%Pa6YNb0@>+6](gH;M(`u0lH"E,gikJ]E\ZcmPc^jh[o-.pT:3AGVs=f-2"O39Wpj/k@Q[Bp)?!$Y46)(LPg'<eQ[R@GFil6"#82&
%^#In;<BR2tOV@NtA?)U>Y/0c)/gS.S/li5:6-aL_pg==Mj2!0NI=O!b>OaoEh:9;Aa2BV5:9O$u5'e2U#7$J.4)ie,cJK!!&6tbH
%IZHs9-QWi*48U'R+a)Ul]9XiA\QGJ0iA]hf4a;<rn\ppq3peTX>k=:rIu=9tQXB[fjn"s+gg.XAL#9'3r8$HF2i#R8Df5"smr.]"
%[1:OODVj4,hVB1.]srJ$"J)t2^\Gd7^\d3#BE&KoPHSK~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial -300 -170 4500 4 v 1050 118 a
SDict begin H.S end
 1050 118 a
1050 118 a
SDict begin 18 H.A end
 1050 118 a 1050 118 a
SDict begin [/View [/XYZ H.V]/Dest (section*.14) cvn /DEST pdfmark
end
 1050 118 a Fi(Discussion)2659
b Fh(83)1050 300 y Fn(Nulla)28 b(mi)g(mi,)g(v)n(enenatis)e(sed)i(ipsum)
g(v)-5 b(arius,)27 b(T)-7 b(able)2784 300 y
SDict begin H.S end
 2784 300
a Fn(1)2826 246 y
SDict begin H.R end
 2826 246 a 2826 300 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (table.caption.8) cvn H.B /ANN pdfmark end
 2826 300 a 27
w Fn(v)n(olutpat)27 b(euismo)r(d)h(diam.)37 b(Proin)370
b Fh(84)1050 399 y Fn(rutrum)27 b(v)n(el)h(massa)e(non)h(gra)n(vida.)35
b(Quisque)27 b(temp)r(or)h(sem)f(et)h(dignissim)f(rutrum.)37
b(Lorem)332 b Fh(85)1050 499 y Fn(ipsum)27 b(dolor)e(sit)h(amet,)h
(consectetur)e(adipiscing)h(elit.)37 b(Morbi)25 b(at)h(justo)h(vitae)f
(n)n(ulla)g(elemen)n(tum)122 b Fh(86)1050 598 y Fn(commo)r(do)27
b(eu)h(id)f(massa.)36 b(In)28 b(vitae)f(diam)h(ac)f(augue)g(semp)r(er)g
(tincidun)n(t)h(eu)g(ut)g(eros.)36 b(F)-7 b(usce)286
b Fh(87)1050 698 y Fn(fringilla)27 b(erat)g(p)r(orttitor)g(lectus)h
(cursus,)f(v)n(el)g(sagittis)g(arcu)f(lob)r(ortis.)36
b(Aliquam)28 b(in)g(enim)392 b Fh(88)1050 798 y Fn(semp)r(er,)27
b(aliquam)g(massa)g(id,)h(cursus)e(neque.)37 b(Praesen)n(t)26
b(faucibus)i(semp)r(er)f(lib)r(ero.)579 b Fh(89)1050
1030 y
SDict begin H.S end
 1050 1030 a 1050 1030 a
SDict begin 14 H.A end
 1050 1030 a 1050 1030
a
SDict begin [/View [/XYZ H.V]/Dest (section*.15) cvn /DEST pdfmark
end
 1050 1030 a Fb(LOREM)37 b(and)i(IPSUM)e(Nunc)g(blandit)i(a)f(tortor.)
1094 b Fh(90)1050 1183 y Fn(CO)1175 1195 y Fm(2)1239
1183 y Fn(Maecenas)27 b(con)n(v)-5 b(allis)26 b(mauris)h(sit)h(amet)g
(sem)f(ultrices)g(gra)n(vida.)35 b(Etiam)27 b(eget)g(sapien)h(nibh.)128
b Fh(91)1050 1283 y Fn(Sed)28 b(ac)f(ipsum)h(eget)f(enim)h(egestas)e
(ullamcorp)r(er)h(nec)g(euismo)r(d)h(ligula.)36 b(Curabitur)27
b(fringilla)245 b Fh(92)1050 1383 y Fn(pulvinar)27 b(lectus)h
(consectetur)f(p)r(ellen)n(tesque.)36 b(Quisque)27 b(augue)g(sem,)h
(tincidun)n(t)g(sit)g(amet)363 b Fh(93)1050 1482 y Fn(feugiat)27
b(eget,)h(ullamcorp)r(er)e(sed)i(v)n(elit.)2016 b Fh(94)1168
1582 y Fn(Sed)28 b(non)f(aliquet)h(felis.)37 b(Lorem)27
b(ipsum)g(dolor)g(sit)h(amet,)f(consectetur)g(adipiscing)g(elit.)332
b Fh(95)1050 1681 y Fn(Mauris)25 b(commo)r(do)h(justo)h(ac)e(dui)i
(pretium)g(imp)r(erdiet.)37 b(Sed)26 b(suscipit)h(iaculis)f(mi)g(at)g
(feugiat.)37 b(Ut)120 b Fh(96)1050 1781 y Fn(neque)28
b(ipsum,)g(luctus)f(id)h(lacus)f(ut,)h(laoreet)f(scelerisque)f(urna.)36
b(Phasellus)27 b(v)n(enenatis,)g(tortor)211 b Fh(97)1050
1881 y Fn(nec)28 b(v)n(estibulum)f(mattis,)h(massa)f(tortor)f(in)n
(terdum)i(felis,)f(nec)h(p)r(ellen)n(tesque)g(metus)g(tortor)e(nec)161
b Fh(98)1050 1980 y Fn(nisl.)37 b(Ut)28 b(ornare)e(mauris)h(tellus,)h
(v)n(el)f(dapibus)g(arcu)g(suscipit)h(sed.)36 b(Nam)28
b(condimen)n(tum)g(sem)230 b Fh(99)1050 2080 y Fn(eget)27
b(mollis)h(euismo)r(d.)36 b(Nullam)28 b(dui)g(urna,)f(gra)n(vida)f(v)n
(enenatis)h(dui)h(et,)g(tincidun)n(t)g(so)r(dales)f(ex.)154
b Fh(100)1050 2180 y Fn(Nunc)28 b(est)g(dui,)g(so)r(dales)e(sed)i
(mauris)f(nec,)g(auctor)g(sagittis)g(leo.)36 b(Aliquam)28
b(tincidun)n(t,)g(ex)g(in)262 b Fh(101)1050 2279 y Fn(facilisis)27
b(elemen)n(tum,)h(lib)r(ero)f(lectus)h(luctus)g(est,)g(non)f(vulputate)
h(nisl)g(augue)f(at)g(dolor.)36 b(F)-7 b(or)251 b Fh(102)1050
2379 y Fn(more)27 b(information,)g(see)1865 2379 y
SDict begin H.S end
 1865
2379 a Fn(S1)g(T)-7 b(ext)2146 2322 y
SDict begin H.R end
 2146 2322 a 2146
2379 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (section*.18) cvn H.B /ANN pdfmark end
 2146 2379 a Fn(.)2131 b Fh(103)1050 2653 y
SDict begin H.S end
 1050
2653 a 1050 2653 a
SDict begin 18 H.A end
 1050 2653 a 1050 2653 a
SDict begin [/View [/XYZ H.V]/Dest (section*.16) cvn /DEST pdfmark
end
 1050 2653
a Fi(Supp)t(orting)44 b(Information)1853 b Fh(104)1050
2852 y
SDict begin H.S end
 1050 2852 a 1050 2852 a
SDict begin 14 H.A end
 1050 2852 a 1050 2852
a
SDict begin [/View [/XYZ H.V]/Dest (section*.17) cvn /DEST pdfmark
end
 1050 2852 a Fb(S1)38 b(Video)2809 b Fh(105)1050 3005
y Fl(Bold)31 b(the)h(first)f(sen)m(tence.)37 b Fn(Maecenas)26
b(con)n(v)-5 b(allis)27 b(mauris)g(sit)g(amet)h(sem)f(ultrices)h(gra)n
(vida.)184 b Fh(106)1050 3105 y Fn(Etiam)27 b(eget)g(sapien)h(nibh.)37
b(Sed)28 b(ac)f(ipsum)h(eget)f(enim)h(egestas)e(ullamcorp)r(er)h(nec)g
(euismo)r(d)276 b Fh(107)1050 3204 y Fn(ligula.)36 b(Curabitur)27
b(fringilla)g(pulvinar)g(lectus)h(consectetur)f(p)r(ellen)n(tesque.)828
b Fh(108)1050 3437 y
SDict begin H.S end
 1050 3437 a 1050 3437 a
SDict begin 14 H.A end
 1050 3437
a 1050 3437 a
SDict begin [/View [/XYZ H.V]/Dest (section*.18) cvn /DEST pdfmark
end
 1050 3437 a Fb(S1)38 b(T)-9 b(ext)2871
b Fh(109)1050 3590 y Fl(Lorem)32 b(Ipsum.)k Fn(Maecenas)26
b(con)n(v)-5 b(allis)26 b(mauris)h(sit)h(amet)g(sem)f(ultrices)g(gra)n
(vida.)35 b(Etiam)27 b(eget)139 b Fh(110)1050 3690 y
Fn(sapien)27 b(nibh.)38 b(Sed)27 b(ac)g(ipsum)h(eget)g(enim)g(egestas)e
(ullamcorp)r(er)g(nec)i(euismo)r(d)f(ligula.)452 b Fh(111)1050
3789 y Fn(Curabitur)27 b(fringilla)g(pulvinar)g(lectus)h(consectetur)e
(p)r(ellen)n(tesque.)1087 b Fh(112)1050 4022 y
SDict begin H.S end
 1050 4022
a 1050 4022 a
SDict begin 14 H.A end
 1050 4022 a 1050 4022 a
SDict begin [/View [/XYZ H.V]/Dest (section*.19) cvn /DEST pdfmark
end
 1050 4022 a Fb(S1)38
b(Fig)2937 b Fh(113)1050 4175 y Fl(Lorem)32 b(Ipsum.)k
Fn(Maecenas)26 b(con)n(v)-5 b(allis)26 b(mauris)h(sit)h(amet)g(sem)f
(ultrices)g(gra)n(vida.)35 b(Etiam)27 b(eget)139 b Fh(114)1050
4275 y Fn(sapien)27 b(nibh.)38 b(Sed)27 b(ac)g(ipsum)h(eget)g(enim)g
(egestas)e(ullamcorp)r(er)g(nec)i(euismo)r(d)f(ligula.)452
b Fh(115)1050 4374 y Fn(Curabitur)27 b(fringilla)g(pulvinar)g(lectus)h
(consectetur)e(p)r(ellen)n(tesque.)1087 b Fh(116)1050
4607 y
SDict begin H.S end
 1050 4607 a 1050 4607 a
SDict begin 14 H.A end
 1050 4607 a 1050 4607
a
SDict begin [/View [/XYZ H.V]/Dest (section*.20) cvn /DEST pdfmark
end
 1050 4607 a Fb(S2)38 b(Fig)2937 b Fh(117)1050 4760
y Fl(Lorem)32 b(Ipsum.)k Fn(Maecenas)26 b(con)n(v)-5
b(allis)26 b(mauris)h(sit)h(amet)g(sem)f(ultrices)g(gra)n(vida.)35
b(Etiam)27 b(eget)139 b Fh(118)1050 4859 y Fn(sapien)27
b(nibh.)38 b(Sed)27 b(ac)g(ipsum)h(eget)g(enim)g(egestas)e(ullamcorp)r
(er)g(nec)i(euismo)r(d)f(ligula.)452 b Fh(119)1050 4959
y Fn(Curabitur)27 b(fringilla)g(pulvinar)g(lectus)h(consectetur)e(p)r
(ellen)n(tesque.)1087 b Fh(120)p -300 5618 4500 17 v
-300 5735 a Fg(PLOS)4170 b Fn(4/)4159 5735 y
SDict begin H.S end
 4159 5735
a Fn(5)4200 5681 y
SDict begin H.R end
 4200 5681 a 4200 5735 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.5) cvn H.B /ANN pdfmark end
 4200 5735
a eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 1042 -406 a
SDict begin H.S end
 1042 -406
a 1042 -406 a
SDict begin H.R end
 1042 -406 a 1042 -406 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 1042 -406 a -300
-203 a @beginspecial 0 @llx 0 @lly 216 @urx 35 @ury 1440
@rwi @setspecial
%%BeginDocument: PLOS-submission.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PLOS-Submission.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Richard Basset
%%CreationDate: 1/13/2015
%%BoundingBox: 0 0 216 35
%%HiResBoundingBox: 0 0 216 34.6541
%%CropBox: 0 0 216 34.6541
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840
%ADO_ContainsXMP: MainFirst

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-01-13T11:29:27-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-13T11:29:27-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-01-13T11:29:27-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9J+btcm0Hytq+twWrX02&#xA;m2c91HZpUNK0MZcJUBiK08Dirzv8iPzqv/zB8t6vq+vWMGkR6TOsbXiOyWroycj8Up+Fo/2vi7jp&#xA;iqfzfnt+T0U7QP5t04upoSkvNK+zoGQ/OuKoz8sdB8paRod1/hbV5NZ03UL2e/N0959eVZLhuTIk&#xA;gLUA9zyJqWJJxV5J+V//ADlDrvnD81l8qXehw22lXr3Edi8fq/WoDBG8lbgsxRqiOh4ovE+OKve9&#xA;b17RNB059S1q+g06wjKq91cyLFGCxoo5MQKk9MVY0Pzr/KMmn+L9K/6Sov64qyjSda0bWLQXmkX9&#xA;vqNmxoLm0lSeMkducZZcVS3zH598leWp4YPMGt2Wlz3Cl4YrqdInZAaFgrGtK7VxVObW6tru2iur&#xA;WVJ7adFkgnjYOjo4qrKwqCCDUEYqq4qlPmDzd5V8uxLLr2r2elpJ/dm7njhL/wCoHILfRiqXaD+a&#xA;H5da/cra6P5k069u3/u7WO4j9Zt6fDGSHP0DFWT4qlPmPzd5X8s2gu/MGq2ul27VEb3UqxlyOoRS&#xA;eTn2UHFUm0P83vyw129Wx0rzNp9zeSGkVv6ypI5PZFfiXPsuKsvxVjfmnzVcaLrXlfT4oElTX9Qe&#xA;xmdiQY1W1muOS06msIG+KskxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsQ8l/mx5G85WGqahoWo&#xA;etaaM5W/lkjeIIoUsJPjAqjKjEH2xV4pceXbv86dK1Tzj5n1e48s/lhprTvoemWqqhlhtuXq30/I&#xA;Fa1U0+E9wKUqyqSeTvyw1fStN078wtc8pWfm3y5Pb1i0IW8EWoWWnl2eG5+rQpFaXcrxMHkDKXO1&#xA;CN6KpJ5L03U9H81eePMX5S6q09j5eNpqcGlAl7a+0y7jaeW1kRvi9W3X4RUc6hhs4FVX09+Xf+Av&#xA;MGmW3n3y9pFna3euw+pcXsUESXJcsRNHLKqhmZZVIffcjFXmX/Oav/krNK/7blv/ANQd3ir5i/Ln&#xA;8m/O35hwX83luKCVNOaNLn15liNZQxXjXr9g4qq+UfNXnX8oPzBbkslpeafOINa0pmBjniB+ONwC&#xA;UaqmqOOmzDFWZ/8AOX9zDdfmlZ3UDcoZ9GtJYm8Vd5WU/ccVfUv5A/8AkmvKf/MCv/EmxVLf+cgv&#xA;zf8A+Vb+UEmsQknmHVWaDSo3HJU4gGWdh3EYYUHdiO1cVfG/lfyN+Zv5ta/d3Vkk2q3ZblqGrXkn&#xA;GKMtuA8r/wDCooJp0FMVTPz7/wA47/mf5H0o6zqVpDc6bDQ3F5YS+sIKmgMilUdRX9rjT3xV7L/z&#xA;it+e+r6rqK+Q/NF095O8bPoeoTHlKfSUs9vK53f4FLIx32IJPw0VeBfmL5o1nz/+Zd7d3d0K3l8b&#xA;TT1nfhDbwer6cKVOyIq0LmnWrHfFWX+bf+cUfzZ0FIZbO2g1+GYhS2mOzOhP86SrE1P8oVHjTFX2&#xA;L+Vmh+YdC/L3QtK8xXb3us2tqq3kshDMrElhDyFeXoqRHyrvxriqVfmT/wApf+XP/bcl/wC6bdYq&#xA;z/FWAeY/z3/K/wAvaxLo+o6vS+t39O6SGGaZYmHUO8aMtR0IUkg7HFaTq8/MfyhaT+XoXvvUPmli&#xA;uiSRI8iTU4ftKCF/vl+1TFUTc+dfL1t5vtPKM07Lrt7bG8t7cRuVMKlwWMgHAf3LbE4qwqL/AJyW&#xA;/J55AjaxJGD+29pc0Hz4xsfwxTTIPNP5u+QvLFjpd/qmo/6HrSPLps8Eck6SpGELMDGGp/er1xQq&#xA;+bvzT8leUrjT7fW74wzampezWOKSbkoIHImMNQEttXFUTF+YXlKTWda0g3oiu/L0Qn1Yyq0cUMRU&#xA;NyMjAIRQ9jiqQaJ+fn5V61rMOkWOsVvLlxFberBPFHI5NFVXkRQC3blSuK0ivN/50/lz5S1Q6VrO&#xA;qcNRUK0ttDFLM0YcVXmY1ZVJG9Ca03pitIu7/NXyLbaJpeuHUhNpes3C2mn3EMcjh5mr8DKF5IRx&#xA;NeQFO+KqXnL83/y+8nXqWGu6oIb91D/VIo5J5FU9GcRqwSvbkQT2xVEWX5oeR7/ypd+arHUludGs&#xA;FLXksaP6kVKVV4iokB3/AJd+2Krrr8zPJtt5Lj86PelvL0oQpdJG7mrv6VDGBzBD/CRTbFWK/mh5&#xA;U8v+U/yc87jytpkGlG9sppLsWkYTnzHByePYIzbdAMVSHzLFbN+RHkHyvZMIrPzTJoOjySRnf0Ll&#xA;UnuCCKV5xxPXxqcVeneTLvzfPHqcXmLSbbSYrS8kg0ZLWb1hLYoAIpGFPhJHy/1V7qvmzRPzDXyT&#xA;+bvnbzXa2UVx5V1XVptDksLXiLmW+t4meN7ePq4eYFXI2/eAntirNP8AnG3zRb+W/wAlde1nzCPq&#xA;Wm6Rq96SkSmQRx8YSUjROR/vpGUf5nFUN/zmBqlhq35MeX9U0+X17G+1e0uLWYArzilsrpkajAEV&#xA;B7jFXzn+WX51ecfy4t9Qg8vJaMmpNG9wbqJpSDCGC8eLpT7ZxVT8t+XvO35v/mG1S93qOpzibVdR&#xA;4Uit4js0j8QFVVRaIvfZRirNf+cvbWG0/NGytIBxht9Gs4ol8FR5VUfcMVfU35A/+Sa8p/8AMCv/&#xA;ABJsVfOn/ObU12fzA0OBv95E0kPDvt6j3Mok2/1UTFXun/OL1hpNr+SugyaeF5Xf1ie9kAAZ7j13&#xA;R+dO6hAg/wAkDFXqN1bW11azW11Gs1tOjRzxSAMjxuCrKwOxBBocVfnV+WhjtPzs8tppUjNbJ5gt&#xA;YreRTyLW7XaoTXuGiO58MVem/n9/zjZ5o03zDqHmbylZPqmhX8r3U1nbAvc2skh5SL6Q+J4uRJUo&#xA;DxGxG1Sqwj8vP+cg/wAzPIU0Vkl4+o6Tbt6cmjahydUVTQpE5/eQkb0APEHqpxV9wfl3580fz15S&#xA;svMmlckgugVlt3IMkMyHjJE9O6noe4oe+KpJ+ZP/ACl/5c/9tyX/ALpt1irP8VfMV5aXfq+dta8g&#xA;6/pt7oNzcTzeZPLOtw+i3qbvKo9YBmHItxIdN9q1GKVt95g0q/i/JHWorGLQ9MTULxZYFLC2hZbq&#xA;BXKvJ0RmRmFTt0rtirNNWura8/5yn8vNaSpcLbaFIlwYmDiNq3Ro/GvE0kXr4jxxV5X+X9l+YV3+&#xA;TGuxaTq+kWvl52u/rljfCly9IkMpR2VlWq04Hx7jriqI80WVh5t8l/lLpml28tulzb6xaQQytzf6&#xA;zCIkDcwEDBpk5bAeGKsS1bWL/wA4WNhrt0GEXlq30fQ46nZpGMrGT3J9Jq/7WKXq12+gL+Yv5wDz&#xA;BNJb6PLYW0N1cQo8rxiZYo1cIlWPF3B/XtihIri81nyrpXlKfWLnRfPHkgXEMeiIE9K/gR15BkRQ&#xA;sistNwxfeitvTFWS65p9zdfmR5r1P8u/Mtja6sFEPmbQtZh4RSekCj+nJMjh424VPGgH81CMVYnq&#xA;WvafrP5V+T5rPSoNINv5rS3ube05C3eZY+RliDlyAyuv7R3rirOPyrn8vQ/m9+Y48yPbx6+2oOdO&#xA;a+KCQ2XOX+5L/s+iY60/Zp2xVh9++lyar+cr+WPTPlY6bBva8fqxuax1KcPhpz9enHbFWJ+YJNc8&#xA;nfl1/ha853Og+b7HTdc0e4ptFckQy3MX9R7If2jil9V+Z9WF3r1v5Hu9Bvb3SfMFhdi+1eNV+qQp&#xA;x4NFKxNQXVvvK05VPFYvk7Xbzz9+Wt3ZeUNe1lRa+WNYtdX8rR39q8tpcQI7RCWO4iZZeEazlpIe&#xA;1DxIIoVXq/5oefvzh8t+X7a4l80aDFrGq+nHoelaDYS3dxePM1EeM3U0o4UI+PgR2AJO6rA9e8ie&#xA;TPLHkq08k6Varr/51eYTb/WJ7aQzzWMwuEuJHMgbjb+mF48hRmHxN8NcVfSf5afl/ZeTfy/07yo3&#xA;C6EMLDUHZapPNOS05KtWqlmIAP7NBiry3/nNNVX8qtJVQFVdctwqjYACzuthirz/AP5xE/L7yX5q&#xA;sfMk/mPR7fVJLKe0FqbheYQOspYAVpQ8RWuKvrDQ/LugaDZiy0TTbbTLQb+haQpChPiQgWp9zir4&#xA;w/5zJ/8AJuQ/9sq2/wCTs2Kpr5A/5y8/wj5N0ny3/hP67+i4BB9b/SHpepQk8vT+rScevTkcVTfz&#xA;zPN/zkN+XMvmjQNFksfMvlK4eKTTRKLg3NrMiuyxOEiLOvHkqlfECpYYq8v/ACg/PzzZ+WLT2ENu&#xA;mpaJPIZLjSrhmjKS04s8UgDGNjxAaqsNuld8VZb+ZH/OXnmjzToM+i6JpSeXoLxDFeXIuDc3DRts&#xA;yRv6cAjDDYniTToRiqN/5xK/KLUtT8zQ+e9Tt2h0XSuR0wyAj6zdMpTkgPVIQSeX81AK0aiqtrX/&#xA;ADl3570r8ytUK2kVx5YtriS1i0OeMQyhIWKep6wX1UlfjUhuSjpx74q82/PL80dD/MbzLbazpmhD&#xA;R5IoPSu5mZWmuXrVWk4BV+AfCp606mgACr6d/wCcQPL+raT+U5uL9Wji1e/lvrGJhQ+gY44Q++/x&#xA;mEke1COuKsw/Mn/lL/y5/wC25L/3TbrFWf4qwLzD+Rf5XeYNYk1fUtFVr6dudy8M00CysdyzpE6L&#xA;yPcgVPfFbTvWfy78laz5dg8uahpMEmjWvH6raoDEIStQDE0ZVkO5qQd++KobyX+VvkXyZLLP5e0t&#xA;bW6nT05rp3kmlKVrxDys/FagVC0BoK4qkI/5xx/JkEEeXenjeXx/XPim2Uyfl/5OebQ5v0ZHG/lo&#xA;udEWJpIktzLx50SNlRuXAfbB/XihLF/Jv8tl0y40xdGVbG6vF1GeET3I5XMYIR+Qk5AAMaKDx9sV&#xA;TNPIHlBNV1jVf0aj3uvxCDV3keSRJ4goXg0Ts0YHEU+FRirH9G/Ib8qtH1mLV7HRFF3A/qW4lmnm&#xA;jjcdGWOR2Wo6ioNO2K2ivNv5Mflx5r1M6prWkiXUGCiW5illgaQKKD1PSZA2wpUitO+K2jbj8rvI&#xA;U+jabor6RGumaROt1p9tFJLEI51rSQtG6s7bmvMmvfFVDzj+UX5fecLtb3XdKWa+VQv1uJ5IJWUd&#xA;A7RMnOnblWnbFUVZflp5GsfLF15Xs9Jjg0O9BF5bRvIGlrTd5uXrMdhuXrirtb/LTyRrnl7T/L2q&#xA;6WtzpOlLGmnwGSZWiWGP0kCyo6y/Y2NW371xVk2KvMv+ch9a8m6J+XkuoeavL6eZLT6xHBbWDt6R&#xA;E0oPxicBnhoqt8SCvbvirzf8svyE/J/z55X07zlYQ6xpIuvUUWAvg/omF2heNJTHzZPhNDUGh7Yq&#xA;yDzjpd/+TVpokX5S+RItVk1Od4dXuzFcXdwETgY0aVG9RfVLMQzHgvH7O+KvdELFFLDixAJWtaHw&#xA;rirHfPv5f+WPPeg/oTzFbtcWQmS4iMbtG8csYKh0Ze/F2X5E4qhfy7/K7yf+X1hdWXlu2eFL2QS3&#xA;Us0jSyOyjioLN2UE0A8cVZbirz/8wvyK/Lzz9qsGq+YLWY6hBD9XE9vM0RaMMWVXAqDxLGh98VYr&#xA;/wBChfk3/wAs19/0lt/TFXoP5e/lp5S8gaXPpvlu2eGG5l9e4klkaWR3oFFWbsAKADFUp87fkP8A&#xA;ld5yumvtY0ZF1GQ1kv7RmtpnPcyGMhZCfF1JxVIvL/8Aziv+TWj3SXTaXLqcsZqi6hO0sdQa7xL6&#xA;cb+FGUjFXrMEEFvCkEEaxQxKEjiQBVVVFAqqNgBirBfPn5G/lp54na71vSVXUmFDqVqxt7g0FBzZ&#xA;Phkp25q2Ksb8v/8AOKH5PaPqEd69lc6o8RDRw6hP6kIYGoJjRYlf5PUe2KvX4444o1jjUJGgCoig&#xA;BVUCgAA6AYqxPzr5e1XVPMXky9sow9vo+qSXd+xZVKRNZTwggEgt8cqigxVl2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KpP5u/wl/h+6/wAW/Uv0DQfW/wBJen9W6/Dy9X4a8qce9em+Kq3lz/Dv&#xA;6Ds/8OfVf0H6Y+ofUPT+renU/wB16XwUrXpiqZYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.805556</stDim:w>
            <stDim:h>17.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">rough-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:54570bd4-44fc-4daa-af13-191c026bfe24</stRef:instanceID>
            <stRef:documentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:FEE5A5CD5E72E311A5DAE32040218A44</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FEE5A5CD5E72E311A5DAE32040218A44</stEvt:instanceID>
                  <stEvt:when>2014-01-02T13:33:25-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e070f9f4-5cdc-594f-89f4-601096328929</stEvt:instanceID>
                  <stEvt:when>2015-01-13T11:29:27-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -34.654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 34.654 li
216 34.654 li
216 0 li
cp
clp
21.6844 2.60761 mo
22.4047 2.60761 22.9888 2.02407 22.9888 1.30352 cv
22.9888 .583607 22.4047 0 21.6844 0 cv
20.9648 0 20.3806 .583607 20.3806 1.30352 cv
20.3806 2.02407 20.9648 2.60761 21.6844 2.60761 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
33.4875 18.1845 mo
32.7669 18.1845 32.184 18.7681 32.184 19.4881 cv
32.184 20.2086 32.7669 20.7922 33.4875 20.7922 cv
34.2081 20.7922 34.791 20.2086 34.791 19.4881 cv
34.791 18.7681 34.2081 18.1845 33.4875 18.1845 cv
cp
f
25.355 29.5761 mo
24.4266 29.5761 23.6747 30.3283 23.6747 31.257 cv
23.6747 32.1858 24.4266 32.9383 25.355 32.9383 cv
26.2842 32.9383 27.037 32.1858 27.037 31.257 cv
27.037 30.3283 26.2842 29.5761 25.355 29.5761 cv
cp
f
15.1998 16.0573 mo
14.498 16.0573 13.9303 16.6255 13.9303 17.327 cv
13.9303 18.0282 14.498 18.5964 15.1998 18.5964 cv
15.9013 18.5964 16.4689 18.0282 16.4689 17.327 cv
16.4689 16.6255 15.9013 16.0573 15.1998 16.0573 cv
cp
f
3.1565 13.1063 mo
3.1565 12.2349 2.45011 11.5282 1.57809 11.5282 cv
.70677 11.5282 0 12.2349 0 13.1063 cv
0 13.9786 .70677 14.685 1.57809 14.685 cv
2.45011 14.685 3.1565 13.9786 3.1565 13.1063 cv
cp
f
3.91145 23.8113 mo
3.19154 23.8113 2.60768 24.395 2.60768 25.1149 cv
2.60768 25.8357 3.19154 26.419 3.91145 26.419 cv
4.632 26.419 5.21554 25.8357 5.21554 25.1149 cv
5.21554 24.395 4.632 23.8113 3.91145 23.8113 cv
cp
f
7.78818 6.86214 mo
8.90709 6.86214 9.81282 5.95609 9.81282 4.83782 cv
9.81282 3.71979 8.90709 2.81343 7.78818 2.81343 cv
6.67016 2.81343 5.76411 3.71979 5.76411 4.83782 cv
5.76411 5.95609 6.67016 6.86214 7.78818 6.86214 cv
cp
f
29.6443 2.67612 mo
28.2797 2.67612 27.1742 3.78213 27.1742 5.14648 cv
27.1742 6.51139 28.2797 7.61709 29.6443 7.61709 cv
31.0095 7.61709 32.1149 6.51139 32.1149 5.14648 cv
32.1149 3.78213 31.0095 2.67612 29.6443 2.67612 cv
cp
f
13.2783 30.4683 mo
12.1219 30.4683 11.1855 31.4045 11.1855 32.5606 cv
11.1855 33.7166 12.1219 34.654 13.2783 34.654 cv
14.4347 34.654 15.3712 33.7166 15.3712 32.5606 cv
15.3712 31.4045 14.4347 30.4683 13.2783 30.4683 cv
cp
f
18.3194 27.6162 mo
18.8034 27.2154 20.5164 25.6351 21.9182 22.3404 cv
23.3537 21.7262 24.4447 21.1135 25.2761 20.5363 cv
25.7488 22.2099 25.5369 23.362 25.2982 24.0092 cv
23.5878 26.032 21.1104 27.3846 18.3194 27.6162 cv
cp
8.91382 23.0564 mo
9.694 23.449 10.5398 23.7048 11.3998 23.8636 cv
11.5669 24.6206 11.8071 25.3925 12.1395 26.1616 cv
10.8501 25.3754 9.74835 24.3123 8.91382 23.0564 cv
cp
10.323 10.0407 mo
11.6741 9.16813 13.1957 9.18014 14.6654 9.6221 cv
13.6346 11.0175 12.5728 12.9749 11.8713 15.6458 cv
11.8713 15.6458 10.6909 18.8385 11.1931 22.6841 cv
8.32568 22.0502 7.68528 20.4494 7.68528 20.4494 cv
7.68528 20.4494 7.67855 20.4479 7.66842 20.4466 cv
7.36768 19.4825 7.20552 18.4576 7.20552 17.3955 cv
7.20552 14.513 8.40217 11.906 10.323 10.0407 cv
cp
23.3316 17.6354 mo
23.3316 17.6354 23.3955 17.3439 23.4741 16.8534 cv
24.097 17.7788 24.5476 18.6204 24.8652 19.3781 cv
24.093 19.9697 23.2475 20.4734 22.475 20.8779 cv
22.803 19.9159 23.0976 18.8388 23.3316 17.6354 cv
cp
19.969 7.47977 mo
19.7452 7.39593 li
19.8216 7.41316 19.8987 7.42945 19.9746 7.44907 cv
19.9709 7.46845 19.969 7.47977 19.969 7.47977 cv
19.969 7.47977 22.1258 8.60176 22.0856 13.2301 cv
21.8365 12.9739 21.6844 12.8323 21.6844 12.8323 cv
19.8468 10.9397 18.0433 9.81622 16.5386 9.14725 cv
17.487 8.19051 18.6241 7.53142 19.969 7.47977 cv
cp
15.404 8.70348 mo
14.2528 8.3143 13.3837 8.2068 12.9675 8.1773 cv
14.2086 7.56916 15.5889 7.20615 17.0475 7.14777 cv
16.6188 7.47549 16.0379 7.98199 15.404 8.70348 cv
cp
19.9003 22.0275 mo
16.5828 22.8949 14.1445 23.0552 12.3584 22.8709 cv
12.1788 21.502 12.1895 19.747 12.5578 17.4987 cv
12.5578 17.4987 13.5031 13.004 15.7729 10.0346 cv
18.7605 11.3574 21.2729 14.067 21.2729 14.067 cv
21.5256 14.3468 21.7593 14.6187 21.9845 14.8874 cv
21.8835 15.8435 21.7013 16.9127 21.4102 18.116 cv
21.4102 18.116 21.0477 19.9061 20.181 21.9228 cv
20.0044 21.991 19.9003 22.0275 19.9003 22.0275 cv
cp
17.2644 27.6494 mo
16.8356 27.6414 16.4139 27.6076 15.9993 27.5483 cv
17.2644 27.6494 li
cp
15.0916 27.3748 mo
14.8318 27.3127 14.5745 27.2418 14.322 27.1604 cv
13.8247 26.7528 13.0191 25.8419 12.5706 24.0227 cv
15.8991 24.3203 19.0765 23.4001 19.0765 23.4001 cv
19.2393 23.3473 19.3928 23.2935 19.5495 23.2404 cv
18.551 25.1084 17.1019 26.8827 15.0916 27.3748 cv
cp
27.7056 17.9791 mo
27.6291 19.3357 27.2873 20.6226 26.7326 21.7895 cv
26.657 21.0962 26.4985 20.415 26.2786 19.7565 cv
27.0818 19.0458 27.4943 18.4269 27.7056 17.9791 cv
cp
27.5625 15.6003 mo
27.4489 15.0972 li
27.5348 16.4081 26.8259 17.578 25.8124 18.5663 cv
25.2113 17.2364 24.4195 16.0425 23.6888 15.0923 cv
23.8461 13.2347 23.8322 10.7121 22.988 8.75782 cv
25.3517 10.2751 27.0541 12.7328 27.5625 15.6003 cv
cp
17.4643 5.49018 mo
10.8888 5.49018 5.55836 10.8199 5.55836 17.3955 cv
5.55836 23.9711 10.8888 29.3015 17.4643 29.3015 cv
24.0402 29.3015 29.3697 23.9711 29.3697 17.3955 cv
29.3697 10.8199 24.0402 5.49018 17.4643 5.49018 cv
cp
f
110.132 20.0839 mo
109.476 17.8999 107.385 16.464 105.444 15.5069 cv
104.722 15.1506 103.926 14.9347 103.221 14.5548 cv
102.655 14.2507 102.02 13.9737 101.488 13.6165 cv
100.768 13.1327 100.389 12.7669 100.493 11.8821 cv
100.627 10.7404 101.955 10.3604 102.921 10.6292 cv
103.579 10.8123 104.163 11.0294 104.785 11.3163 cv
105.32 11.5635 105.879 12.1382 106.422 12.3007 cv
107.076 12.4963 107.579 12.2666 108.124 11.9253 cv
108.627 11.6111 109.792 9.59291 109.766 9.00107 cv
109.736 8.32656 109.2 7.78818 108.652 7.45889 cv
107.653 6.85723 106.586 6.2718 105.461 5.9493 cv
103.245 5.31568 100.8 5.33047 98.6792 6.29054 cv
97.0625 7.02216 95.754 8.45162 95.1944 10.1356 cv
95.0218 10.6584 94.9444 11.257 94.8682 11.8013 cv
94.5402 14.1607 95.9954 16.4713 97.826 17.8304 cv
98.6706 18.4576 99.6099 18.9361 100.568 19.363 cv
101.504 19.7798 102.512 20.1067 103.344 20.7206 cv
103.949 21.1681 105.113 22.2996 104.365 23.2462 cv
104.105 23.5859 103.585 23.9862 103.223 24.0998 cv
101.317 24.6963 99.6406 23.0198 98.1178 22.2339 cv
96.9482 21.6295 96.2682 22.6617 95.7577 23.5543 cv
95.2134 24.5074 94.3916 25.6346 95.3977 26.6294 cv
95.7995 27.064 96.1994 27.3331 96.6613 27.5871 cv
98.1061 28.3798 99.643 29.0014 101.299 29.197 cv
102.727 29.3663 104.352 29.2545 105.709 28.7533 cv
106.887 28.3192 107.699 27.7631 108.607 26.9012 cv
109.527 26.0258 110.048 24.8182 110.417 23.6243 cv
110.731 22.6074 110.43 21.0806 110.132 20.0839 cv
cp
f
69.1452 23.7769 mo
61.863 23.7769 li
61.863 7.01693 li
61.863 6.37257 61.3408 5.84979 60.6958 5.84979 cv
57.5397 5.84979 li
56.8947 5.84979 56.3725 6.37257 56.3725 7.01693 cv
56.3725 27.7913 li
56.3725 28.4357 56.8947 28.9584 57.5397 28.9584 cv
69.1452 28.9502 li
69.789 28.9502 70.3117 28.4277 70.3117 27.783 cv
70.3117 24.9441 li
70.3117 24.2997 69.789 23.7769 69.1452 23.7769 cv
cp
f
46.0938 15.9547 mo
43.6096 15.9547 li
43.6096 11.2177 li
46.197 11.2196 li
47.8887 11.2196 48.9354 12.4705 48.9354 13.6297 cv
48.9354 14.912 47.6608 15.9547 46.0938 15.9547 cv
cp
46.1982 5.86734 mo
46.1982 5.86734 42.4916 5.84979 42.4425 5.84979 cv
39.2866 5.84979 li
38.6416 5.84979 38.1186 6.37257 38.1186 7.01693 cv
38.1186 27.7913 li
38.1186 28.4357 38.6416 28.9584 39.2866 28.9584 cv
42.4425 28.9584 li
43.0869 28.9584 43.6096 28.4357 43.6096 27.7913 cv
43.6096 21.3066 li
46.0938 21.3066 li
50.6124 21.3066 54.2883 17.863 54.2883 13.6297 cv
54.2883 9.34967 50.6579 5.86734 46.1982 5.86734 cv
cp
f
81.9155 10.9726 mo
78.3668 10.9726 75.4803 13.8594 75.4803 17.4078 cv
75.4803 20.9562 78.3668 23.8427 81.9155 23.8427 cv
85.463 23.8427 88.3501 20.9562 88.3501 17.4078 cv
88.3501 13.8594 85.463 10.9726 81.9155 10.9726 cv
cp
81.9155 29.1289 mo
75.4527 29.1289 70.1938 23.8707 70.1938 17.4078 cv
70.1938 10.9446 75.4527 5.68674 81.9155 5.68674 cv
88.3777 5.68674 93.636 10.9446 93.636 17.4078 cv
93.636 23.8707 88.3777 29.1289 81.9155 29.1289 cv
cp
f
119.955 31.7399 mo
118.848 31.7399 li
118.848 3.04441 li
119.955 3.04441 li
119.955 31.7399 li
cp
f
128.593 18.5605 mo
130.57 18.3682 li
130.689 19.032 130.93 19.5191 131.294 19.8302 cv
131.657 20.1416 132.148 20.2971 132.766 20.2971 cv
133.42 20.2971 133.914 20.1588 134.245 19.8818 cv
134.577 19.6051 134.743 19.281 134.743 18.9106 cv
134.743 18.6726 134.673 18.4702 134.534 18.3031 cv
134.394 18.136 134.15 17.9907 133.803 17.8673 cv
133.565 17.7847 133.022 17.6385 132.176 17.4278 cv
131.087 17.1578 130.323 16.8261 129.883 16.4326 cv
129.265 15.8789 128.956 15.2041 128.956 14.4077 cv
128.956 13.8953 129.102 13.4159 129.393 12.9696 cv
129.683 12.5237 130.102 12.1837 130.649 11.9502 cv
131.196 11.7171 131.855 11.6004 132.629 11.6004 cv
133.892 11.6004 134.843 11.8771 135.481 12.4309 cv
136.119 12.9847 136.454 13.7236 136.486 14.6478 cv
134.455 14.7372 li
134.368 14.22 134.181 13.8483 133.895 13.6217 cv
133.609 13.3953 133.18 13.282 132.608 13.282 cv
132.018 13.282 131.556 13.4033 131.222 13.6456 cv
131.006 13.8014 130.899 14.0096 130.899 14.2704 cv
130.899 14.5084 131 14.712 131.201 14.8813 cv
131.457 15.0966 132.079 15.3205 133.068 15.5539 cv
134.057 15.7873 134.788 16.0287 135.261 16.2781 cv
135.735 16.5275 136.105 16.8685 136.373 17.3009 cv
136.641 17.7334 136.774 18.2678 136.774 18.9036 cv
136.774 19.4804 136.615 20.0203 136.294 20.5234 cv
135.974 21.0271 135.521 21.4012 134.935 21.6457 cv
134.349 21.8905 133.619 22.0131 132.745 22.0131 cv
131.473 22.0131 130.496 21.7191 129.815 21.1309 cv
129.133 20.5431 128.726 19.6862 128.593 18.5605 cv
cp
.697627 .675227 .638575 .739559 cmyk
f
138.47 11.7718 mo
140.502 11.7718 li
140.502 17.222 li
140.502 18.0869 140.527 18.6474 140.577 18.9036 cv
140.664 19.3154 140.872 19.6462 141.198 19.8956 cv
141.526 20.145 141.973 20.2697 142.541 20.2697 cv
143.117 20.2697 143.552 20.1518 143.845 19.9162 cv
144.138 19.6803 144.313 19.391 144.373 19.0479 cv
144.433 18.7045 144.463 18.1348 144.463 17.3387 cv
144.463 11.7718 li
146.494 11.7718 li
146.494 17.0573 li
146.494 18.2653 146.44 19.1189 146.33 19.6174 cv
146.22 20.1165 146.018 20.5372 145.722 20.8806 cv
145.427 21.2237 145.032 21.4971 144.538 21.7007 cv
144.044 21.9043 143.399 22.0063 142.602 22.0063 cv
141.641 22.0063 140.913 21.8951 140.416 21.6734 cv
139.92 21.4513 139.527 21.1632 139.239 20.8085 cv
138.951 20.4537 138.761 20.0821 138.669 19.6929 cv
138.537 19.1164 138.47 18.2653 138.47 17.1397 cv
138.47 11.7718 li
cp
f
150.674 17.4483 mo
150.674 20.1392 li
152.555 20.1392 li
153.287 20.1392 153.751 20.1186 153.948 20.0775 cv
154.25 20.0225 154.496 19.8886 154.686 19.6757 cv
154.876 19.4632 154.971 19.1782 154.971 18.8213 cv
154.971 18.5193 154.898 18.2632 154.751 18.0525 cv
154.605 17.8421 154.393 17.6888 154.117 17.5927 cv
153.84 17.4966 153.239 17.4483 152.314 17.4483 cv
150.674 17.4483 li
cp
150.674 13.4466 mo
150.674 15.7735 li
152.006 15.7735 li
152.797 15.7735 153.289 15.7621 153.482 15.7394 cv
153.829 15.6983 154.103 15.5782 154.302 15.3788 cv
154.501 15.1798 154.6 14.9181 154.6 14.5932 cv
154.6 14.282 154.515 14.0289 154.343 13.8345 cv
154.171 13.6401 153.917 13.5222 153.577 13.481 cv
153.376 13.4583 152.797 13.4466 151.841 13.4466 cv
150.674 13.4466 li
cp
148.642 11.7718 mo
152.665 11.7718 li
153.461 11.7718 154.055 11.8053 154.446 11.8713 cv
154.837 11.9379 155.187 12.0762 155.496 12.2865 cv
155.805 12.4972 156.062 12.7774 156.269 13.1275 cv
156.474 13.4776 156.577 13.8702 156.577 14.3048 cv
156.577 14.7762 156.45 15.2087 156.196 15.6021 cv
155.942 15.9956 155.598 16.2907 155.164 16.4876 cv
155.777 16.6661 156.248 16.9704 156.577 17.4004 cv
156.907 17.8307 157.071 18.3363 157.071 18.9174 cv
157.071 19.375 156.965 19.8201 156.752 20.2525 cv
156.54 20.685 156.249 21.0305 155.88 21.2888 cv
155.512 21.5474 155.058 21.7065 154.518 21.7661 cv
154.179 21.8027 153.362 21.8254 152.068 21.8346 cv
148.642 21.8346 li
148.642 11.7718 li
cp
f
158.76 21.8346 mo
158.76 11.7718 li
161.801 11.7718 li
163.627 18.636 li
165.432 11.7718 li
168.48 11.7718 li
168.48 21.8346 li
166.592 21.8346 li
166.592 13.9135 li
164.595 21.8346 li
162.639 21.8346 li
160.648 13.9135 li
160.648 21.8346 li
158.76 21.8346 li
cp
f
170.436 21.8346 mo
170.436 11.7718 li
172.468 11.7718 li
172.468 21.8346 li
170.436 21.8346 li
cp
f
173.889 18.5605 mo
175.865 18.3682 li
175.985 19.032 176.226 19.5191 176.59 19.8302 cv
176.953 20.1416 177.444 20.2971 178.062 20.2971 cv
178.716 20.2971 179.21 20.1588 179.541 19.8818 cv
179.873 19.6051 180.039 19.281 180.039 18.9106 cv
180.039 18.6726 179.969 18.4702 179.829 18.3031 cv
179.69 18.136 179.446 17.9907 179.098 17.8673 cv
178.861 17.7847 178.318 17.6385 177.472 17.4278 cv
176.383 17.1578 175.618 16.8261 175.179 16.4326 cv
174.561 15.8789 174.252 15.2041 174.252 14.4077 cv
174.252 13.8953 174.398 13.4159 174.688 12.9696 cv
174.979 12.5237 175.397 12.1837 175.945 11.9502 cv
176.491 11.7171 177.151 11.6004 177.924 11.6004 cv
179.187 11.6004 180.138 11.8771 180.777 12.4309 cv
181.415 12.9847 181.75 13.7236 181.782 14.6478 cv
179.751 14.7372 li
179.663 14.22 179.477 13.8483 179.191 13.6217 cv
178.905 13.3953 178.476 13.282 177.904 13.282 cv
177.314 13.282 176.851 13.4033 176.518 13.6456 cv
176.302 13.8014 176.195 14.0096 176.195 14.2704 cv
176.195 14.5084 176.295 14.712 176.497 14.8813 cv
176.753 15.0966 177.375 15.3205 178.364 15.5539 cv
179.353 15.7873 180.084 16.0287 180.557 16.2781 cv
181.031 16.5275 181.401 16.8685 181.669 17.3009 cv
181.937 17.7334 182.07 18.2678 182.07 18.9036 cv
182.07 19.4804 181.911 20.0203 181.59 20.5234 cv
181.27 21.0271 180.816 21.4012 180.231 21.6457 cv
179.645 21.8905 178.915 22.0131 178.041 22.0131 cv
176.769 22.0131 175.792 21.7191 175.11 21.1309 cv
174.429 20.5431 174.021 19.6862 173.889 18.5605 cv
cp
f
183.265 18.5605 mo
185.242 18.3682 li
185.361 19.032 185.602 19.5191 185.966 19.8302 cv
186.33 20.1416 186.82 20.2971 187.438 20.2971 cv
188.093 20.2971 188.586 20.1588 188.918 19.8818 cv
189.249 19.6051 189.415 19.281 189.415 18.9106 cv
189.415 18.6726 189.345 18.4702 189.206 18.3031 cv
189.066 18.136 188.822 17.9907 188.475 17.8673 cv
188.237 17.7847 187.695 17.6385 186.848 17.4278 cv
185.759 17.1578 184.995 16.8261 184.556 16.4326 cv
183.938 15.8789 183.629 15.2041 183.629 14.4077 cv
183.629 13.8953 183.774 13.4159 184.065 12.9696 cv
184.355 12.5237 184.774 12.1837 185.321 11.9502 cv
185.868 11.7171 186.527 11.6004 187.301 11.6004 cv
188.564 11.6004 189.515 11.8771 190.153 12.4309 cv
190.791 12.9847 191.127 13.7236 191.159 14.6478 cv
189.127 14.7372 li
189.04 14.22 188.853 13.8483 188.567 13.6217 cv
188.281 13.3953 187.852 13.282 187.281 13.282 cv
186.69 13.282 186.228 13.4033 185.894 13.6456 cv
185.679 13.8014 185.571 14.0096 185.571 14.2704 cv
185.571 14.5084 185.672 14.712 185.873 14.8813 cv
186.129 15.0966 186.752 15.3205 187.74 15.5539 cv
188.729 15.7873 189.46 16.0287 189.934 16.2781 cv
190.407 16.5275 190.778 16.8685 191.045 17.3009 cv
191.313 17.7334 191.447 18.2678 191.447 18.9036 cv
191.447 19.4804 191.287 20.0203 190.966 20.5234 cv
190.646 21.0271 190.193 21.4012 189.607 21.6457 cv
189.021 21.8905 188.292 22.0131 187.418 22.0131 cv
186.145 22.0131 185.169 21.7191 184.487 21.1309 cv
183.805 20.5431 183.398 19.6862 183.265 18.5605 cv
cp
f
193.094 21.8346 mo
193.094 11.7718 li
195.126 11.7718 li
195.126 21.8346 li
193.094 21.8346 li
cp
f
198.744 16.7963 mo
198.744 17.9358 199.007 18.7998 199.533 19.3876 cv
200.059 19.9755 200.727 20.2697 201.537 20.2697 cv
202.347 20.2697 203.012 19.9779 203.531 19.3944 cv
204.05 18.8111 204.31 17.9358 204.31 16.7689 cv
204.31 15.6156 204.057 14.7556 203.552 14.188 cv
203.046 13.6208 202.375 13.337 201.537 13.337 cv
200.7 13.337 200.024 13.6241 199.512 14.1982 cv
199 14.7725 198.744 15.6387 198.744 16.7963 cv
cp
196.65 16.8651 mo
196.65 15.8402 196.803 14.9799 197.11 14.2842 cv
197.339 13.7716 197.651 13.3118 198.046 12.9045 cv
198.443 12.4972 198.876 12.1953 199.347 11.9984 cv
199.974 11.7331 200.697 11.6004 201.516 11.6004 cv
202.999 11.6004 204.186 12.0602 205.076 12.9801 cv
205.966 13.8996 206.41 15.1789 206.41 16.8169 cv
206.41 18.4416 205.969 19.7126 205.086 20.63 cv
204.203 21.5474 203.022 22.0063 201.544 22.0063 cv
200.048 22.0063 198.858 21.5499 197.975 20.6368 cv
197.091 19.7239 196.65 18.4668 196.65 16.8651 cv
cp
f
208.017 21.8346 mo
208.017 11.7718 li
209.994 11.7718 li
214.112 18.4917 li
214.112 11.7718 li
216 11.7718 li
216 21.8346 li
213.961 21.8346 li
209.904 15.2726 li
209.904 21.8346 li
208.017 21.8346 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 18.1.1
%%For: (Richard Basset) ()
%%Title: (PLOS-Submission.eps)
%%CreationDate: 1/13/2015 11:29 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;B6uBoZKV6Lcf>$*2DuGA*)3:2)]MI+30;mFaUQJ^S.Fel?V-g<9ddf)mbY:VirN=h-'_)f<$gAXB@_jgGda&Of)LaK]`+#/
%kOTSh6,15P%,^u*Ip\_rW1C;XMhm$KYbd6`q>HtsO8U@AEeV/75C>2p*Z^QrC1!gh,AO^2Xqtl"(H#b')6=6"K*ccX0Qa84@f7rI
%Ahb.I_)pmZTL[9C'Y1*-K>#)g\-V`-a4ncWArH3F@6(.IW57p5U>LA^"LYcBhuI<_)>tWAQ'U@+3jmjt:'7:'b^K2]o8Iktr9Oao
%#d4L22].DT_`m^Dn9Ve+6\Oq/,$7$Ee7?#Bdt@U8^&#0XB^,2%3M>O8[*og:$r/J72akH.*l@)QgGGkjAhhq:/Bn7!!$E*ZraMM1
%VI7WHR5<o]":[PU+V9UJ:SC=4D'Df?qKk^1.r)"pRDCgS,fu3%:%.DSrrSGSq#(?3r+-u#%L\/3Y%E$H)!OqOH2V;;VAA)!!<fqM
%+HiFJ4MkI67:SSYW'0'qp#5sc&iG>f/7<qLK7>:/boRWlAOER<lPAck1E>ld$MhSi]Rd<'j7@U++^`US%3c5;0YeClnX)Jp?PY[*
%"T`Tk6?#i'@%Jn@Cbf3`\NYao"aW'B-9pQKKUG&<*3M!hDhS"Sm4K7RIS[)UrWC0`^0kbF\6eG3COS.dY*X)kG498OnAks@em^dN
%T*erP1B?F=@>BD_ke4.8$aUQNI.Pr?o.8[t/e6fJJR0EVV:EogjtBAR]H0t*nn^`4R"kn<e7u4\hZi`P?Yart^6Zdg5Zg+N_/*W3
%!*Z!nqpA@MQMpIh^t$8M$J%&A)XkK=b\t^,()cE9h\>[O/r3oP2q2LO?BY"`ZN9bj&#pCY\u*;!)B10D?gn5^!(mnlK-#ueFFin.
%)a+2-K>h:XTa.(OCh1W6LY^J,=K`Ngf4CQF<5P9$8+96D;m<1`<Fs.n`A(E%JJ980s3*S)_:\Olj=l.?s$'rN#a6@V!(SL-[VD<.
%^BS)ZQ=iQj$`X-OEk#H"G"Wl;r_"!-qUoOJec4=iWMLY\5[Mm'5Qp_Eqld1%N6pMDBInVNUL8R8M9>iS=E;n%&<Rf"TO7;k^T#1u
%K+WrSVi*VPK@PL<YX9;M\,jqs!_Ct*g:,U@6K\36Xi=bUottTA#ngpbgcttf:nJ4U']K4tAR,9RkQ/AOlRf#5LIPcQ,O,X]:AM^\
%'Rp-.S:DY\BRn@-p!B?];Vg:"!U-]Ha)7ro`HDM:B2NmP^sJ<65%pV=6hh',4'qQ/BY4q1!W2'VrJrYYTZt"HB0cP[`r3PRs(d>&
%)5<ccT7BcDLW08IC2gotQB]2dg=0cNWhoJ[KV8JI#UZ%]clTu0C>b/MFj7SM:;[l1gp_dk[jU\0(]<t[5R>8ciU`NmN,QL!!#FN1
%K<?nD+Em@C_$t\t5G2Ec;IG.*VG;9<!!XL`%&5l5hf#K4J1/eD01\+&dnh'9IksE0Gat[+;AfHL:!E-hR3lS;KSNqV1-,GfqENd(
%!1<C[,n+Uf3KGIFfE7/Dn%#tN+Q'u<ZOnJ/JGt?&U&@l<"l>'Pj-[[Rn)\!^)E<:]VJ!faSc\&N"#Wj&o\b35ba#D?m7(%4i6p,4
%D<3Xb97U">A,'^:&!YB'Z/oE%lg90#'a&6X%M5]gihh29('hQ*I'?O_\,m&-D9$g3-iWs,7;ug9Ggo<YK)iO&CddN^JE-Z^\HhcJ
%!,\GchVidq?SBUPc^o-9Fj9mT96uEaa%,G(7JoH(]1*7Z7f71Qm/8"]-;Vtne;DhEr\YY`Vn0me[f"GgRkNu_GQZYu2Pk#Ll!E!:
%\>K9<"6?5K=p+[mf@^'_;;D.j3E]]2kRiLm^A::\+77V)^](]uDPX`@*mhP!I(fLYS5dBDg2c]HTbJV`S_Ch&Rckk1hY]T)VH?mb
%Pu?4&"'quuF)%dlOBg97D8mQ_]\-]&ptoT-+e^SNm""d%#K=Q0`$eCpIF5h&NtSo"O3s_P7s>%P-@r<Q&2aD)C6Vp]TL8`nrV=b^
%d$!)n`aHfhd$_toS[f]Gd1T_X!,IRC$3f&l^t=Y*LY:1QBELEMm4$cb2ql#%$jV^,C;cnFI%eQd_pT[omD?qOF#=m;Hs@`n5`^JW
%jIgoq"3JHadaX<2)_fP%#nWW#S1[5=0@XlSW1dPArX4G#0Q`h99o*,T*;5l>?L&n()":E&b(J7*!-dq4lO=8uF"]4R1jC7$O_CuQ
%cO>HFCp4QiMf4F#EdcRni"kZs:TrroL^A>)hD!iR#i%ojXp=UO0S6q(#-VG`9JYH.O+Ece_[HrjYbs`Z$<]Wan</ZF+7E]V#%LEU
%LH%"NhTT5&4CD8]UY9S9HYL+R?oM_Jo<[@?pM#39dNq9WY[@!cU+rD<$J6PQ?A8cmP9Fc^0l.%55gnJ)GutKZ=nQ6ggs^o+DDM9N
%D"J5<1`M)04CX?qa^ocF2iE%Jh]*McJUfDH4G=gYc'q_%9d_d:$O+ep(i*fjOjF?XVKa38a911a>:8+?lL2Ql/g;Z$O(_PBIoD(+
%+;3C_*"6J<g&<(E[L=6i()/W\&Z!uC`8q7FbaD&Oe0'aZi\_M'L-rNNS"_hq^9"^^7uQ%)$lQ)$Ifnt0!#+aa<fY*.W)JW6?k8%o
%qFT)2g^ZK5[i+tLjn3;kJ:^PG)K4#Rg'se="KX!7,$Y6td-'X+GuuW-BkUB9%Wi@Hjear[P8;>NJCuNf)N9L5s1K4Z^.Mlp-).j-
%)9\\o+$O<sO[Fm"@0>\&B6^&oJ6]*n;^+RPMm-jUE=qDa-prmh%.g7(cOm>sI^Cm!&PNrTqbSCJ7ol400PZN$d9(>V0j$QsLs&9k
%r*I7u$\r"R^Rt#m0^@7o"dI)n=oZ+iiEkMj8f[L,]`8_-n/'#K5dM[&"IO:L3)#!XnsG>[BFD3@\pWIm-R_F,[XQ6uI5-P'[&1mn
%=GG'0maq,<r*6%T4^J4%iWXW^Sj<ZG=H-J>XK%8J[nu3!9S%_4+dm<AQ5Gt/OK[528&i3="5Cr?hh16deQS%iL=ln?OnB3$OK06g
%Qpl\,U1ORcN=DgLTp:ap<ed:*nO83UAt_c=Z6HCt&nsjQ/$'emMl[LWWEDSbGIXc2g+Z.Tbp5:e1*Rsj,ACAEMJ$d80sdmP>-PCM
%\JU\pl,>L1-CD<6!l^Nr3_@=XPgW6@iH";P(*$NPms=19cM#E^Pg#;u-e!H!=jC;?.&,9W5H_na!ilGq/?TMr/U?t(b&`8T0cNMY
%\YkBTe6\A6+Rpn"&AVs^:l$%"'-T0+h1"<$1E[8a.8FS\e.KLjfG?4`9$^/"nIdrjXRu7&1Y*).#lk:8aA"]l_e_EBW<S@7%WHIs
%euIMAJVNsF;(/0k9XFi\$+U>V;TfqOQ#nU._83N["NiRWY;r9rM"kE(ZYF7olUN?Sc\-[U0`qLV"7(2J)#e$ddD.N3e`R'e=c$\;
%0rgA#KZ^Db'N>);(=%rgDE!ih4(8<A%/ERHNM$t';nL^n-0KDB>G>[bA2f6B@A9(RT@lQr"NWJ@lki<kDm@+0`"R2Sp''i8CK7.O
%BY=I`Y_O:(g43R0hEVpp;?aJJo[pRKTp[]u0i4YtIt5P-Y3GuG<e*LmA<)J=afkq84E7@,,27n]Q?ihUAinr-:cpSZL4<utF>qo)
%7fTEC/Z-p/[8UXOctEqp:Yl@R*[R2X`F,Hn*,J!M!?f'FXe7nV.\:(T*R)CKa2t8C,L<WkU?<i,#55C:Ye")rJ>,43\c<X&&i$4l
%+_W_OdHccmRgkIoZdmB*Wu[0Gb%]jhnVlFWhPj5KfEB%_OH.n=HsBj7ED<7HGf"d$UUAG^*KBT\aK;P9e_W/iBZNQ<d>%X'Y>g3!
%CpuJ7q,Q^DS#m\JmbcM\bt-LglP1>NC6QAQXf0>AM\[bKJdr`Y:MB5/C^@Dr8d!ea"5s^a!Qn&!cu:oaN%(2nUD@Z7m9u)k"o9Un
%6Pc8h=\):,r-RH:8*s1JjI4K:IR-5ml/\eB6:4d^@^/hA\J6#<TlH'h5R"/tKb=-3f_8<X\_`:p,S"Ro;k&6c@XMQf#];0LL*"f*
%D(C"@`%;NndoCT0hPhZ;:Bu5SKRR(hn!31)eaU%L_]N%`)[X!LjGYnA#Wae/85>jK>Z>jQr(#:l&R)@3;i4UiMMNG,N;E71,ZNAL
%kRa2T_eQ!UKU>5F>_-6O)X8$M1g$mT9op26oS2=t1tU0+"`cI&D5tVD@_kLsF`nA2b.RlCq2(D3%:/26?E4eM,W*30eu5rB^#-Ht
%C]j%\eQeji2a5dRK,VV,%W!D"RQmp0Y[Rd63$+@l#SFf9m,-<e9$olQ8BUbi_/>lWM,qbjUHm6-H$qQ3fp8WKrha"P)a2q,W3g*\
%66U@(%!:3"fg)^m)6f)7Y)k#$Z>hL1\uhBDdMO/<!maT`bW&?jf<_;O309mXX.ZBiAEDe!*e/Yr`s-D$POG4)bbXI>EZ1LMN)-7s
%@52D-"4tg4C_lWY]4e3I8A+_]dINY",t/nF+YrM7$/^+-r]>_ajaM7a#@U6D\h72:mb$l(]4\;dTLm,F7[e,c[*MF'DrjsR:XueX
%a2BChEg\:F\B<hA5T%Y+pX.>X@A!GqcM0VoNq@?th>u?uVtNOJmQfq4VYA='_YanjjF2o_Te&$!..S$d]mY@+)d-68)(XPrqONMi
%amW2Nk??S\Nr&om.?&`V)FQ6ahl@`;5Mtq'bTaH.7t3;CI<HP*n;&L@J&mU3j_ZK=1qths5c8hZm\IH!T,tGOd^Wi335`M.FPV5O
%@QMmXN"5n_jO[i_j[Xk\96TUh`T$-/hh+)`lKHu$=`]eN;?pF#olN-PNCJO\r%tbCJ'([o[>/]36M/LOO3Y=4j36LHBm.quY=#m+
%J(VU==AuK&W=PX.``h9!oP.oCg)j[2ma1OjE>AnlG<`eu4XtaDo;IEL3QaMP>(CW:1DP61&``(+lQ1RJp:NLkS.7$T#Z[58(cpdU
%<43LUHd=bt!E_jU.t%Wj&u"['CQGsET2G(HmMiu:XR<od&jb7mS<hLZHgkkU8X7B@X[+>XTWN4%n9j-,jP5C_")5,lck&n_53O1=
%W!P^V$u\dfoYmCEj6W]=HiBFIT695l$oDnC>65f"-L?RWhVl^*-]]gOpW%Mpr;52:ZcVqY^oLuI*#d0Ro>Gk3>Ng[ZnlUOH-pRP[
%@*I\XLtk"*Qh1MIK"n(&,PQ!"rOAK/q8'j_aomLE[n-2+h+UnUR;2/f522sChbdMSSagnB4bfUO_=:%0kHVKOrcYk>k'l37g"C;j
%*W'!r:WVm`bl_XHk_DL4nQJ0pY&BZQkt9Y&9]iG:B8/GeXdLI8=^]!a^"JUO_3Ps:+rDAs@ZC>'](*-l*"Pe2>`9<NA@-%q#HA87
%:aHL-MXhkLqh_d(:Z_rR/*0-G&F[Z]*8hEu_k("$]$gBe',R9GDDE(&8PXI76mjr4S5`;G6FupP6$s?TDdn.Co(23?'Cj(tf4sTj
%R@]3`&j4Yf'PVjF=L6IaD4\5'?)59>?la@?8D)G`A&tStYe$,2?uU>@lsuRBKjpfh/KO]W^.[X_>$SF&^i'U+VdgR+S!M-cHHlRK
%l,Lp!%YRP#P09(OF1M:EVHCGs-hIKV:Yn`h$iZK&p=WM=CNU46F+Fk*4]1F\Z7B?s?sKHK17nr-1-oQLKk-7f;f"H*ess@eZ"8CY
%j(2i-C9>sEC"ibu4PP,]S%N80l6ROBU!IiJB5.XSI6V7op@=F_S^uSW\JPJJ>u)?#QuBBjS4!T!T"c4.1,X>n6[@S8%K4cMFRssg
%'=W<Zf,C9>nF+438((,Y$P8<E@/WL31NU`O7`GfW$RY.'C:4.<(8+kcdHr*3LV2_gq^uP'a]$:-Q@3EJ3_7e^)MJ"]=D@L3jS.jj
%ORX;+TBU\%.Eao7V#.-91$\m8qCNg#aq#B9a.\j&*u]Ue.;B9&)Ydm3U.<T9B$0UslL)TSQ0]t7H61iR:]&HPnSD@j_4P_%GkR*F
%bbqAa@g%0o-bsYQ'`OS7P!O"O1jIIMqrY4rP3(Qu"eVlY.e=;M3er7e`'E(=TO"i-55jW2->_]OMh^[CCkVsXBU1Y-%'9@()c-'F
%NpR>*-eLK`"`sg>@7H,>_JWL4FlkUu)B'DY"(.BmM=7ecCH9[<#Jah=o9mO'J(du`TN*cSrd:S_C*NSADMfZLr!akP6dcM:.gMo?
%(5N@GLhBA0ISZLCa\2tR]Z("C0@3_-rF^^,Q&$VX45h^-1l-Q&lJkVfNCM7$TJ8-m30<K*d9"C.BPnO:6\RH_N+IBA!l#`($U$ag
%jQOPk(D2:p#W?GM=I-+G6*O4m1_b`m*B8;#7EE@XG6_?Sb^_nk,-2=sK=.7Xer;@pii-M1#=1-4!AWZ$%(e:RCN(<PXGUuqZ?$*e
%S4[ZnVEn1"1P<S)NLtXX-"];8Z=bm:RML(^%+3FjL=iWE$MOi9#nDV+X8,D)'AClof(4bmRAgD["+InmreR@O5^Q8KAH/J>-&jf!
%<,2UoN.s>#^hElD9Q$GJ^M?TMZYhF]+3h8*N,HOLN530-m-`f?M#A@)44%1FHT\7-\V\e(A8K+tand;34cqrugne1d9-cS^e37p!
%ceAjlUeHhAf2fFSWnsS-d(!AWQ6%b!4)upIYJd.OGP9.doVq`=q?\.leg<V%1u+Ll_s>6G92B.Za\fKo;)#PB!VLPj#de$BZ`e<O
%oBpS@!r/tG!KJ_PoabQ@*<BjN_/%?(qka"OL)kmN'X6[$+."r?3]n3h5[ETdkjVh:F-($6-QF,d=Go<&mTf6h_@%/cAETY35A/6<
%p/;/u\,rW4;#fi$&*.YM*`qk^pRDPY!=%jDo9T6[A_ujipW-;\SdM'N%&n2I"`]#9q!?.gIR=3gEmX?,`+,\f]deb?MfL%JBg)X-
%#Kr@j;5#@04pOI'6ni<7f0LRd#YmRGDZJ,im_NmEWCj<I^Sek.H],f2`s@'5ljK<;@3f<Cq-V*[b6gF,grp+p6Fsm%ftm!<X_1U+
%<kPE/0uCN.%3#K72>:kh#J;/M]Bo15(^3(jof*`^G(B\+TG5Jk?gPR*WW)\gKbB)g6T6gq4rT+[4O4\gnT$q2WHo2&d_Q>0c[WKM
%-m>nnD7_%aWrlUuhYYALbj^t:jSfRC7cgPl>;]FR>!'o/[]>2/IJW?=hL[@?pYc#%a-(`H5_S9T@?i6Z>`6J%6I?Fqh"$\;^G]hW
%L?D5c7FT__5PjrB6l9B$1=h3j@$^SEA4md/asL'2p^\7Zj(Rk>U3ZP#VB`?Y-i]juhn!E6``pVJ;Y9?TOgJ73INZ5YJHOsMYCO3a
%O^udQSAMQ-;Xn1>Q$Rqd5=DFCq@%&Ta=h"H9NE6h3f;5<'5d'AS9E+8`dEAPb-,=f1k!R")b`I=Q&&m-=tA8R`$s6'1"I#JN.JIJ
%rlNH/ZQKT>3'VskOl'as+E^'S0Xu$jTZjrXm.1pscO85Jl3SD:TbO_SWr)F0a"q>io'uNuS/X++%ZU]E\%nP1'"MiKN_rQs[5$WL
%!X;?*mJSaNV>:]:9<)IOSQWI;*WWR]6FI.b_r,oZL;3>nmenNsrkt2XB"AaaKhZj\"#;iL\d-00Pb8MTjG3/aRFnf2o(s*2poFfU
%:S7_'H@OVt`VQ*=)N+F_<5)QSp41*pK<j[\RNL4>YI*1"Glsf14j;O`/:QJ^.\:H?j@[VKB-tu?]@(W+l6KYNf\p8-L&8`2-o:UV
%C#"5I'[3=6=8FK&TES4\9n9=*fB'RcDEO<OAFJr[PPYA+b:LLW8++K.[31Z'O93M9R,$!gB1-WI5Gn9V#-/iEe_2Wo[fq8#I0\qN
%e&ui3/^o0pUFq15Sf!+W1'sMg9VC?bMOp5q7-V#hB4:9Z(WCN(IXcg@1\9?/Yk8uM1=mu/j9?uH(U*uuZ1%AKQWgGU/bD)]<?t:J
%<7a0$EOY/t,W<h-efPqU-3Ki]4[=H4Q@#)=[eo0?bn2Vbm=9)"R53o!1>"3i?aHl1KL+8(&)-db9^6I(b]ITXR>iaG_?D@c%M(on
%q^4/jhuX;Z3>d,h\&ET0;%<j91-:WS4(I]VhHso.\#'/`Dgs(H8sInIN.g<tnm5ljg-f7rgn&U6RX\)O1)o""BDWIRUhFE%!$u_:
%*Vphlk'eM&GQ*6K5=e<`q5)=F?jh'<l1MDmK1$BZ$u\S.Y?sWj6+<"'N)^LO6(]-`7-<`],9;ZkO?M:?rOhNjP%LKogY_!2R8&0,
%aD>Th/".MBV0'X=:Wk[ggO<)'7VP--F*juM5VCsMVP<P/,Sf1_4VZ&'6'M%HD.pW`03+ora3*%a@OUc`ialh"KF1/HDmgam%R4/]
%+>raP(ug#I4S&B2CAft!)"9r_l&]u:`m.QUollF!mbgkcGY>3Fm+)W\DRX=5gks0(JNacBJU-4G;VaN,DT\#=Uf]Y<MV[)@k89BX
%\CG]Y"<?+JAsS]Mi0\68DLjj<IinhCk-4o[kJ%6[>f3-0C!aX;,^u'3;Cq4Lqh9CFpme)I])1:/RWcgBD$9(MM%sn<[E7c2dO-Rj
%cG+oG6O8Eb):OL#[=;hB2_^ld$Aj*:fH$(s'=f-k5'B'D(hkFYhk:/K"f4XL8&`*eOZ:ts+-GG-o%>SFE.Et^"(S>"S$$uk52_DJ
%kG`]8F,)D@c8l$!`bp`s`6Rlb9Jl_DFMR_M#"=8:"q>=$]%SID%9Y!"99rZT;.'Q(4'bl)HC<6Uq?mVlTi4[hdm"TO1k>GK@3la+
%?rR`%k_n7%FDKpQW,'M4\=]<2V$4ZTm>3u.cAbhmn0Z79^fl.15O-UH>cP<eEfD)TB]oU;DCTa+$aflRR2kq@ViN3a5X5d,B,72*
%$$dHUL1h.d9S@3e-ou*?k>.W1a,7ne?A_c-ZWM&?&jIJu1ea/Fo0X^>`pJ*gA<;(u?486lVf;r#H\cc\?/F`aQ0jqpT]QKngEM&u
%cogAZ\&!"@knn+i+0H?T(<Epd.jK7!p9T-k!8dZm:b\#BXF_62^[j'7i=M!+Tb2XtgFHktTOHHOeh6Iof&O(CTI*rbVu[eXqg0g,
%+K`/)/qm>-?@ZuHDmQYC8098tHXc^]&HjBoST%PhQ8`RaH8)Pjfj-G[g:CN>ZF=cXJ\V[H;PEe0T+2Z\Hao4+,V;g;<n>`)mUB/f
%@0oD/Zf7nsgEeU.Ob?Ji.'_tuUr1*p"OdoQr-l9fMSKL&'="/378!gSg6QeiDt&+tLiZsgA*]!$JMCIYaj^GIHi;;.CU8!lH,bXQ
%cqATa4S8%F7S<S)?$E*[ge;N7&K8T_q9e00QOZ)_\'S(_8sg%NV\PKecc>'RX81QYLQ^>"G5=55KeD"p.fSSrk+84*\,<tHoJL<[
%Ob8F:.e_[$(2<!W:3[f6&J4d\F.e8;2X/p>n1G?qK6D!BD;XKIT6u1dmkPhBl,k:Q<'N^/hI-T*G4iK6@r;nbhSpRkY?<Qa[H2t/
%AD<8eEl9^Z0<9=P`JGsCVX7KXU\\AJ9SIA*-lE'Xj?"<\O4SAbWc(R:V[sH"NlRnae2sm71CL+Y;.tHd=(#q>)'T""1jSHu%qP_;
%0SLAaB&l'7=,r"W9a3f?"?O5ZR?8T#o,Z&(dun#H-TbY[M*Q6t9;E<-]F>J.(9hSd#=-2P4V2UO#N7,TC%(:U1XluW(R_1Mb@'h_
%G>X_@;S)l<FOl3!V2>!5"q.4NH=b=j7a<o5O5c2FF!_oNPT[Vo)&s)h[Ci'+7"&s)=OSo6Coki/?$S'>IFh$q;SjsLe(ZJ$("?l4
%n@nmU0!7;9HV`cKlWLsVSi2/dEHYmHpOg`5k:\?%b2em5E72=YXn/<\23<*g>%aO/l-55.G%hfj%G1_8U`"-Zkp,Z`KI7Z;]?c>=
%^oZjhU`6k8/\$3M,ThRBD#rKpg`o;06a8ekFYf!%+*6>Gc5joB4<W_a"!+aJK&M(":/bY8Y-c9a9?[CQqt>/&>+RP>_Mr[1_m.3P
%+GufsGo8>h5&)3)Cub\MQkZ7nJAsusN$@(_0]aO2_Cruop(:eSHmY:(oR@nG<ROtqqj).R>SLPU-fY^\FH?U]lc)P^@P&F62htct
%'Zo'hJDjV@nO1.m0spt^!5fTok7:&N^3+!="X6*Vrl#oZX3^26CT4S^NtOk]WqikR7@O$J;e5G/4_`9P,)kcu]'74V["l?mmt?d*
%.*es<Teg"sATCs<98gai'e$.t_Z^d6Z8pu"kHUI#Hi1,T\f3TZ)jOZ%3+COI^)sGr"'Vh"K7cc+G5HJu#cl^jbf.Sdg;+.D.)UL+
%);'g5_iDD=_sjiY[5.(QJ&Cde<X,'h0O*3afYO26oLJ='&=9*$6Qj3P0sH/Y#K(-S?<XN@e9D1i+Ogh0a^DQ/e_(c`LB/OX?X3]D
%)"q_N@RM)GW0DX:=:G1[#EK9OS&K3^S/nqg-ZF_+Pu]nEqBg`$YcRoi&"n.4*s)=VB/m!Tn9f&=qWr:1#G=TZCnm+kc]Pt39jV3f
%L\dg@VHL@[+\f!P8dVU9CHA4f1F$A2RRT.@f3!>+KL.='0cDmA5G'($#*i<u1Y#H7d+47Kba'sK*a2$2^oZ/rGc=A.]m>NNg7W(O
%]i2tBUOoaiT&K;-@)Et`18@gl5>F2`8\Qm3lcRCs[2r',oodGuSn:_J4$LSKAP/@hRG`WFk_:Ip8>*JnY/)mRML)pAKeWk7.:>Yi
%XJCVe^=Xg3okmeYqg"d8FI$*OrF\o>s$rj,>RBBD@=TAKU\8;N*rI7A''lL5oOo7?UrML2<"r#XBh^D8pG>i"os@K.dRd&c'sd/U
%(_s$9`df@I5;Uiq!hMFao3b?OVMF8P24,t=3bBIs<.=C<(H#.`%i9!`4-i^P3!\bkE3.S)(C8B.#\*ri=7sb&@,[#AAO4DhD^d68
%UW%U!j64hk?A>Cll'GEq+OU6FdJ?p%3#K)>@#''-<#"?7%nqT=oI8$r/%bZ-M()c<8$k\)>H9!&=1[@5+D3:&F'_$Ca_/l586%.(
%5jCS(:RtgRfFi3Rbc1=+HYU3NX^Mg2H;lb5r@io#=g.NVpo=<'WZ4R,Xr,.%G9dCj]%"=(HrM=$X5[OGk0ZfP;K.M^;5l<VC-K=h
%NkmceJl!Xk^iQC,8uHjq%(#S^?4R9fk(5m(:rkH-T#3,0d)m57fOUP]@PRlp35(sk6\-fWNCnkE]iE-2El*l2d2Vkgc'Q<CKr4'O
%),+mV:uKb55N+oE1R"2!d:==SpL?g2o=uSq[cB55Y@QLi:4=IBYi*S"EX3X$1_DJR=+G&h($lU*!"+]t]ApG2#6dou',+.)+EVDH
%iI@?5d6URpl\scS$^bEZ!=%o=,0>6nE2&bYF<D=/LGs]+%`!RW0+>38!r\3Dfc%F.\,F9`:JUXJprVi_^I<SKK/`cCH4]Zo)uE=s
%-W6<JmqRmc\@%^^T6fmc[G]PJobAR.::D,'()ZFqH/*(]rJ2:2di!D]s)AqDLM5N-G\Q?":?'5c\0!dJKKikg>2T6>n*UAO/iWMP
%/,b,S'D@-4+2R%D9!glm.H)^Qlqt!CL8GWF_mEqFqNQ;dlk88dr7sfE5Q%WGrUiJ;50-KOHqZbb4LT?F7CXjIe"5cNH\nY8/P?fT
%!OoOV/64kCo<b@H'7`PBB4s>?4Cn:ALR3*;33#@g<\mr'Y^]5q::0:8pRWM&hj)tXd]Ya]i8(:W0n/?IGcWU.J=VY>Nh<"[B"`P&
%5-^;KhU/\p2^@,FGt?Wl:'(;Nq"21Gjm^*X-l=%ZJ[jLIE5?nboS3h_'G`6C!H)`*VSB7D(W,RC1XdNV%_QWXnDAPe2Xm/J"oDN?
%Y^SN`3=/^j%?!48k*sgl=SqabG2H97RN2TJ"/f39lRr)F04S!#DUBQ::XA.-`burBB%)&NLQt'q>pdbA<;R<4!]0sfJg?M!"g#O%
%;`OIaOiQbUHkBm6o-QQM>B0fVb.Oq%?>=Mu,mnk^Z6E?@;q_2F7,]Kk2=`psXB(#I#*fE$7)"*Dh$<Xcn>:\`1pp1ZK#LnNRjAL)
%DhJH*KGCSl@:"m--CiQBX^Oph/A`=m"e+J.>8D#+fm$N8)KPl-blUqQDQp)t>3T>B^6?T@%<_X:C"XYbF_=Hk4:50mE+@R9c;4]?
%iVGVVJrC8EZ<2%e8]Xk8H7O#<$1dt_'X5Hb&PqfmI.`Y&_E&eHNdaVBCOo$G.8-TaLDA+Zrm$X:&U0`\al5n+qB*HhXSK%[.Dkon
%-d!U1#@b(]@4bAmDTRX+9Tosqr:r'D^`'inc,X?r$#>QGZ$f.'YQ?YngX8!KqP@P7#dG(Z4_FC:@XY-=5!f;9Vj"(RXLAHc-_^(h
%4r:3McO['F(2M++RODXI:Z)"93NPcRq*,6TlZj/1-Z[mah]u.j7sV2*VcuTkX^9t0O0A[B1;g4*n&aa_4P#ie^=Rf1rg(P"?(%&?
%YX/X*&c["U@o@m!?X_r@[rBK"IJqtQ/!7&3(2L,7>Tp1>h]*/n^9?:N$<TAa,!T9qa^P^o3cC"WDeC,!NG\p$&.Oe!LL-q"%X7-C
%8f!K\UHGb(XBotb;A>2"9_<2L1rSZ=dQG5#m=XT$f)TIai^`i9jfKUG=fhLr>r#G*;#XK"CSp,@M1q[VhDGs9Lt*eZKkOQp<H<,t
%c0cl[mBPYfOMRCX4?Fj0dBW5Vp(:>t.@PZ#@l;[+?jJ^i+_!c!>WPT]3Au=A8u6Oc2k"0[7c.G`$K&"cIY6$le=[VBRN-lfo:`dV
%8f@t24)^^%9Bk[T(l%bi`M[\2f[@;8Ka(p+*pd%\`hIp]OQ:+0m-/LQhp''eVlT'!Rp2J)%78TCoLn`IYh)qA.mKR7\n9&_N+g&>
%[.iNhV"f8h^.N^:T+3A90u^$j:$$OT/1NI^(E\P)k)O``A)9[#Y;bjTfJ!-OEuUB.*Br"T4OI[XZuU?8rfh^)IQqonQ(NNeU5tJ8
%,,4c!]-3BtlbE>^VPs93hXY:8'V>F`b;l!S.Q%3sG`)_>T0@Q!M72Emd:uc:Wt=[7pe^gm.D>_B:VR;e`MZMgjK1q+BPF6nA;r(O
%*[hZs7iODPW$Nd9C2^cPP3gZ!.kZ)ScntS&>?\#Be7M<nVR#"+j@?5%5P7*QXAe==^"K_e>F$+q5I5qNh7m;>s,D0XaBh-NH1UGu
%cnircSPP@Xn;Mi9n;dtV7N*;X=r.*_#@]>q6E_Q[Bn'QE%?#1%bA]e4^@dp:X%l\UGj]R*Ogt"NOe9`T6bmub<gEP.]J9RbZ[G*a
%&E?7Y`-J9\c96Lo>(N3UbsR!%.2(Gr<dWU`GuMKs]Xqrs(7udT!(ZDEHmiG-.d>Q[Lm9*4?L*JN!?.n*8+ORjGK)UCJ),cd%DQN?
%(tS5p_ju=#G;l@54B<P5BG$@?>LS`WDIF^*C@*EY"VcFX.Un)_!*os5Z"1Ak[HK)Jm<gFFop4D/`O::60lei[YsR&O.ZZH)F=CZf
%VE.j<.h3BK.>h6$OjXfc.i%%4UJL5M5]87O0ja-YC@*(./'W7R]59LaY"78d_%]bq^m*qE<chlf^q\<@/6jI%i4`b/#unh%D@,l!
%ZZ>3%T&M$&n0ZAIFU3I0)p>b-L'40&Joj_'XRQ`1dXkjP,"9s6l9lgopria^2TS885!_ZC_WD<Y*oF;R*%u(C"#@#>$po0Ri#XgN
%'2c[Z$,DLH9',L:5;e;X_1oZRI/=mO;o")ms!c'4\lf2D+/$T!Y]0eT49APC@l18N_!E]d)0+pT:P&CioETF!47464ok>Hr.JAV'
%TatbN_(Q;%3D#Hgn;\c_L^<JJ5%L62KKl1lr586!ES]MK>X1>@ZVeaKd3$UnXP]a!=>30e)XmG5g([$_D;qGh*3qu]0o]s/7TH3"
%%LO9e"3k?!r/t71o^I7P.?L.-CsM1H_Uhh8"[TPnL\eeqqRC&>#uUcMbFA<`4Io%sYnXK9U_#cnHIU2tkLXqGN9%`G1epE@a#Bs:
%%3sm8,DbF&f?Nn$<p5PgmpQ.!jC@2VZHKT71eQi=f()4+8(k_$Us"soO])JI9=>`l>-onE5HplgVU1a$?-g$ZWp>4IJKpc4"#MTS
%esbBYSMVVU/[hoZn=i`'D#2]fd(sm#?I!X4)pc<10']*h,%2=rQ6R)Xj.<F@NuSDp%#puOnmqI8JO6-Z#>Mi2D9$8(J5fd%8>_r`
%!!g"#KBd:0GoTP>"9/,'o,AEL86*kT5YPAPcg%jZrW,qI7)+d#"H3o76dAFgL/rT[]7oneN+QFYm9$):gaN[gKjlt;VYeFq;jeEu
%n[+5_l:MSH7R7S+Z1^;m;`#-:9h@pd)mfi.cKAM6;oqe?$m?"?-:Nc2/(%>-NN-ta/@CPh'OY;3Hh+aMV-EiXPCiM0eCa2fong!Y
%Qu4A-HMmF"R_sqQ15@'7J2K1549EnMY3tu.Tk(K3Na@G)nm[VePr+.p?X8T)J:`o6icfCgJ_!\BE_[mKL;A'Xd<bH8LaJF*V\<p"
%ZWfX^+*k?mKWI;qeCl@;F7Br_Z)/eq1@;&<L\6X-]_q?U-Z?2t4>ZB,8Zt5#E>lGD/46)+kIGsQJW@=j6.*LV$'a*4RTeC,@+6)O
%1usY9U:,<ndhB*<UXolQmYQZ\J>:N>)6q_;7SaTCZikotFgimbd7Fqi]KbNQL%3aTr't@C<!\Q:"H_L/h9^kp_83#^AGj)d0L^kM
%NIXRA#>@NKi=AV@n>esIQG@U#1Iq(_c,tIGdu4[u('WUmHQ<KTj0Y8T-n(W1$=lZJ`s'7$c"@[gM!E%3_i_Zq0X$Y9s'(*0MXPj]
%aFq/?V_P[TjM,mBrK.Tof,_kI^3<N5e`\<odZ:+B]',utfG-Du>rT'Ih.MVhh;ZEQ,[KcBDVT4_8g]o,R.p=&TYls=ONXkY\4=,Y
%NocJW\5rqQY\Hm"C3Z>p(Cq!Y2USuM9s7\O&<cZJ*Q4CM3\DR.TG@n9bcpbH1*i0ZT8jWQ)*t"Y'AR*ca:Un9ehh*9'ciME"jZL"
%[Q5R_JiX0j#mF0s6>U83%`lj0LV!RCk_VN=S(Z+#1L"bQkTF7)m9[If'"u@g2Y*lqQY_E#g2*HM00UVTM,iS=K<qQg%MDKW&O.?d
%`)G?[@HbtB<#;,`,bnHH.Rs_D77"5)+#m15i3pGmOn+^6NOG5_W$Bl@M@?W5b_>q"As=!]N=5Y2jbREE;!.n5PmX\%?FIX:WoAT=
%ldDoZZdiEpNmM#[8dd\WZij0ecuAO=h;XOcX*AO?jJf1G*K6&PLcnJ)A4,o%5Y=[H%Z4XZaT/noT*%AF%)V.LSu)m,To!q1Pt_`o
%q])i#_-mp[U03^TX1g^tir]):A6G-CH`$X"ni\-QYNs,t6:GYg;Dpp;*HQjMR]B&ih;!<%h0*j$k!iWe?=X(R;Hn9YZ7`;[RFc=_
%/D[Pg4b.]5l.2(i\+:"V(skH<\g^5P0R6`]D?($,DE9aO)j%LMA'@555ZcUW7=\?\PT1PK^CfOm>s[IAPOl+8:;_8uj_YelO,V8)
%"<Prf<#trbZ^#l<7MjiXf-QK&MbSX:2[`Z679rUPh3ied>"2fn!]k/sXH67%#Ds6S3[@Jd&s$7a)`W,+S>gSJ",(]2ojaM8![-m3
%$4.EW";h84_=Kjq4'YOEib#Hq]e5#9)>B<VVlAoN0LEBN5D%d_3`_>U:Kgmc%W6'>3=#DO_Y3m"XT*K)jXA;dHM$7p8Ii6i#`2@E
%fCho(?SZ[BRYq2<XT.nA)?P#<ork1B&>4r`IgAJ?3AOf`-gA[TXkJ)c=,mn0=/m?ha1KXd\!%I7Pmf&`NHAcX$)nr&j6sfPAX-uG
%WMs8Ii+o<o\B"hL>5pX%T5Fe4KHJpZf!uhFNejQJZ"lFo?oD;Jk-/)/S:'ZU$V8ullXL;C!FjP1SSTIaaJ<Q#lZ+2i6_^Qc0',j#
%jMlI$mI<Ig9/WOj2,;p]jW+Il:"_?_7@"hZY*doNU$:A3dFe>ITR<WhF87<%'L9$e^,WLJ`e&G%H[>Si#*cD@h)WWs;Ig/@IDXW'
%SC`$a>-+CT&qQC7XQ.,l!aCfUh+`jReQ^A`BQ`o9BA1sk7==opb5'P&q+u\C29PaEC\]6mk596`oiaQ1\@oPF:VE(_7U3NLIQ=$H
%/`2P`FRe^<54r)CJEAoSI-S+e2j2V.Zci0oC\co"\OnlSH7^3`"g1\IGME\3j^T<lbKK_2'<mPl4jP\BP9`Cd<4I>"-3l>089O)t
%D"&lT+sEif=)3,n-/U*Cj=F[n$Ftd-F^(Xu^\+CQ'YY`YPM4$FUf)5`5BFmI&/Qph8Ld:s8qp:HSSn3Y;rgU,Ca-TYa^]Z;>'*`>
%ToeOme[c5l.;!karf'Vo1W5f]O&-*H8BUA=JM's>X7jXeh,l\,n61AqNHM"&^Se,WO(2?W;-AHgo?p>#1ZF'.`u[m]dZn:9QsYH^
%c+3tp3l9/;1\46b;P<'_4"2R2:Zg^8')@2RXg5R&o1S0"-s1Y:Bk.Seb.6%bJeMgmS6mK5;L!psE)cDnKjrb"cUO(`d.\Muq@(&A
%/U#_j-jJ`A<`sg=F*og@6_ACj-D(C:\*eBXq]]5HW?,_O$kNMeWFQq2#dfEiNJIc#iJf+W!a]eOXW.Su@M4DZ[2t<C4>*Q[1s6)%
%P\UU:>)Mp9R_kbErQUl]`hcobG:Sp[qF_iiq_Yubl;L<28@'`i>19F4H%/Fi_RL_KHHMW)]'#0@eE"\SSL6\OE^<f(R$(L$VH'@c
%feHo^'ggA?k!*:AP)>e<M5FFcH4nW4:2<\n(nWS#Qg\J=*N(lXWi07<UY!_DqM(%HCG1$gau$634m'Ng%2e\@NDB,Z>n?k^='Xg&
%Y'TVQrnsS#nH\/r3I$$M&VcUEO9^:BRn6KC-l6=':G(8;.os#i\jtt,e.e_Z/@O#j!a6jLFRnL?:M#DsQ0Tpfkt$I:(m=$=(I\d4
%8dM.Q_7[Dm._Tm";`nUP=sH&U.l"D#$']$Q85bbMY`%iGhX)&#r(2'8#q^O947/iOs'(XjqbfLM+/r"l"\FYl;*Hh<?uo\1%jZTK
%b-O+%>N.hlp%F4O6E6<fSJ8b70D>!EM,`3:\8'h47rMYQd@96]HLs[]dhJN8:R=If"C^>92I.\Vj"j,tT<BK^Td+mTFHto4!5ii2
%qF*#_,JV.!^E--_oEHmC[<f?@UGoCecEA+odmk@ZlCaW]F;>.uJjJq\4!dbcL-IeY09&[ap4V([Ib$!.eMO(?fE3pWaeo#3IGgP6
%Z$B@Ys'We^qRd`>FEA8(MShXc8fA*jC:SS.JgJW5JTDYcft:CH77k!',q:F3paIRXkT1@/ckW#iB9r=,-Nn1]-plWm;TpV2URkI1
%Vj_aWdTjSfF@2?3%JX)heqL-d;m+?^r>QcFjQBS+amMX7Ek:R;k$?,D3\0fDe9G5n1(S4m*Z+"1OUS9oR4$)se-:#$DXPbHl/J+2
%l>h:cr(D1[H*tdWEPB61FWu,^o5=2jR<!RaSn)`Kik0&.k"3p=`H`9f$c.G+.hqtMI<X--&q`Y&bR'tK-2!E52QaC>h`eAuc)4*O
%nYVYA%@]N+\N$cl*W^:dC/S]*'-n9-fX1`cVkAuEO-&t9:HDhtXV)>'<XbXlSmlQng5ba)c!,t#J"q'J[ab9B)uf=Xc%;rgG'bN$
%8-nTdWR.2qYSb\FeKN39="r12=#oO_6#g5I`C5;6Q4Ycd1]ci4qU[d!-`_^QZ!P>?#N_(!D$=@C0;*0)*/D17$/Df?NU:uShnjsW
%_p`:t,h(%#3*?8]n+PmY7C%R#TlOQ"7X(!]qj!%L^UD`BP(c`8;BuY9euhmr$NXO>,R^:c(!.pGFKJh<p+CP'X<`9%-2;8Q0_+JV
%.C1)M3l5;$;L:&Lb*/j5*rSTdnmpqGqF,[]/YM4`?W<869XI#^Pc)Fn]LGa>003+FF`C9M.*2P@jdf_BVo)tS[Y\DbQ*Se^g?J@b
%URV_6`ldNlI`d,'AB.3-)hh!.#Yio2A#ag0>Z;_1]0)n2'!65UD`::8B*-W3krBpTNna;-:`%$?g)eUT\t[)edU.lEpukIs'p^Se
%8'dljRDR5O\j8/MR2-R?5qdF@530hA.Ff^`M/#69hOCi^,8od>/)YIjGrh3C"rg@kN,+[&B&(`%g4fBX;bm(FUW>#+U(S8rW>*.e
%NM"@[fnJ=X<LdEm`I@O5W:GP\XYHo.WU2le>UpQ)[FMG,)nRC&Q]eYd7Rjr@&)K]<:r:pf0D6nU,8aJG"`I98NlNV$]7[S6o+sS_
%lHjEW7D;sYS]@R_eK0c'Q&>NlGB_g"iCg`6YOe_o!4PoXp00HoMHBnJLGC_-.i%qYC5%XcD.TgEf?]&!p#bJ06IX'nlR?7j4(9VB
%DHZo$'?ff@3>R]p)Uel<s&IXtmKVL-D65Qffa(83-tB)o/!rFMU^C/i1q46kg8jh:"8h@33PYEper^2XU[(Z.?0BaJ!>a3I]s]u5
%V5I*E-eGD2FIdWhSt'5JHd^>[SU%p*ObTs+NRF3=fq_Nl`71DlPLFO+MTGEh^C0LnS+S&"":!s>S$VfeF#kpW5pO>17]fl5[ju.c
%M7!M-V^?8\oLU[nI-/!h:`>ZT8b-W,F`YO=5.N<*`pK#uqrB;JhGh6r@@pePlipbiIau;!dGWZW5&>0)>(qBF=XF![VnB)lVm&t"
%WXfa0b(Y7VLV$>4m$%&&,Rf*\_EL`FiDk;X'Y%=TTA2Vk<7kHLYYWQV7V_>%Kmeij\CW>!PH3tY]X=dUp;r^b9[)Y!KmdttX;Da5
%^T^M&SdhasDD^d@3hroT]&h+iL9=h7-T?f>dY"#B0C0A7n0g`qRY?01TPh8ccg)>>l.@Q$7U_oo<SoZiVJ.TQ6o;T2IJSbCEFGJE
%<?JBpY#O%$=4ML/lb'm7:C_ob@c](nI<&>9EYU)@(A>l'e]KN4fnFhU!+?sL+PP?QqrD?\+hRW7_EPN15&K1UOWqC&IhXj40.Q=P
%%-csYs-!fe`-p))&T?`gAApa,bhh`*l(g,5<8=F8ehs&1/&JaClj&M!cuk8=**]"DEp10T:Y/kaR^`(V-.Uk4?(]&]"Qtms\(@uF
%Uk\rL>]4h.BCG)56H`<J"b(d`9bm*]`=r/lP=ikYeWN,<$_*;oHH(eiJe:qP_FDpa8p[(P&sp^QMJT)F9e*T%9%`LkbQ$X[-GBHJ
%r"KS5nirXXB4jAB?iHrRb40TDjaW)"ReQjHXQ`YI\lXAFoL5,H@2W?#p]'J2Pu>-i:D-@KQec]YjaU*RC>]&HpK-tW5M]u,D4WDa
%nk:r)pC_mqG+.HthVtE%^U,T`c1Ap=s#9Emo&c_?nsVbmoL>D)h5I4>K"@fuTrdlmG7q;eZ(l\M#d->`eN7fnN@-$OaWt+X!pM2O
%d94msm,+5M.3iY7TLD!bYA_=W:gG.<2eNo+Bj=2L8u`VVVCVCD?`FikVC.4*4f9;l_<VeESok47.&i70FE+!-JqE;RH-rT)OE-*,
%Bm3*SkoNU^%`tbPqppi"0YhTcf/qh#5Z=b-\ImG?l7$rYrRE.FnCWorne7Od%@u"eSP:E:K$cMXgTfoPlN/_%]RVZO\kZ[moN:9d
%@B5[=,DK6"0??-7E_#W#WaiqLlXiMhEIW%Q+m)?B'[#[8&CADn`9:sK.i`'7!7J7D=bbK1,[QPcQOtZ.*b_6\<Df8a6=CZG,EAXD
%V=c6Xn))Amoq!Pgqo:Ctb12!n.;;+_$#3QAl!08fp\sD6eM"W1:[gL^Y5UM*)9Le5LN2#sJ55dIAP@7:eUR,jcVs<2'+::nTLl24
%eaEB79BX]*mJF%2F\7]gqq>@mr*Z$!TO"VPpM2;L]d<QIHE2HW\#8%80-;3foo:\,.%1B;>Z]#16@e\f=V-Q>TZd9a-3Eia/^[S"
%V:$jlJ[YobAjW(qI35jVNn.^i,$QcRaW8m=*o!S/;B:JY`0G%B75OPB67Or50N.#"lUe';&<q"l7mo2IB=L<BHBtI$XA_g"Q&bEI
%*PNn2Fe2E&V'*^&[!El1mWdrr'KrLY$C>H>UJ^1;7oVs$NlB)5&XV<Z.?tD]b:!`gEF\+K]%`8ANmA/UbHKd6gWl4bC<8rq+g`b*
%L,n%_N"@#A;7\@kFK9<[#uM2_]%a"0%[FV0m?<`A\#sZf-6"Rh1JnW*KQ<J0S4s9)mu!0cgt\+<\=_W!GLTPSQaG?`O6aMC#X0!'
%9V#VhM]@)gM;'#FLgWUf%lar39iMc#R]PIM7?r/1]2khe8%-?;dm^U8*P'>*)l>Mc\Km8#oV3HrX9;,IPc>:IGG\3]qCQ`-`H>Zt
%C5%H_T/,!7h+(BR.mV!W9ii7E-;%@g=]K4tWWD5(]U_(T5i^PR5"X.ueWTi8.+H=@<Nk@#aAsHNU+o&bNXJc9/IB)a^ZPAbQ$GM-
%X9DO!]PaP>s1R6:-t!K#7AZSRX>N#>9KE\nj6)^PObnJ"8W'Fs"J7aM:M`Vd_=m)YCNm[\/rH+oZ@i^L7,JbSlY'plY4m3B6?B!D
%Nubtl%t`^-O\quY(&s0CHto!-L^dKPf76l6SWl2b47br?>.7#pqPp;uMGjBbMro]2/`f0-PnW=upeuN^eQ;.`b[3TCCl[Mj-R<S$
%80t3\*=8&NUoJ4l[H]E+e!mkDa9OXjH(7>ZW,Ac$b5j[XCBtXTSrs2q6jFI=-(bBbHCp4@UFrL1<65/&ES[]r$>8&[*9H-#*G,Aa
%R]qW;=8k7cBkD6T3qaRO0!8-6L%,KKHM.D%:5or,73>Z%fN]RNh9AS&h`33YG5@nVo's*b2>4esGp+A[UNCO>^61mtVsE4/a1'7@
%js$uub0W/>Y-X^!'UbLqFL0k)%_=!jkt)E,1LnLHHN^SH:W<;o.:=hPAbHC)4YKAHIdq?;1(r_X=rJNtUs?-F]YUQ4,R[ITU6[s?
%4N#SMQuPD^6']0!WX'qa3T!bX:IVh>:@5Pm4f5fh>KTA9_XshR+W"#[<1TM]<*Lhnl]5QamtA8?m0g]`:i$8,%@[,Nd/#eHK8O1_
%1khElcPWNiht'1/BiYn<6o9lDckD85Gpi4j_^t]"P_jQ_`N8:nSpo'0X)H988Q<"NQ',S%/4gOu6DY`c2q?5)8^pt*-l[rm?]qA'
%#=nHCE`V?0-&Ggn0c+dm9!p^^,Z/JCic,%D8L94>8Li8^-^H%#Ef!IQU4t%t<K_Ta-[f#e@Z'Eqn[N*_.hm'Y+1nUNQ(^'ma%j.G
%n4)NTN%848LdlH^Mb6u%.hlh6rOL)YO$2_lE`o*mYhb#"(#kp\5Bp<SYL`^>AVEVYP[75k<U=JM*?D%]ST3V^r_opO]'te7qie_\
%:m.5ere6-mn^e`AEpV7-4B*5hjU+"E:HB.GZqe$WJ)R)I!T;3;::3D)*aY]"o?oB&CjB?1iM"2YQeZb/,@'PXKfH<rD21%t(6kAX
%'.FTG3q'pQKu(%'*==.6=d=ZO%UmtFFe3^6U&&V]2gVX&cu\0>3eM/p_s4o(:f"df'eVW0#UEc^F2ZGg??iDtgS'e$G4L?BVjGG0
%W>H_lm8.;R5lZOnQZAP?$P2pd;g<:N^A;]%!Xn2pFIisVHdW^8GUS+eOlVCh?Dh+SW1HM',C`e5knbD@=3#8a&W5*nK['r9e[#rl
%@0<3/G2XT>c/[Og($>eUlHsb5+cb^[[R7HiNG=?[oYSN;bN#a+Di1pbeOhGnDEBsP$E.6TGiCl?k?`B]L*A5)3+d^t00D@0lhcVK
%&!`fteTM9q^[P(u[_j'H.'UlJ4Oj"AY&iR\$0?/.>E;:`*U8c$\h6*-hc)i)_F+"N%^CH.MZ@HB,@)q)SdQ)%hc"dIKnhc)g#EF#
%$Y.Jpn5.qr3/X`.Hf:[0gF\a)5<.iC6eP?.[iMKY\>NVWW,DOgr2%"d=T-*(h8`5qG2],k*%=r-/.&;IJ)R(^'Y->qZS"A)LVebK
%0?NDj?$LT6#KIL#n>Q1P(ETTCl:\Q0cG/jF4Uf=<RnGCsPa&FES2#k(49*/bFmgBDRu8m]<;5hNja#7-LD$?G9t3=Y_F#?Xk;=kS
%e5]Oqq1XUh[iHYLf=:<(TmGH:P5oZX$P2?Q!k1[P3:.V#*ie](YXH,$_F)%IZLQ/F//u,-&(PkNE&[',68("?AT'Z[Qe/5*&k8-1
%>nj_/nRNHFN3;qPdhS/1NTf4IQ&+r%k]BAfS+9ma.,SAOjcHU>'QFjT(*Vb(Ghh6/SMI&^Mp!;ACOOf<TFKk_:dL\QY9Jb0]VB30
%DJB;hk/h<:Ho2N(p,p8MJQ5uFdn?Fr+tP7>Hh=l=qrm8XR94i,TOlTZ=e&-c3O?sA`Q;olDL9G-NF.=C%t*Z?9]=VIs6rq>ecOTO
%k;*fkq+'B[ZL)s]dDeG^i9t;no4E#JIgNhb)q8Y2gTjX?VY@IJTDQ<=e=PjN73!)0YGn=/[I&[VpN1-bHo8XQ-I!m0V%C<>q(.f4
%L[!WmJ,Mf)dJT_:dmUN>D])jSDT_16Cg6VCc^Z3#b]AL]In!4%+o"m/l$gQ;n&"Oih-Ds!"DDt0iFeFZ95N6&h9L52Y8k+7$LiN#
%o^6K(Dr?Q/abpg0]kcu0gl%suD]?2cfF'I&Cca*SDcjZ]V,QJ'3I2j+J-#*\B\I)SWfD4:)47Dg?0e8J0Wf"Iq;CpAi:cHl@Vd%%
%o%#1k>h+(<D#CIj+mroq.O:!fZI-009[jpW<aCWcq2Jo&J\b?m=RdFOLM!n@Foa!&EH8ug"Ri[Pg]pEYdJ]fmmm=,sI*I[i;so)3
%.HTEG@q=Y<?Hp6_HsK"J<MH^2[D1//TQ/$YS(<mXb?Qc:n_!"J=BjJCVIF*]NQ.5iY04HLoD<m\So;#pn.QXXFl@qK`""+0QO%\H
%jB</`]`f`Ao_,pFm1-YMN.c?Z4;JWP#%S%B^t4YWPp6Ca;qcc*Nt1dsW3oD>I*K74f17igpV):]g`g1Q3URERV-#3m*9LrGoog9<
%ZP@s*fakSI4PTB2Ac%:5i5?^Z6PTR9NBc'+-TE"Tp8jA/_TIU7)ua'j1?8GK3q*@fs-S;o6<?BtMP_'g22'(MFHSi_^k9urY32Bc
%Z3Gf(_gr=GG"CLL#Ld3o$:S)h#36t=ZA`GWI.Y3$DHJp,oSeqZ8@^Yiqo2hR!G*q@N8HpigL8VgdSqQse`hk'5m*mAf:#CP+IX/&
%5-JN5Y)+`9*W;4DcR!(,?qYr9+Y/6>`@`dP'Ja!1Oc5n=;@Xa)eZEcO7il1fYcjLo_Y6QFP-,m#Zi%kR9#,Fl"?,t&+1eH<CuG!u
%mS;BS0j2DT%6^$dnbhtGjQ=IOHcnaXq!R8[^cMN[r.`hR]mEjk3:Mrm_]"!pnXo^fJ:)/N"CFB`bh(\Wc2NK&W:UFE&0.>RN9=RU
%mYpJZLC\lrS"&uDq)1RLkJ%%81`u)OUP./3-G595IGPR@K(VjF9TjFM^4kC6AVMK.@=s8MGV9[(FpV9!&(V)`lSnUfH+1Rb*r_?>
%[0(*pVCrTIr7NaPUGoL9l==u0Ya$L*0<Hq/AbX@J5n0STaJCM].3@rA4mV9dS4;[opP`!_c%$3Vq!<:W0]=914(*/%F#%9d5-2Hs
%r-N&1!i"/0ZUY)r3%%*Q8at[".<cV./)\5g9H59%VV4$,rH)+7Ce`*YoQ17[d[lc+quT#nQMBD3ablB'f;,g.r9])HL@k>r_5D1h
%TE#G^d4au^Ldn*PQ!U3uBp%V\q[mf2$uO\N&#>_o%NacJ"$=cT@YHU<%E02PqPP50PT6(,7tcB'W@o\.^^!]m\n0s(SIr-^Wqp>H
%Gp;R-?*njkG=1TOA/;X);ClA[bCj'<Ck&#t"(-27@@(FHC5!>nJdaV(TWj1p*tYM^0Z0(],?U'f"#;aLMGs!Z"sJOcFm#@UCB=L9
%&?lOCT.)ZiF248Op_tKN>uKgV`I0tD&oh]*Di&M5H[F0>NLXb/AmC!*n4i('mFVt!@'RA-\YMCXP]j-,<cn!n:rE7`9`O3;)p*k*
%N]c-WMNi5@P5o8="&=t1+>OlYP82FriD3,?49VsF>oN.SKRMh;h'SW9bg!2lS1A.,`Ma&*#GTR)%;h$2Edf\r]7<_jS_gS`56)oZ
%HsdB4qt5/6i`bQd)D0Q=d6';0bUo-iI'Ga(Upau])PG3;QEqU">Bhp)Q0ciAJAeGSTtUBH(l!mbKCMXbZ"I#'$_f'a*p;cWcF6dn
%ZeU'S8@RL^8PCAs3"%Z+T#&D,6U*-4[GM4`2L)^SgLhVWFJJM(T8_J3"I5l16-[s;8?a22IeVu0Y4t*3gOFQJZ);kA+M82a,8W;)
%GW:&qcfR(=A9YCP$!/n;lSgU)@BcY\]W@b+FCM8&f]?/%8i?99joU*_\e4hIj@Z%1GW-5MDRiK\PGF+DPZuq0l.PVT9t)+Y+fCku
%o=`i=0;b)-r)_^XA*Al7ej"JO6^P(tj5T>GrL$"XBXlH>77<^ZdY7$_b,I/(8HA]OI7H%Mp!_R3!1H%K4fec%_la=1mZa3tRkjqD
%D]Lf+JV9]5@u!XmO`C3]QIhY6'i*`j1cLaQHT`q$CjjLOK?46amIi'qbN=-87^i2:_Qns;k+!f8/sC?q1bte#+):`V^4F=!!KM6(
%SDaW+^0fuPXVZDL)u(_S#&*'%%KtP+Ugr)K`bCc2Go\(MH>=mDp=%PQkBL69_+8e\T_Th0N#\ad7IH?Dbc!Dp1!?iVRA^-)rA-%;
%^+SP)AB8%a`F4[`c%PHAEFA;@.XKR+X*K\"\,"Qfs0/;Xp4]+q3dTg6psj2&9Rjg:p5o_FICkIVSRH0MB\kR?7`T[NJRMk5ToBO8
%=Z8Cj^'+?i2EG0u7AH-F*CbghDh]Fn(6A:m9bm0<*pkZ8G0d8gr"lp*6cCI0Oiktj#<LBj\$r>ZOmYKlZf`anV(7aS):6BAb5K!?
%C<2Up)8FEVFrh\hmZ>]O9@LnNGgq%9UEjl14[8/nkGd"_h$75aFnFB)mcj](T`ZgF=?.;k>OLZ_EsDmH&E"Z':;FH8`FagcB61%D
%WPbZ$g@K[mY?/1fM.:QQA]B,o9Ig_qH#)SIPCL`*3`E0;TRsI"(_u<OKb,'q,DJ%1)C8X[.W;NNY^?*T\F[/BUG(bT)!*`.qGR6;
%8'RD@B58B[Xh36TbKY&qFha\@\-H6I9[56(/%?*.XfifYW(^+Y:BkQn=6?R.Hl%PVV$n)9)6/s7pqR'`:E=m1NRml?eECRgM*IeS
%UnRjX*%-VN>s>AYp-OMJ5lBn9c0T['9)]TkC-=eI^f"tcoDN'.Wa"$Q:[8rV?q,JaBtG$TlP_Il]aBEep!3eZ<:gW]nh!f.3-oVj
%d!8CXNdA-5ltb=u\S?ORqt%<9?I?&F9);MPHTJ(^Le\i`@m"sfN]OmjM<j([,]$4XB4h_L%%28NVk##6:1%NM1/7L:CFld_3:5cq
%-<N/]lO<4.TThBlaqnpW9g[7rl:WC.$jKYg:HXj*^YZYuYE=5-i%5'A*dG"ur]O15Vqh11F1N3%\oJm'Wt)iVAFs<$MrsHI6/pm3
%U$Ni:og:]4jS#ScNBaX;T\%mqg*=,CS\;t*^<j`OT(Eo/k,D,$c!U3H%,*2j^F4-'TCJcJ1`:B3)GUca4>\uJ/k6At>h.<uUQJbT
%s%\BJbp0['ib<#Yk^88p)1Mg7/g35F#5U7pqD)cj2db4YoO@<j\C+fC,/;dX-NM4_dYE93`,>J`[]Zshh/(3YN1X.qaK7^F+YhDZ
%V6a#WH)3[Vld`XqJj3/I*](4M:.*p':2=KXB<rEWbMQSY+,/Aa;)W5?i]3gcZr^M<B)>1ZR_N-6=pBC!HUdKR8tq+KQ_MR`;#Z%!
%(RZ7mDYDVhM68i8@]T*]bs%SBAo@V/m%^PpiQm)O;mVO^Ss'5*DYDK-6`]h)c9@\Ca9$j7p9jS<<G!=Ir=*!%$])(!_ddP.c+nsF
%Q7P\!BVI5c#KO3]1W^rr&,r\mnqEt!W;-$6/bKiSld'bW][=rWL%1<+.%rBgqCi7@@pMO<)>BF;&#4FR_f%%Jc]%IYei%p>a9@G_
%?aruHAA3=@OcE3[!L'C0T/#krp#t??7`PBN!:Z*;Jk*n["@IAbiTdagR47Q,U'WV,X)%IR&PXB[i-oHY\_fHTHWF;&q&E.S%b0gN
%BPAW%YemH0,"C_oRs8aP@lIGIguVCq46B[^d<roGRQRf?q*Y20CZhlnZDHDp")_h">c=:8G:4UnMRhLHc%@ZKRBqSThLe=#T(^g8
%ncF_6DII`Mi`i7\!n#`A[6)^!$.,*c-bmBg,-VJM[4fkaemDg2KJTfE_pb<;e%n+kj,*8V'*31[-c/!YiFEi,T(6<3\;qU+*$+rp
%JI\nGF6Rtjl9n04k:8q'``0G'Ms90\l+gb>b9bNBY]N\d_W.4l!XBqo!p:79rO^A\4j9"H<qe.pB<9EA&W5JKgYX>J"IE'($odrA
%:p@gibV<)HUVK\r0Q7$,PXQ&^5bfD*3`P7C:@LgjbX!*/Y71+[@>.H1EG3UJ0GgCR:X'iUVU0VA5g"PBH7,)&UH4KKe9sAni;gG<
%63q\("TtW2o;ndoa;GbT?frI8Z*NYFT`Q@B[p:Cu4HAdA?+(D%Cr+,bO,6`B4#CC(SN$\toJhQhi/HEc)&^A""W4u"KdVhsk_:or
%9/<=Dbu$\PO7#Zl#V8t",a@5CVK\#ES>MI)nVD&j`=1@Ti198!p2.'XL!8,j[Ng8b(ssW'"N%%t>FQt;WK!t*[+I*.4,Z"NY"P?Z
%A6>*ARZq"a'>O.5F^*Kd0eU:&:&dIdJ\t(FQ8L\lJJ=Y#ER@%/_6QRfe+BgA@^>.HkQIGqH[#NZs5):bMj1S]fY,mK/[\=^-[*+,
%-NG(XIc)n<*o3nDkldo[@3qQ;U:!4+5.VH-.4An1+Z9[>0+pM]bpZ^eiZO/E'`Rd-RE!!jHtG(]dqWnlnZP];%0%6)`^N:JFbu0(
%K-H`!^V5tspt(R1$NE/%Vt$sKDME9c"!.h*Jl15Z=5&@A)0Qogr`mn.CZc1[694rA"O!+M7D5(:OJpFF7Pah&Vn9*mF><PobRPsq
%T<)844[lpHG_9@[Z#C=478Rr@G`@,+1e_nI)oGe@):/KqHo]S.?$mB]nOiI`U'X`h!i#4F3&$-`HK(ZW43O9:4:7GB;diEfo@;W%
%XGCe&>(.W]ghVB*"ILt&9Y6)&Z(5-N.p&7^Q7`sK3ldtKn\'LS!c+Kf2Eh-Gp^Q`FYG-[JRWZ0nY-MuWq5V7a]DsYE\+'@o-H6fo
%P^<tL#nN+klUKpiZ]mh%ju"O0$17iY_B*)2^PO]h4HL7"U:NXD)PH&<:>#gAiM[-[;g8:UfVH?%AN*im=f;lcY[I3n,0N,UJ2l1O
%=9-mQSIIeCf\6+8aiO]s%Q63b=Y76^'6L>ppf\nMD5@L8)8iXp#-KW4!$4$sb&)0%fs:NN$-afL-L6M.<R2Br[REi3XZtKQOK;t.
%iO^ePVo-GRbb&#BRe64fm^+&9YN?VhHX6_`PJAB#c,XKUh0b%OZd[:m#3Bm$=7;7<,MpYBXimq'OR7FPFMfI?I,gDQ/.;A2@"VY#
%)KVnZ4T<XKHlCeKSEp_I,^eFfI*-j3MJ+4C0N>]<5-a]@S-73M@=qbTV@10fGehOWc0,0.T!g>F#,^`3gR\/UM_EC"^sGbqcR++T
%RQJ<GB';lG8U,doME-/GF7)?l+Z`boRq+YMs2>J6?o1iVrJ&TL]A_(kjpn6IO%Y>i9Y(1FUT/+Vo<aMQPlH'81S:nCmjC<k)cp^t
%FpDW$_&`bEQGl;\kC2#R`KP.gqRK<cSbX9+K&t7/(tJ@7]73)RbKL7sq(F4-f3(nocAeEYl:^EA\K,i6-.S@3;mT)":J(4*p!bqE
%TaZ6>Wm@WA?N2rds.P65BF"jU?A#k5=AX*nSkWfIKB)*tfZddkFNNQWY/Y7?VPj^lmsT(:3\78\h@MQSe+IOV'Fs3&d<\J(Qs8,D
%r=I<$G#g<$U'*\#8@0,V*!;?#M%o*k]@u9fpHs$8dZ&#5VQkg][V3_75'#JsD<ao/9A3;!3T/L!'8T*,(mp8XViVo$mFsF/m>3hD
%oFt6o-`+]\V*+imPWNCJ'd)D;Gn"B_`gKM/a)hM,oRC+8q]T-uS)ZN(PBcVl#e\Bt8f;0FEYbt[,7j]>G:)c1VU0#^WLme_'ie2,
%,7gU5*UkF+TJ./:#tYifO[ufd<X#?C/(BG^9's1<gFJ:)E-':GBW:IV'X9O5Da:8W+sCdb:<l3gcKNb^YS-n8AtA)!;JYbZC1iQc
%0gF6tBUpnc^NUB5QAi'&!12Yt?R^4a*Q4t=TC7@R[fWX9r[aCKr%&XlYk#6SZO;7:H2PJoV!u06.SVWSY?#hSQ#HJNC0pF_C'n5_
%J+1N0IS`aI'86[/]^hrP/&@bJ!j#$3'RfZFB-@9DQj<V&B3G=K'fp;P:7asMJ7U9.OhA6W,@c=.#j@7uf9Xh2KgT4\lj5EhT,u:X
%+RNhaYWdhKDhAWEcqi\9dr6b-5(^,;jQM^N.E^H,c($uGE*ihq&!)fgT"=B6EI0K2#89i3CHD)N[]i9QI+4-,)g=KZ]W1B-9]i`(
%`cM-d(^GMK9^r_K^@1t[(#I_9M)j2)Ri>@0UH>quHJ))LcRuQoRC<ZPlmM6)$Kh'_HXt>j$A/1p_/"eWhVP!NS0[1_*GQ!nLo,*-
%:\iIK]_H1qZ10LI^lMV5_J&f7`iP1VH?^mS*RjVqs,eAOj1@O?G^]8PAleh^\*7PmJCnLbrKJ8j(>QB[,F\(p[7j5?<67&4akYm!
%PccmXbk[qgL$ZW8\nd9_)>9OB@mPqTVVF*#NGnq8Im2Ei-ZDMh.r,M*U)E9KXodi+/8"I+X!)fk(OsF@Rp094e1tYe>.Gqc?*aWI
%cg@6PecePCr79u$h,YU7gQSkOG+?\6135/YFMp*NSW(P*Mb]r!IhRcj`g]KVV&$m,C%/JpGTi:Z=c6)tI5!jSbhW`PBSqHO$e-#=
%S(K*sJuE8A/.s<q`,=4&!uI!&D]!Jc.(P2Mn2VqRfGjN0+lnin7S0?6&Y(LdJf+BXn7^iO#QuZJAB)1`"*$(O'hL>,:>N!2AW8&E
%XrGB[.b$015W'Di^sPd-oUP6%MjU8,J<,^qW/3;6;L"Wq?qj8B"E(R1><YcS-'N(O'j![c3+dFB%"$QiABo*m8.u7CDf6<2Jmtar
%mZo-'49IP]l8IRd^hC3XBcb:<K&&eG@M?gp5^\[nME.@1n,QrWk<S!PFDrc,%C2f<rPm&Uc\H=`c7A2IV8qV(]B8JEKAS^KnJQOB
%]PSk!IgmWph[984p6B1g>&j/&gXn\^B';3T(WGQgb@tUGOPA<RH5))D?T9&9T,!q-D)!'tG$u'aPP,GG,+uG"7tg6L\B>K#`?ZR8
%FF]C;"s%M,C_K%$h6-9BI'>^dgcl&7C[OABUZ7*>U;:]u:?kYKB!>J*Wn@sY?BZQAX#^Z+!&cqekY)gQ7joqsG#qUVA['bd>gNeT
%G^5ka_kgicBG<Dh;?L&=mRmdOLd^EOXQ;I!2jqoh#n2U^oQ;bj@$:Ru,+5@F\:Ur)3##caSIpWU%KJjQ&SL&#OMYu$Qk<]jc!k)^
%%$D?>l+#bOeoD=Z!4\7VD&=<7e5T];N+M&=E\N)h_E-H-(7qiV>]-%XcF!/]Wbab;knU[kEesjqWK#)LL&dBWRTl(T:1/:T/=3#7
%3o+T/I4gjoSE;.N*Jh!$d`lKDmj4N436gj>??Sd;j%ItK^n;>AT;WE0%0=DF*iT^glaX;8:9fsGB1BNd*GhF3KBguso#M+l*WU2j
%P4j4??cAbTlOsbXAR+$?%\4`%LH-)mCIP.KibDS(G@*lHO_pbeOO^$RK#/7RrF0Fqb)pBHGA#3Vk.2ne0R\-SU0Tqd16Ul'U2eIr
%&W>Vb>pM?JVKhJ&nK$!^YFXRA_)?&M?B5Ja<7dYp>MjZFP=YgEWn<+Y$j`O,)A`s*1V6f>TP%[trDI<uhC<?jS%"L.MK\]/eDb$8
%bBsJ!ATu(]d6/:P.UcQEpnhIDA/-/Y!=8ScM+9Z$%,4'AA=_?_4gsmK.(QT'H>M2))Y@GK0.]6>YT8%KI"eX(H[qeBP[#ncC%Grj
%?YD+/lM]T<*`1pQg$@XM4p\q5F"DBn%B<E"'X=qM>F'5p&>iEl_a(G+J-0&Y\=$Y"9RCOV?^i*KS"A:bY($6Bn@;gaO.DDIE(dc@
%(221[d%%K'b?mJU[+u[0r0p^[MBG?A:tDQ6>9jUt%l.^n)S+;kdE$1j[lsY7lZcOc]'.si62#jOgS)ZTCfk[4S+B=V`3AJqglGQF
%fHr_uEleYPI<sP=l*0JJ6qUc>?c.GUq_\!k)!q1GCJJKn*o7G2^:(SnnbeU/5'9"J$OlPFPPNjdD;BDq^)e4ZJ(`\"8$Xe#-`(">
%GT*p-bl*[$7dSkrB$6"lQ[P4i'KdfPpb_JZT>n`c`J=u+mXP1UR2UX)MmQV#Yu&Vhqa1!`m[5YPha;;u,+]-b\,l+?AE1YQ:B&F/
%7gtm16pEJdXZ)!ZcHWn.CqIt02F)=T(gCneS!.Q!L9^EjY]k&q*_L.V-f<+N`qY!Fq"Z!/<2]EpP\a8*oJ4p,[OMgeU$.u\49jpi
%!rN0#L*?h_2f.sf!oQ]Or`TM$RUu6f,T%l@<^R`CdQMfChWJLGrG9.cd/OrWkdU7Y\QR&mU'@<6b[:I",'onBG[s7B!3"j,9FP<8
%PCoY$(kDPYEj5ZTS:gd3Sdc5-s4c>:p#^C%f678n%j+UN8<!E:gb3rZ=gpr<1dr(i2N#@Z84HK-M#p+MEIWE2>'nS`3?OO)U@Z/#
%;5D1Amb-2LF-rG@A)tu)mOfTi]6a#<eb.bC)f$/uTDdosrVSDL\Gu*dNW&X=0CJ;j,X-STrr)A84PnpXs"$,i@G0/6%\N]+VL7u_
%ht`&N=5Rr0nUl&#rl^;Y>eV7rD2Hj?+9+O:o7)145@Ff3s8$*:qnn>Yn%O0l!sSNmqfpIXIt0c/T"2c%pu@k<B@":VHhPuc:n[:V
%*7)Csj5mllq9,,^4\h&eW[OLN3qgp\-)]8S+MN0n&l39Ajq5=To=sas0&PO`qWcCV^"<5tGMW7i14K/hT`cIDn`u7in+BW4V@P:!
%@k*O#iu]@e`]lYTbobb3m/)jQGLnct[r3q'?J^1]c;-JbNP2r682[dnlXPtSs))a^5O.aGj3nRU58=+[UK-7;p=8Qda")[_HQmh:
%'E@Y9H[gD<r8sbu^3"Z>q[S\7G3n5EMp(G@pQ*bu[JSF7_V;g;SNeZ[CWl'/rVk'bqfe)6`T[q06QD_qa,&dSb;XI;T0=k5cH]3Q
%"Q"j),D>eEYO>ir*'r3W:I>s`9-54Aps./\6NlhP;PTe`HUNV\iVlV?'!K)PpdaGdhr!8+f5ZJaV98ZISq]L&D*Pp#?JN2@ro3q?
%fZ4ogam^)7DQdE]Q2gh%lb<AWjitiA$)bC[_Q8WrjbqmJ=8LtK]:7"@S*M_Vr6=Q:[s.S9H5cJ)&&8%miLBiMrLt:(4+-WErq3Jc
%\,R',rP?+`D\)m@hsPH3-9qEhZY,p$_k0oaiUtm1Q=At50@$0fo&"n=pk0WI48]S<4?n0.8itVdb9<1!PUa,8;^hU3SSo/M<BOF5
%<n4%V!9KS7lA$nS[UJjm;j(I.S9h91V8G'Z+]l5Z=+"AEeRPVeY!['I1>rAVZK=tnjUX6t*WIC5RlfaZJr3,8RA+T3p1#Vp:Cp'1
%4p]Ss]stRB65&?O3uV4^flugs6^;/B,oi3g%7/%sO4!'n2Y4u?g,d_OQ5Nb#(H.$eMgqs$gNsCMKFbt0Ce(*be@kaSr3]92k?0<g
%)+Dirq%]#jW'62N2_`E++Wm#Dd]mt=gh&Br*TJk4+4k,hkTba=LY@i4`XU]=[LKVrrcF40pC`L[(KkVKa&9TPKpMu;lmE(WKpmih
%<nCEkaeZA.%29+MkJCX;-&@T^`e4P$kotEi7A#S!0pf0UA&)ufJSe$u_ou\am`ou-_h9#W2]YNs]'B[bA*Qpe9g,I"`a"OTlO`G5
%'hU=p/4;>$\_,MGp#p_plVJO01Km9Nj09rpp)GP'`IcQ"UET!6/Sm85M]Y;Lf]1VrS.Y]tMT>/N[e85:L'7oj*"@E8\W.+*a5UZ'
%[LNDYr-G;sAL*XMa3(jd%(XeTeBn0J/0(DqFWG3aQ5M&0(,grR[@_>UloU&Za<ItM`"a#pE]Gl;;OAR<$mp:)CKUQVA6#er)@T5!
%cSA%S+37m:W>&_f3L<Y(dRZhY5-Ep^a?%uYDCaF1g=CY_[Gfbqk^lnESA!Ys><^&1g'$A!6=hqb==QBXLs,F=\/>DI0gO*,,^8n;
%UYdu'+m^Qta-F4oPOO+dYRNGg^!8O?D,&b=gU^1i2gh'XFlc#@./u!e`cuo@+\VH@U!T(E+?$\O&fW,?<V^R+*0^+NX>,mj?;1^O
%gO+aC/'JUAIPqiU>ZtB%R`I8C"NS+9:h/l'G,RM&jEk-_rY#K-iYt>0+OUfI/lDiFfN[bWKQ<?J1Hef`/Zjh&&ORX$W1[6lbnV-U
%L6?M=,dBAR)$b2Y6.EpnQY(8MWR1U)Tf-GPEIq\/gJHYa+7)jYi$\S&eri,-?][CJW=B3$P@?tn#dQ]RN.DQb"su1$E$9P1a(L_U
%41jeseU.s)HEKh,F::&?P'YJ'mk#RqaG-*J)q,Pfk!Yb#?UA;%Ct1nn5S=NR)9F/AYN.H=r.*$>R9sI1PbT.rcgV>u<:@@;*cCi0
%r.+PI(Ri?BR<8e18do:N'^9Q?M(L$N>2J@1=gZQ7D6p$JXm8SuE_1=/&RAd#$1a?%UPDc;!`F(adZG!0>Fn_S-S-r#Sk&MnpS7>K
%hs=Ej^839m@J<?X"B!FlPTF!UR(UWR7)F=K6p)WTj;As`q%I+XY5Y-DJd(I?oK(>TQ(YskPtWDUYXn&YPHiG(SjJQ.8OFC)Z,i4B
%A<Y(eLt-s4An&:0eJ2n,S#+D[9<dj^G=b68iD;OZ(9DcjGH0N6lQTQmk"]JAA0\G-%Kpu"hq+;9obb'<CK2#rEP;RW&eMh-\Oo/V
%;tW6nlb]M1/*o,j%jW=Qjs[Y'[TZ(^"+QoTDG)0QTGUVQMR4q&iOQMY$KiQ>'P'gYWNE*#p#Zu<3N6'c:dI1Qigab2%H^TOCkte"
%dEf_^.S#o+cum:l3bodIh\%k@Og2[O)G>+F7PLPX!n),27(d&A/Ctk7-%t2ene$dr:5uooUk@9:I\<YQ2C\7UWC2N"%r$-Mb,o`?
%/Kf@2[3dWQ;l7frN5!jUc9'0U"<D8=4;@b'Rmfk&#tH2_6j76>&MkSeM]*s@F,`^#gnpTWTaqi*1dW#!;TSucm[Bsg8NV`!fjO*4
%P"+usbUJAU<6pAPA<T$`82&D8_17Fbd=.cVD8k=rU8aJi\Rs8Y6le+JO^O:8U*0TqFEp`@(DDZX3:tcN9io"\:ND5hbJP%=g[_p5
%gJ.OHf(ZJhc5$1@Y9AC0a>3"V`N6h_Z]CDKMZ_0r0oZ=;Mn%"-`PZKTWf=G7d60M_nD+=$B1dip'G$h*heZ*2;\`8l[Bj?P?DZV[
%P,HJF%URF@ck,8_LOWrAd[Eb_H=gF(PlX6O<G_2@MpU9Pr184C*%O-b6p$PPiatif5`qUpQMm>>jl5J]Nes#;,(WKh[NWhlRCDP4
%p''g.qDB@:<O.5!iEP=L:3L-:7,SI:$>XS1.[Pm)4/aE-pJWAOg4H+9l'?&jR>@Z#EVP\8TeJGQ%lZe@%tDUjKg.s&/[XmfXrs[g
%bNs8NI]V/l`X]I'-L+K,D*d8R%jR_MP/&VSr`@"<W$mo7=LH3f`!^7ZP"gn[X&"?d(=lW]4HNbQ&m`j_&qRFofk#%?(aWn@E3-!/
%HXph?N[Pnhb&te;+AF_+*_*\>]4%uKm9JRS"`PV#$6s\qcPi*sY(ou@r./dg<@&$-$GfJ(LItqMCRHS^I2fI-eHjk[CGdH=XI6"T
%)Lj_Pj_ugi5Lr6<HRnRh'\u\!M%e*iKdDHi7>pI&IFb0P(7:eUfkIr/e[8@0Gss!QFJaj+!KX3YT.+5BN,r.aCRNF>[)AUO9eBjF
%,*+QJ3fXM>A#p5?lpZ3:i2VOn81s5E#'JsuI)RIIA4EcKSs;m7%Z1pt9P5_''g'a'$u@&%)Uh,(>#r\!;@J+O4HnJa:5gK^D?m:Y
%)$\bdIRr`9`OG]l+K?&K*IUp&A?LT78FMMe:s'Er`Zr]=As_cm`#U`g75C44r@50HD0/E2'.XZ*_4%r7q%;GbBR%s?Qu4B!V/gn2
%"Ogqc\O.oJ1C^XraMW?8\j$Gn`Te#uS'&W_HD00sR6],]P?4=Z]2.:N,HhK@gp%W#<Mns'8BJFe.Fb@<P9lFpL)>k'Wl@XGXtQjR
%\N^mI6A15lbOT0*7OA=G03XLi8lS#W,t6FG"j'usUd=`.=]qpHLO.rP1Ql_c4/M,F;A)\L*Rk6c<,5>;Ju$ndW!1'q\;Td18>Coa
%a=-6a2R7E.ekjn).YWS=&.3]9W-;(o^id8`?:!j%?"kDpO[/[r,!uZ'duKSNHdi?]=lkhee'r1Z.L`GGX@FG1O=h6u(QDtKV5d=4
%)H'!1E`K:f`M/O>XkRq8r(NT_)/c00<U&3T8]CBq[ZHB'frlR2[@/O%[DnqpVmHt@N@?.uet!a@,;tljQ5#=01f80'8O@.OMGjQU
%bDIOkd;U&MX7u<:B[tGWN;b6!4cYHJ6'*9^qH,3\9M-R6N0eolLQXf9"rhs<_b<5TEJ?)W?)m3bH%9#@j%=2flr:)l&sqOs)+O(:
%@3I%=R$;9[n(+h3H.6\g!HX#5X.,S0FCXOlMn.9-[@!-d7M4<Q*/>A9"EP`_W?)8r-Dq8u%=4J*/kCL4I2\-JJ[>Fp92LBeKtB69
%26&0?eDH)Y5+>\G`Q$n!_@F15"I0.Z+Is^.*BHYo0fb(2_gi,-P\jJ<<;1Z2K\^ijOZiT;AXIZgdYpdd',8cH8gEa3`G&=B\;M'D
%Y=(&C+U&TlcX%iPj0af;i5H&?@f6B?`<s81+Ga_3)@7'Y&N_=iPB>_sb0l/Wa^j5r\k54:a?ShN)e+^bf8^2)[S\UOiWKZt7-=8(
%F8UA96N;JJ8qTqbW<BF_4(3^R!PoUpeL(T7YTdNt8Oj_m**mCoY:b!+[)@2.In9IqTq%`/JfT00eYPlLV\r?q'V1K*O<9TunfrbY
%ZUlJ!ia2>A-&BP/qnh@a,5VP3ZCg&!q]/5\cgb#dEtOo.k@,1C3#uO!g,aA2MKRPdiU#a]9>Q;I<&sFUQ'ddqr<*hbFM1@%3n\>m
%8n'X^OUVm1(+6"TH@fNL:bZ<+K]R1r&!,q%+Z-[Yi4_Q`/^J?>pAcjiTS*D=\&W(^lTB^#fk-DP\-!Gk#_0"fKg`Gb,',OJ.'Cc=
%6g^h?g0D_:p!*^5Hdtcg;'b*-k!5c7V]uL=1OGT6e3E.W6ng]F5r:Q89U[*hDCEXc<#G^dRrKS7(aVAre<abR[:/^N:_QuDgq[c8
%gJHYa+7)kD5b"9.`&o^j$35?XRM`M2/N%E:P:!LbAciXC.O+U(#ch_pX_kY#E;'An6Wfdc'>.T*7bWrH_?nr%[ZT^p:\XV8M\L[9
%r2lsq;QkWBaEF1.RCd2?9"C2b"><f[,SX(4NSYboQHk!6eC*S2,e:*If$4=>k[,M_9UpFT@Q"]T')]0H!AkT:!NF7$QY4XmiO<I)
%9(?hDh*n;G8Wk>4.9c:1aQl1/8kVPbaIllZY0o0r$t)AO6o*FdQh@ol=Ns=HA2:*n2bR:VL(qJtnEEAH&9Pip#[bd'X@_"(SVI$#
%,Thi\+`5[n=0j,"p8%$F+_o';`!BLSJdSYOo6RUJJ>g,R*Y"^W.JFN3U*Kr(:1Y[GBH/$kp\']D#9?$J,*\3%]9)EehQ&YFFe&M(
%QBBlfg=/qLGGW4tW#J@0%_Ho,C-nlU(u:/:(S"7;dh<j%\j<3)o"^s"Aci_h@cVK["9idk#;<O%noGueVPH,[JrLg?&Do&GN1e:C
%Ut2$?;lu%>[5lJ?K1"0o_*>0h_ik["C=;s@WJIO5-90/>W,hPNeEu1X8Ou<m]5<'I9kV$k)Tb9e#%3[i]SgNH6X<b=afY7=q,F_e
%Xa1Tlm'B+q/f[E?b.g$uQSEs7bY<*KU,R8F#EiMobBO0qI3=dbq)+abVkTiQ7OYX_CXi]Q;TK;HEReZXXqI4I3DY=F!]?+Xg'llC
%)*KNgeuNZYRL/jW<^$)rfp4%'3Ju\\N<T^V"\@=,F@'r[E!*d%HfD\4*antn/YNIZ^mpC\.D.1NWiO\.$!0.:rh;,Ob,RR?b@c5X
%,M@WLdr"s,VpM(TR(&qbS[(&8Pc80>>LS*q#p-?-[^gs(#EhKB>-is_$'Ng&h$E&9!)7Cu`8\n>9LPC@88\"R5[YSQHhCDS=)gK7
%\'d7GD)t1%Jebf[BCSu;nq[ncLu^<03#tQiiH$i#MIK)>?<+ioj3GR?.Z<G?Qt;-#Lhee#&[<1$fZe^"rh&jEmWQg=V:a3*Gs:Ah
%,\XU4FKEGWU</@k9W'.Ec@[S2TO/7I)J8FO]3$fXDm#lV#0J+*0H2EqAF>oWX`43]\X[HE>3tohU3nI>F(M?lGQpaui?9e1`8O:,
%rt[2&+Z;nAn#G1O,hsaI.C$=<TV(;R_-=S$AqGgpYcpQMn$lgceS)I1@7O0o1;/bq[aT4NluY<$2f1s_7BP!3K0%lWFlNj4AcipF
%dY$?ehR)KPjT7&tn$je?nLoI72>eMj=hn/@M++g<8YM/Zck*C!gOMjEW'W#A&*2\5.Egkqh07rH?&bR)Mp?_R.-MosElT,NY"2rT
%ck2g?^),iWFU1O++D<;)dW+_dG!`&1#K[p?JX?Lp,KOXV3>ib`7b&bR'MOh;SG>K<b;>V/S]];W:g\1iNL0,-ckI;[lr];E9FWp6
%N&HJnp8YK]4%$QXoTQ?Y]0'/Yd`e[2WTBV+D9"Dk%bIGWNc'2:]\$G'cV,MVQJ+DoWU2_m-_oh8BMig>f\R1P;ZW'S8I9=L.:7U2
%A>s"PM_[rjFUZM-JV'em5ZE;#/LP,^!I!LN"5_*E(I>ZJPf-3i!0V)4-;re"fe)3$;'T_8W6AkM-4@tXoaXPZDZU\.+9U#'3E8_@
%E:!rWi-IlM[4%d\d)E/=WPYiHl-*?f8`QgT/l'UMJ@g_\h&nmX-0X9?\=mGO%8atqCI5_`F?1`uRUC:K0"FD*Q8[aFB0hXQqU'/t
%AD`6GA6M^J]5'HW,J=SbL>.G+QY9/=pr$*tBpr<mPOkkj<J*u,KcOP=%#&VkXo)e=^/JHtcY@7.ff`Dj$.\$>QdYm6h+QEPRFdoK
%E@:!dTE`R3I+@<Z?@5;[0:&US]Z6m!\D_hK"%@3,6=$N]GeLfGK<;&J,o.D'0a,fEBf=LTn#k!&JG!=GO,HaB7i[3=B_gurOiZ9#
%4>T]!TQn=Ym?.iV0EoNV)5KK%>S4]"#c$Da17M+^gJ(9.$7)\=-'97^!]>_3ACJ@@GL:Lg+GId@1_p0Z-"Irg>0GiE(;=mJas8R.
%4-D*9_"ic26P!tKnYTB[;,348]8(AO-2Y+Qoi0AX!469mBP>kS,te[SY#nC1UYbejZcfAPQ9c[HY`?,Z@s2!r2S)#aK9_AtYlL6]
%G^kdd6p9H3l#-:=%I>LN<ASs12\8Q96:of$%:Ik*P`34Dl.1_5<RSKLVr!9Nl(^9U+1!QLiTg\ph1Tm@dULiI_M1l5,;0]js3R2#
%,7D&Gj;8-]1s+?"\-jtWW&<[gH&%kW9Dia571e]L0./@COf[/iYf.PP?7>VK:O`CumX)?Yfrs%^5O%T4jQC[fU8lK8h?2N?4-dck
%@*+=M`mFIcg;)Oi,i-q=g^etJXdtJt11riiS_K/?P5HB83:CN($'NBCl_K5b7(uD:Zk*dg(N%2#V'*Js]4$+#7Y'Q>F%F/<8f)pB
%[IQWaRpX8]8MQ:R=WenA"JcIT*kW'"Y%3R_6;mE3_O!h%Xh\=u->'%b!*=35U_$%nj'G8"J@3qL#m&C(BQ-:'I*[)Y$"8<HgZ9tX
%+Ws?l?mC@RWm^a('S;]N2%GGD&5GnmYtS1(8C0HtaU4je3h>Z='XC%jAGS,cT`pjccjh<O"GF/1+GBgFQH,2rAg.t6<f<TG&.f^-
%9i?e)Pq:T.X:W1K`P8ZEOG$SZ@3^.B//R[<gfP`@fb2KUW1qkcP8+..3S.eq;J:<<g*\BRUa`-VX:PtM"YQkf-Br+j`sPZeoNd3V
%6I^g+hpSlTcule$@tapR3SGU0Yes`+_Y.rpcJD\7;@&F/?SYjE3sBsk6V`Gll0YUqi.PdYh)5C2#XI;_iuj&!Lp99.$op(u$$jrc
%4?V)l_$U3YfnINTES34FaU1oDM`pADZk0$rG]PWb+kip0,W0$:85[ND&jnW3&qbfQ!g'kRZ+2A_Oef+l:r5pm*7#11,BSoZnj3^>
%H(c5aN!$Uo-SL/K8ujHo"=RFk8QH+Dl/"B<Z9gf%o+*o`LcS!LB!=U$+!8q,Hg"IpiL6hZ&#'cQ2@FalQmO=OkM^1/YsL/6*:0(,
%=WnpE\%uTO(J_liSek#HJX-fCE"hd0Y4[4QM>0WgSi1>nM(#?L?G[.8B49o6L7:^`@O-I02j*!(/b]WN_FRYM$c7oJ/S6-3=[)EB
%QS$oZLtIUZ/_].;QrNVhD'CSom?O]+RhaW9blgPP_3^D.&.LT9gkEHQ3"Z\3@TjrcDNDGY(8;BGT5!lFcSa\f(cU!BS)a76p6nJr
%%]#A1fLMHfG;,<qC;bsRl4TD5'+nH']o@OeT\*.H!`!iib9$at,"o^S5n,f9:V5$fEFa#qL=71U-c,tE>@[NsLc5@;/J/6!jdY-t
%S;<sgod/Tc]J<ZCM$PX*h),=8UtADF[_XanMe3lHn6K":INNM3Cac5o^knf9_($rE3'_Meqg]?rc).]U3)BnXX?beToHCiV`>^GY
%MR4tl5T=H29>HZ!o&96M-.oLeVHa1_#Y#GuZo5hLf`Og*30DCBqhQJi4u")j#<#jk=<c%JN/4fLn1khMPG/Y/0O&ZI+Xa"l<S8:2
%,1m@*WAWa)HnSC853,-$LF"Jp#H!r*=@/#fTN(>r+*%LK9K+OX#No>j>@J(+H;8WFZ,I]qa7:k/R"Ho8hG.oBB-L!m=[C%I4S?"%
%=@5j%BD7][O-gSXSA_o?*U%0D6;GH0m">'bj?Un9.nds?I$rcU=9?h6NL/<b%Lurl4+Zu1jR'C;,?Dt2FH&8B^;V`;-\B^Qa6+@\
%*^l6VLkCJ)H53b#<?&I!:O'(b9B6V8CJjb4b`ecY%i4PlJs>7lkM/?"o`.7gZR:nNq-$B9<@lsh\Z*UH;CefVGC2=RUmeRYiH<#D
%\R_=bnAucJLR6lF.VbeU6(ZW*^+n*p6.VlP,9-9K@S50gWZVR09*A.>>&nPEcuG\)o*^D<B-S7EI^tWlIM7\lfYoSZLL<>7nR/m^
%*f)/SZ,+",C.uS)^+,2($7:5-V&c[G"+cMhMA_mHL3HpQWs'<jH_7ZUk%21H-uT*q6!b`e(BkA&I5nVlK;p>l.8`5Acu4CnT>'U,
%H&6GqMTDWAR*'rU(LIX_FlmGePSggmHZtQ/q?at@&bGN,(oQVhH%V.OZ&,)A=sY/Pre_/&_igXL&#BoR"&#*Hn0X(J-Y:%tGU9ko
%Pa6YNb0@>+6](gH;M(`u0lH"E,gikJ]E\ZcmPc^jh[o-.pT:3AGVs=f-2"O39Wpj/k@Q[Bp)?!$Y46)(LPg'<eQ[R@GFil6"#82&
%^#In;<BR2tOV@NtA?)U>Y/0c)/gS.S/li5:6-aL_pg==Mj2!0NI=O!b>OaoEh:9;Aa2BV5:9O$u5'e2U#7$J.4)ie,cJK!!&6tbH
%IZHs9-QWi*48U'R+a)Ul]9XiA\QGJ0iA]hf4a;<rn\ppq3peTX>k=:rIu=9tQXB[fjn"s+gg.XAL#9'3r8$HF2i#R8Df5"smr.]"
%[1:OODVj4,hVB1.]srJ$"J)t2^\Gd7^\d3#BE&KoPHSK~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial -300 -170 4500 4 v 1050 118 a
SDict begin H.S end
 1050 118 a
1050 118 a
SDict begin 14 H.A end
 1050 118 a 1050 118 a
SDict begin [/View [/XYZ H.V]/Dest (section*.21) cvn /DEST pdfmark
end
 1050 118 a Fb(S1)38
b(T)-9 b(able)2827 b Fh(121)1050 271 y Fl(Lorem)32 b(Ipsum.)k
Fn(Maecenas)26 b(con)n(v)-5 b(allis)26 b(mauris)h(sit)h(amet)g(sem)f
(ultrices)g(gra)n(vida.)35 b(Etiam)27 b(eget)139 b Fh(122)1050
371 y Fn(sapien)27 b(nibh.)38 b(Sed)27 b(ac)g(ipsum)h(eget)g(enim)g
(egestas)e(ullamcorp)r(er)g(nec)i(euismo)r(d)f(ligula.)452
b Fh(123)1050 470 y Fn(Curabitur)27 b(fringilla)g(pulvinar)g(lectus)h
(consectetur)e(p)r(ellen)n(tesque.)1087 b Fh(124)1050
745 y
SDict begin H.S end
 1050 745 a 1050 745 a
SDict begin 18 H.A end
 1050 745 a 1050 745 a
SDict begin [/View [/XYZ H.V]/Dest (section*.22) cvn /DEST pdfmark
end
 1050
745 a Fi(Ac)l(kno)l(wledgmen)l(ts)2197 b Fh(125)1050
927 y Fn(Cras)26 b(egestas)h(v)n(elit)g(mauris,)g(eu)h(mollis)f(turpis)
h(p)r(ellen)n(tesque)f(sit)h(amet.)37 b(In)n(terdum)27
b(et)444 b Fh(126)1050 1026 y Fn(malesuada)26 b(fames)i(ac)f(an)n(te)g
(ipsum)h(primis)f(in)h(faucibus.)37 b(Nam)28 b(id)g(pretium)f(nisi.)37
b(Sed)28 b(ac)f(quam)108 b Fh(127)1050 1126 y Fn(id)28
b(nisi)g(malesuada)e(congue.)36 b(Sed)28 b(in)n(terdum)f(aliquet)h
(augue,)f(at)g(p)r(ellen)n(tesque)h(quam)f(rhoncus)152
b Fh(128)1048 1226 y Fn(vitae.)3051 b Fh(129)1050 1500
y
SDict begin H.S end
 1050 1500 a 1050 1500 a
SDict begin 18 H.A end
 1050 1500 a 1050 1500 a
SDict begin [/View [/XYZ H.V]/Dest (section*.23) cvn /DEST pdfmark
end
 1050
1500 a Fi(References)1050 1549 y
SDict begin H.S end
 1050 1549 a 1050 1549
a
SDict begin 12 H.A end
 1050 1549 a 1050 1549 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Patel20062014) cvn /DEST pdfmark
end
 1050 1549 a 1133 1682 a Fn(1.)41
b(P)n(atel)27 b(AP)-7 b(,)27 b(Tirosh)g(I,)h(T)-7 b(rom)n(b)r(etta)27
b(JJ,)g(Shalek)g(AK,)h(Gillespie)f(SM,)h(W)-7 b(akimoto)27
b(H,)h(et)g(al.)1239 1782 y(Single-cell)f(RNA-seq)h(highligh)n(ts)f(in)
n(tratumoral)f(heterogeneit)n(y)g(in)i(primary)1239 1881
y(glioblastoma.)35 b(Science.)28 b(2014;344\(6190\):1396)o({1)o(40)o
(1.)i(Av)-5 b(ailable)28 b(from:)1239 1999 y
SDict begin H.S end
 1239 1999
a -18 x Fa(http://www.scien)o(cem)o(ag)o(.or)o(g/)o(con)o(te)o(nt)o
(/34)o(4/)o(619)o(0/)o(13)o(96.)o(ab)o(str)o(ac)o(t)3680
1923 y
SDict begin H.R end
 3680 1923 a 3680 1981 a
SDict begin [/H /I/Border [0 0 1]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(http://www.sciencemag.org/content/344/6190/1396.abstract)>>/Subtype
/Link H.B /ANN pdfmark end
 3680 1981 a Fn(.)p -300
5618 4500 17 v -300 5735 a Fg(PLOS)4170 b Fn(5/)4159
5735 y
SDict begin H.S end
 4159 5735 a Fn(5)4200 5681 y
SDict begin H.R end
 4200 5681 a 4200
5735 a
SDict begin [/Color [1 0 0]/H /I/Border [0 0 1]BorderArrayPatch/Subtype
/Link/Dest (page.5) cvn H.B /ANN pdfmark end
 4200 5735 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
