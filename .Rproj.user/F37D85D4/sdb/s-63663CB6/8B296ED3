{
    "contents" : "#Single Cell Coexpression Network Project main script\n#By: Brian Arand\n#November 2014\n\nworkingDirectories <- c(\"/home/barand/Single_Cell_RNA_Seq/\",\"C:/Users/Student/My Research/Single-Cell-RNA-Seq\");\nfor(wd in workingDirectories)\n  if(file.exists(wd)){expr=setwd(wd)}\n\nrm(workingDirectories,wd);\n\nprint(\"Library Paths:\");\n.libPaths();\n\nsource(\"http://bioconductor.org/biocLite.R\");\n\n#read in arguments\nprint(\"Reading in command line arguments.\");\nargs <- commandArgs(trailingOnly = TRUE);\nprint(paste0(\"commandArgs: \",args));\n\nif(length(args) > 0)\n{\n  #Parse arguments (we expec the form --argName=argValue)\n  parseArgs <- function (x) strsplit(sub(\"^--\",\"\",x), \"=\");\n  argsDF <- as.data.frame(do.call(\"rbind\", parseArgs(args)));\n  args <- as.character(argsDF$V2)\n  names(args) <- argsDF$V1\n  rm(argsDF);\n}\nargs<- as.list(args);\n\n#initialize arguments if \ninitializeBooleanArg <- function(arg, default){\n  if(is.null(arg))\n  {\n    arg <- default;\n  } else if(is.character(arg))\n  {\n    arg <- as.logical(arg);\n  }\n  return(arg);\n}\n\nargs$diffCoexFlag <- initializeBooleanArg(arg=args$diffCoexFlag, default=TRUE);\nargs$diffExprsFlag <- initializeBooleanArg(arg=args$diffExprsFlag, default=FALSE);\nargs$normFlagRPKM <- initializeBooleanArg(arg=args$normFlagRPKM, default=TRUE);\nargs$normFlagUbi <- initializeBooleanArg(arg=args$normFlagUbi, default=TRUE);\nargs$normFlagDESeq <- initializeBooleanArg(arg=args$normFlagDESeq, default=TRUE);\nargs$normFlagQuant <- initializeBooleanArg(arg=args$normFlagQuant, default=TRUE);\nargs$QCFlag <- initializeBooleanArg(arg=args$QCFlag, default=FALSE);\nargs$dataFromRDS <- initializeBooleanArg(arg=args$dataFromRDS, default=FALSE);\nargs$saveNormalizationRDS <- initializeBooleanArg(arg=args$saveNormalizationRDS, default=FALSE);\n\n\n#metaData <- cbind(metaData, control=(substr(x=metaData[,5],start=14,stop=16)=='11'));#addControl bool\n#metaData[,6] <- gsub(pattern=\"-\",replacement=\".\", x=metaData[,6]);#replace '-' with '.' to make mapping easier later\n\nif(args$dataFromRDS)\n{\n  print(\"Reading normalization.RDS\");\n  Data <- readRDS(\"normalization.RDS\");\n} else\n{\n  #import data\n  print(\"Importing data files.\");\n  dataFile <- \"Data/GSE57872_GBM_data_matrix.txt/GSE57872_GBM_data_matrix.txt\"\n  metaFile <- \"Data/GSE57872_series_matrix.txt/GSE57872_series_matrix.txt\"\n  #Metadata\n  metaData <- read.table(file=metaFile,header=TRUE,sep=\"\\t\",skip=35,fill=TRUE,blank.lines.skip=TRUE);\n  metaData <- metaData[,metaData[18,]!=\"Please note that this sample did not pass the quality control filtering (described in the data processing field), thus was excluded from further data processing\"]\n  metaData <- metaData[,-1];\n  \n  Data <- list();\n  Data$all <- read.table(file=dataFile);\n  indecies <- NULL;\n  metaNames <- sapply(X=names(metaData), FUN=function(x){ return(paste0(strsplit(x=paste0(strsplit(x=x,split=\"\\\\.\")[[1]][c(-1,-2)],collapse='-'),split=\"_\")[[1]][-1],collapse=\"_\"));});\n  for(i in 1:dim(Data$all)[2])\n  {\n    sampleName <- names(Data$all)[i];\n    #do some mapping because metadata authors were dumb\n    if(grepl(\"^MGH264_...$\",sampleName))\n    {\n      sampleName<- paste0(\"MGH26-2_\",strsplit(sampleName,\"_\")[[1]][2]);\n    } else if(grepl(\"CSC$\",sampleName))\n    {\n      sampleName<- paste0(substr(sampleName,1,nchar(sampleName)-3),\"GSC\");\n    } else if(grepl(\"FCS$\",sampleName))\n    {\n      sampleName<- paste0(substr(sampleName,1,nchar(sampleName)-3),\"DGC\")\n    }\n    for(j in 1:(length(metaNames)+1))\n    {\n      if(j==length(metaNames)+1)\n      {\n        j=-1;\n        break;\n      }\n      if(sampleName==metaNames[[j]])\n        break;\n    }\n    indecies <- c(indecies, j);\n  }\n  Data$all <- Data$all[,indecies!=-1];\n  indecies <- indecies[indecies!=-1];\n  Data$meta <- metaData[,indecies];\n  \n  #particion by primary cancer sample\n  Data$MGH26 <- as.matrix(Data$all[,grepl(x=colnames(Data$meta), pattern=\"^Single.cell.mRNA.seq_MGH26\")])\n  #Data$MGH262 <- as.matrix(Data$all[,grepl(x=colnames(Data$meta), pattern=\"^Single.cell.mRNA.seq_MGH26\")])\n  Data$MGH28 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_MGH28\"])\n  Data$MGH29 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_MGH29\"])\n  Data$MGH30 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_MGH30\"])\n  Data$MGH31 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_MGH31\"])\n  Data$CSC6 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_CSC6\"])\n  Data$CSC8 <- as.matrix(Data$all[,Data$meta[7,]==\"Single cell mRNA-seq_CSC8\"])\n  Data$Population <- as.matrix(Data$all[,grepl(x=lapply(Data$meta[7,], as.character), pattern=\"Population mRNA-seq_MGH..\")])[,c(3,6,7,8,11)]\n  Data$Samples <- as.matrix(cbind(Data$MGH26,Data$MGH28,Data$MGH29,Data$MGH30,Data$MGH31))\n  Data$Average <-cbind(apply(Data$MGH26,MARGIN=1,FUN=mean),apply(Data$MGH28,MARGIN=1,FUN=mean),apply(Data$MGH29,MARGIN=1,FUN=mean),apply(Data$MGH30,MARGIN=1,FUN=mean),apply(Data$MGH31,MARGIN=1,FUN=mean));\n  \n  #hierarchical clustering\n  Data$dist <- dist(x=t(Data$Samples),method=\"euclidian\")\n  Data$hclust <- hclust(d=Data$dist)\n  plot(Data$hclust,cex=0.8)\n  \n  # vector of colors labelColors = c('red', 'blue', 'darkgreen', 'darkgrey',\n  # 'purple')\n  # using dendrogram objects\n  Data$dendogram = as.dendrogram(Data$hclust)\n  labelColors = c(\"RED\", \"BLUE\", \"GREEN\", \"YELLOW\" , \"PURPLE\", \"ORANGE\", \"PINK\")\n  # cut dendrogram in 4 clusters\n  clusMember = cutree(Data$hclust, 7)\n  # function to get color labels\n  colLab <- function(n) {\n    if (is.leaf(n)) {\n      a <- attributes(n)\n      labCol <- labelColors[clusMember[which(names(clusMember) == a$label)]]\n      attr(n, \"nodePar\") <- c(a$nodePar, lab.col = labCol)\n    }\n    n\n  }\n  # using dendrapply\n  clusDendro = dendrapply(Data$dendogram, colLab)\n  # make plot\n  plot(clusDendro, main = \"Cool Dendrogram\")#, type = \"triangle\")\n  \n  #partician by clustering like the original paper.\n  \n  rm(indecies,metaData,i,j,metaNames, sampleName)\n\nif(args$saveNormalizationRDS)\n{\n  saveRDS(Data, file=\"normalization.RDS\")\n}\n\nif(args$diffExprsFlag)\n{\n  print(\"Gene Differential Expression:\");\n  \n  #microarray differential expression\n  #may not be working... produces rediculously small p-values\n  #source(\"http://bioconductor.org/biocLite.R\");\n  biocLite(\"limma\");\n  library(\"limma\");\n  \n  condition=c(rep(x=\"control\",times=Data$conCount), rep(x=\"cancer\", times=Data$canCount));\n  #combn <- factor(paste(pData(phenoData)[,1], pData(phenoData)[,2], sep = \"_\"));\n  design <- model.matrix(~condition);# describe model to be fit\n  \n  fit <- lmFit(Data$ma, design);# fit each probeset to model\n  efit <- eBayes(fit);# empirical Bayes adjustment\n  write.csv(topTable(efit, coef=2, number=length(efit$p.value)), file=paste0(\"DiffExpression MicroArray.csv\"),quote=FALSE);\n  \n  #significance comparison\n  maPRank <- rank(efit$p.value[,2]);\n  rsPRank <- rank(res$padj);\n  names(rsPRank) <- row.names(res);\n  maPRank <- maPRank[sort(names(maPRank))];\n  rsPRank <- rsPRank[sort(names(rsPRank))];\n  plot2Groups(GroupA=maPRank, GroupB=rsPRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"DEG Rank comparison by p-value\", file=\"Comp_DEG_pVal_rank_across_tech.png\");\n  Rs_PRank <- cor(x=maPRank, y=rsPRank, method=\"spearman\");\n  rm(maPRank);\n  rm(rsPRank);\n  \n  #log foldchange comparison\n  maFC <- topTable(efit, coef=2, number=length(efit$p.value))[,1];\n  names(maFC) <- row.names(topTable(efit, coef=2, number=length(efit$p.value)));\n  maFCRank <- rank(maFC);\n  rsFC <- res$log2FoldChange;\n  names(rsFC) <- row.names(res);\n  rsFCRank <- rank(rsFC);\n  maFCRank <- maFCRank[sort(names(maFCRank))];\n  rsFCRank <- rsFCRank[sort(names(rsFCRank))];\n  plot2Groups(GroupA=maFCRank, GroupB=rsFCRank, xlab=\"MicroArray Rank\", ylab=\"RNASeq Rank\", main=\"Log2 Fold Change Rank comparison\", file=\"Comp_FC_rank_across_tech.png\");\n  Rs_FCRank <- cor(x=maFCRank, y=rsFCRank, method=\"spearman\");\n  rm(maFCRank);\n  rm(rsFCRank);\n}\n\n#subset by significance\nif(args$diffExprsFlag)\n{\n  subBySig <- FALSE;\n  if(subBySig)\n  {\n    print(\"Filtering genes by significance:\");\n    cutoff<- 0.0000001;\n    filter <- efit.p.adj<cutoff & !is.na(efit.p.adj);\n    maGenes<- as.matrix(cbind(efit.p.adj[filter], Data$ma[filter,]));#attach adjusted p value now\n    filter <- res$padj<cutoff & !is.na(res$padj);\n    rsGenes<- as.matrix(cbind(res$padj[filter], Data$rs_DESeq[filter,]));#attach adjusted p value now\n  } else #subset by rank top X most significant\n  {\n    print(\"Filtering genes by fold-change:\")\n    cutoff <- 12000;\n    filter <- rank(efit.p.adj)<=cutoff & !is.na(efit.p.adj);\n    maGenes<- as.matrix(cbind(efit.p.adj[filter], Data$ma[filter,]));#attach adjusted p value now\n    filter <- rank(res$padj)<=cutoff & !is.na(res$padj);\n    rsGenes<- as.matrix(cbind(res$padj[filter], Data$rs_DESeq[filter,]));#attach adjusted p value now\n  }\n  \n  #intersection of technology significant genes and output venn diagram gene lists\n  filter <- intersect(row.names(maGenes), row.names(rsGenes));\n  maIntGenes <- maGenes[filter,];\n  rsIntGenes <- rsGenes[filter,];\n  maUniGenes <- maGenes[setdiff(row.names(maGenes),row.names(maIntGenes)),];\n  rsUniGenes <- rsGenes[setdiff(row.names(rsGenes),row.names(rsIntGenes)),];\n  \n  #top genes in each group\n  head(sort(maIntGenes[,1]))\n  head(sort(rsIntGenes[,1]))\n  head(sort(maUniGenes[,1]))\n  head(sort(rsUniGenes[,1]))\n  #remove p.values from Gene lists\n  maGenes <- maGenes[,-1];\n  rsGenes <- rsGenes[,-1];\n} else\n{\n  print(\"No gene filtering performed.\")\n  maGenes <- Data$ma;\n  rsGenes <- Data$rs_DESeq;\n  cutoff <- \"allGenes\";\n}\n\nlibrary(\"ggplot2\"); \n\nif(args$QCFlag)\n{\n  print(\"Outputing quality control figures:\");\n  \n  #density_data <- data.frame();\n  dataSets<-list(Data$MGH26,Data$MGH262,Data$MGH28,Data$MGH29,Data$MGH30,Data$MGH31, Data$Samples, Data$CSC6, Data$CSC8);\n  dataSetNames <- c(\"MGH26\", \"MGH262\", \"MGH28\", \"MGH29\", \"MGH30\", \"MGH31\",\"Samples\",\"CSC6\",\"CSC8\");\n  #breaks <- 100;\n  for(i in 1:length(dataSets))\n  {\n    dataSet = dataSets[[i]];\n    name <- dataSetNames[i];\n    \n    png(filename=paste0(name,\"_normalization_check.png\"));\n    boxplot(x=dataSet,names=seq(1,dim(dataSet)[2]), outcex=0.5, outpch=20, main=\"Patient box plots\", xlab=\"Patient\", ylab=\"expression value\");\n    dev.off();\n  }\n}\n\n#calculated correlation statistics\n\ncorrelationHistogram <- function(data, method, breaks=100, file)\n{\n  corrMat <- cor(x=t(data), method=method, use=\"complete\");\n  corrMat[is.na(corrMat)]<-0;\n  hist <- hist(x=corrMat,breaks=breaks,plot=FALSE);\n  write.csv(x=corrMat,file=file);\n  return(list(corrMat=corrMat, hist=hist));\n}\n\nlibrary(\"igraph\");\n\nfor(method in c(\"spearman\"))\n{\n  print(paste0(\"Computing \", method, \" correlation for:\"));\n  \n  print(\"Constructing correlation matricies\");\n  \n  density_data <- data.frame();\n  dataSets<-list(Data$MGH26,Data$MGH28,Data$MGH29,Data$MGH30,Data$MGH31);#, Data$Samples, Data$Population, Data$Average);\n  dataSetNames <- c(\"MGH26\", \"MGH28\", \"MGH29\", \"MGH30\", \"MGH31\");#, \"Samples\", \"Population\", \"Average\");\n  runningAvgCorMat <- matrix(0,nrow=dim(Data$MGH26)[1],ncol=dim(Data$MGH26)[1]);\n  rownames(x=runningAvgCorMat)<- rownames(Data$MGH26);\n  colnames(x=runningAvgCorMat)<- rownames(Data$MGH26);\n  \n  for(i in 1:length(dataSets))\n  {\n    dataSet = dataSets[[i]];\n    name <- dataSetNames[i];\n    print(paste0(\"Calculating correlation histogram for \", name));\n    profile <- correlationHistogram(data=dataSet, method=method, file=paste0(\"../Data/coexpressionNetworks/\", name,\"_\", method,\"_int.txt\"));\n    density_data <- data.frame(cor=c(density_data$cor, profile$hist$mids),\n                               density=c(density_data$density, profile$hist$counts/sum(profile$hist$counts)),\n                               method=c(density_data$method, rep(x = name, times=length(profile$hist$counts))),stringsAsFactors=FALSE);\n    \n    #update running Average\n    runningAvgCorMat <- runningAvgCorMat * (i-1)/i + profile$corrMat * (1/i);\n    \n    profile$corrMat<-NULL;\n    \n    print(paste0(\"\\tTotal Hist counts: \", sum(profile$hist$counts)))\n    print(paste0(\"\\tNum genes: \", dim(Data[[i]])[1]))\n  }\n  \n   #plot overlapping histogram of PCC\n  print(paste0(\"Outputting comparative \", method, \" histogram:\"));\n  \n  # Density plots\n  \n  # png(filename=);\n  ggplot(data=density_data, aes(x=cor, y=density, group=method, colour=method)) + \n    geom_line(size=1, aes(linetype=method)) +\n    ggtitle(paste0(method, \" density comparison\"));\n  ggsave(paste0(\"Comparative density of network \", method, \".png\"));\n  #dev.off();\n  \n  rm(density_data, dataSets, dataSetNames,i, method, profile);\n  \n  ##################################################################\n  #coexpression networks direct comparison\n  #maCorrMat <- cor(x=t(Data$ma), method=method, use=\"complete\");\n  #rsCorrMat <- cor(x=t(Data$rs_DESeq), method=method, use=\"complete\");\n  \n  if(args$diffCoexFlag)\n  {\n    print(\"Calculating differential coexpression network.\");\n    \n    diffCorrMat <- rsCorrMat - maCorrMat\n    \n    write.csv(x=diffCorrMat,file=paste0(\"Data/BRCA/Differential Network \",method,\".txt\"));\n    #calc histogram\n    hist <- hist(x=diffCorrMat,breaks=100,plot=FALSE);\n    density_data = data.frame(\"cor\"=hist$mids,\"density\"=hist$counts/sum(hist$counts),\"method\"=rep(x=\"diff\",times=length(hist$counts)));\n    \n    #output density distribution\n    #png(filename=paste0(\"Differential Network \", method, \" density.png\"));\n    ggplot(data=density_data, aes(x=cor, y=density, group=method, colour=method)) + \n      geom_line(size=1, aes(linetype=method)) +\n      ggtitle(paste0(\"Density of \", method,\"(rs) - \", method,\"(ma)\"));\n    ggsave(paste0(\"Differential Network \", method, \" density.png\"));\n    #dev.off();\n    \n    rm(density_data, hist);\n    #output venn diagram gene-edge lists\n  }\n  \n  #create iGraph and plot\n  \n  print(\"Constructing microArray iGraph.\");\n  maGraph <-graph.adjacency(adjmatrix=maCorrMat*1000,mode=\"undirected\", weighted=TRUE);\n  rm(maCorrMat);\n  #add vertex attributes to graph\n  for(i in 1:length(V(maGraph)))\n  {\n    name <- V(maGraph)[i]$name;\n    #V(maGraph)[i]$fc <- maFC[name];\n    #V(maGraph)[i]$p <- efit.p.adj[name];\n  }\n  \n  print(\"Outputting microArray iGraph.\");\n  write.graph(maGraph, file=paste0(method, \"_maGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n  rm(maGraph);\n  \n  print(\"Constructing RNASeq iGraph.\");\n  rsGraph <-graph.adjacency(adjmatrix=rsCorrMat*1000,mode=\"undirected\", weighted=TRUE);\n  rm(rsCorrMat);\n  for(i in 1:length(V(rsGraph)))\n  {\n    name <- V(rsGraph)[i]$name;\n    #V(rsGraph)[i]$fc <- rsFC[name];\n    #V(rsGraph)[i]$p <- res[name,]$padj;\n  }\n  \n  print(\"Outputting RNASeq iGraph\");\n  write.graph(rsGraph, file=paste0(method, \"_rsGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n  rm(rsGraph);\n  \n  if(args$diffCoexFlag)\n  {\n    \n    print(\"Constructing differential coexpression iGraph\");\n    diffGraph <-graph.adjacency(adjmatrix=diffCorrMat*1000,mode=\"undirected\", weighted=TRUE);\n    rm(diffCorrMat);\n    for(i in 1:length(V(diffGraph)))\n    {\n      name <- V(diffGraph)[i]$name;\n      #V(diffGraph)[i]$RS_fc <- rsFC[name];\n      #V(diffGraph)[i]$RS_p <- res[name,]$padj;\n      #V(diffGraph)[i]$MA_fc <- maFC[name];\n      #V(diffGraph)[i]$MA_p <- efit.p.adj[name];\n    }\n    print(\"Outputting differential coexpression iGraph\");\n    write.graph(diffGraph, file=paste0(method, \"_diffGraph_\", cutoff, \".graphml\"), format=\"graphml\" );\n    rm(diffGraph);\n  }\n}\n#calculate difference network and fold-change network\n#difNet <- rsCorrMat - maCorrMat;\n#fcNet <- rsCorrMat / maCorrMat;\n#visualize network\n\n##scale free networks via WGCNA\n##Load WGCNA package\n#library(WGCNA);\n##Load additional necessary packages\n#library(cluster);\n#k=softConnectivity(datE=t(maGenes),power=6);\n## Plot a histogram of k and a scale free topology plot\n#sizeGrWindow(10,5);\n#par(mfrow=c(1,2));\n#png(filename=\"Data/BRCA/maPearson_WGCNA-power6_Hist.png\");\n#hist(k, main=\"Connectivity (MArray Pearson pow6)\");\n#dev.off();\n#png(filename=\"Data/BRCA/maPearson_WGCNA-power6_ScaleFreePlot.png\");\n#scaleFreePlot(k, main=\"Check scale free topology (MArray Pearson pow6\\n\");\n#dev.off();\n\n#k=softConnectivity(datE=t(rsGenes),power=6);\n## Plot a histogram of k and a scale free topology plot\n#sizeGrWindow(10,5);\n#par(mfrow=c(1,2));\n#png(filename=\"Data/BRCA/rsPearson_WGCNA-power6_Hist.png\");\n#hist(k, main=\"Connectivity (RNASeq Pearson pow6)\");\n#dev.off();\n#png(filename=\"Data/BRCA/rsPearson_WGCNA-power6_ScaleFreePlot.png\");\n#scaleFreePlot(k, main=\"Check scale free topology (RNASeq Pearson pow6)\\n\");\n#dev.off();\n\nquit();\n",
    "created" : 1423693263135.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "639242872",
    "id" : "8B296ED3",
    "lastKnownWriteTime" : 1436189691,
    "path" : "C:/Users/Student/My Research/Single Cell RNA Seq/Single-Cell-RNA-Seq/main.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}